/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var e={19:(e,t,n)=>{"use strict";n.d(t,{A:()=>a});var i=n(354),s=n.n(i),r=n(314),o=n.n(r)()(s());o.push([e.id,".transaction-form__form {\n  display: flex;\n  flex-direction: column;\n  gap: 0.5rem;\n}\n","",{version:3,sources:["webpack://./blocks/transaction-form/__form/transaction-form__form.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,sBAAsB;EACtB,WAAW;AACb",sourcesContent:[".transaction-form__form {\n  display: flex;\n  flex-direction: column;\n  gap: 0.5rem;\n}\n"],sourceRoot:""}]);const a=o},40:(e,t,n)=>{"use strict";n.d(t,{A:()=>a});var i=n(354),s=n.n(i),r=n(314),o=n.n(r)()(s());o.push([e.id,".transaction-form__select {\n  padding: 0.5rem;\n  border-radius: 5px;\n  border: 1px solid #ccc;\n}\n","",{version:3,sources:["webpack://./blocks/transaction-form/__select/transaction-form__select.css"],names:[],mappings:"AAAA;EACE,eAAe;EACf,kBAAkB;EAClB,sBAAsB;AACxB",sourcesContent:[".transaction-form__select {\n  padding: 0.5rem;\n  border-radius: 5px;\n  border: 1px solid #ccc;\n}\n"],sourceRoot:""}]);const a=o},43:(e,t,n)=>{"use strict";n.d(t,{A:()=>a});var i=n(354),s=n.n(i),r=n(314),o=n.n(r)()(s());o.push([e.id,".charts__title {\n  margin-bottom: 1rem;\n}\n","",{version:3,sources:["webpack://./blocks/charts/__title/charts__title.css"],names:[],mappings:"AAAA;EACE,mBAAmB;AACrB",sourcesContent:[".charts__title {\n  margin-bottom: 1rem;\n}\n"],sourceRoot:""}]);const a=o},56:(e,t,n)=>{"use strict";e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},72:e=>{"use strict";var t=[];function n(e){for(var n=-1,i=0;i<t.length;i++)if(t[i].identifier===e){n=i;break}return n}function i(e,i){for(var r={},o=[],a=0;a<e.length;a++){var c=e[a],l=i.base?c[0]+i.base:c[0],u=r[l]||0,d="".concat(l," ").concat(u);r[l]=u+1;var h=n(d),p={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==h)t[h].references++,t[h].updater(p);else{var m=s(p,i);i.byIndex=a,t.splice(a,0,{identifier:d,updater:m,references:1})}o.push(d)}return o}function s(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,s){var r=i(e=e||[],s=s||{});return function(e){e=e||[];for(var o=0;o<r.length;o++){var a=n(r[o]);t[a].references--}for(var c=i(e,s),l=0;l<r.length;l++){var u=n(r[l]);0===t[u].references&&(t[u].updater(),t.splice(u,1))}r=c}}},80:(e,t,n)=>{"use strict";n.d(t,{A:()=>a});var i=n(354),s=n.n(i),r=n(314),o=n.n(r)()(s());o.push([e.id,".transaction-form {\n  background-color: #fff;\n  margin: 1rem;\n  padding: 1rem;\n  border-radius: 10px;\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.05);\n}\n","",{version:3,sources:["webpack://./blocks/transaction-form/transaction-form.css"],names:[],mappings:"AAAA;EACE,sBAAsB;EACtB,YAAY;EACZ,aAAa;EACb,mBAAmB;EACnB,wCAAwC;AAC1C",sourcesContent:[".transaction-form {\n  background-color: #fff;\n  margin: 1rem;\n  padding: 1rem;\n  border-radius: 10px;\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.05);\n}\n"],sourceRoot:""}]);const a=o},113:e=>{"use strict";e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},156:(e,t,n)=>{"use strict";n.d(t,{A:()=>a});var i=n(354),s=n.n(i),r=n(314),o=n.n(r)()(s());o.push([e.id,".summary {\n  display: flex;\n  justify-content: space-around;\n  flex-wrap: wrap;\n  margin: 1rem;\n}\n","",{version:3,sources:["webpack://./blocks/summary/summary.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,6BAA6B;EAC7B,eAAe;EACf,YAAY;AACd",sourcesContent:[".summary {\n  display: flex;\n  justify-content: space-around;\n  flex-wrap: wrap;\n  margin: 1rem;\n}\n"],sourceRoot:""}]);const a=o},159:(e,t,n)=>{"use strict";n.d(t,{A:()=>a});var i=n(354),s=n.n(i),r=n(314),o=n.n(r)()(s());o.push([e.id,".header__tagline {\n  font-size: 1rem;\n  margin: 0.5rem 0 0;\n}\n","",{version:3,sources:["webpack://./blocks/header/__tagline/header__tagline.css"],names:[],mappings:"AAAA;EACE,eAAe;EACf,kBAAkB;AACpB",sourcesContent:[".header__tagline {\n  font-size: 1rem;\n  margin: 0.5rem 0 0;\n}\n"],sourceRoot:""}]);const a=o},184:(e,t,n)=>{"use strict";n.d(t,{A:()=>a});var i=n(354),s=n.n(i),r=n(314),o=n.n(r)()(s());o.push([e.id,".footer {\n  text-align: center;\n  padding: 1rem;\n  background-color: #e0e0e0;\n  margin-top: 2rem;\n}\n","",{version:3,sources:["webpack://./blocks/footer/footer.css"],names:[],mappings:"AAAA;EACE,kBAAkB;EAClB,aAAa;EACb,yBAAyB;EACzB,gBAAgB;AAClB",sourcesContent:[".footer {\n  text-align: center;\n  padding: 1rem;\n  background-color: #e0e0e0;\n  margin-top: 2rem;\n}\n"],sourceRoot:""}]);const a=o},206:(e,t,n)=>{"use strict";n.d(t,{A:()=>a});var i=n(354),s=n.n(i),r=n(314),o=n.n(r)()(s());o.push([e.id,".auth-section {\n  max-width: 400px;\n  margin: 2rem auto;\n  padding: 1.5rem;\n  border: 1px solid #ccc;\n  border-radius: 8px;\n  background: #fff;\n  text-align: center;\n}\n.auth-section input {\n  width: 90%;\n  margin: 0.5rem 0;\n  padding: 0.5rem;\n}\n.auth-section button {\n  width: 95%;\n  padding: 0.6rem;\n  margin-top: 1rem;\n  cursor: pointer;\n}\n","",{version:3,sources:["webpack://./blocks/auth-section/auth-section.css"],names:[],mappings:"AAAA;EACE,gBAAgB;EAChB,iBAAiB;EACjB,eAAe;EACf,sBAAsB;EACtB,kBAAkB;EAClB,gBAAgB;EAChB,kBAAkB;AACpB;AACA;EACE,UAAU;EACV,gBAAgB;EAChB,eAAe;AACjB;AACA;EACE,UAAU;EACV,eAAe;EACf,gBAAgB;EAChB,eAAe;AACjB",sourcesContent:[".auth-section {\n  max-width: 400px;\n  margin: 2rem auto;\n  padding: 1.5rem;\n  border: 1px solid #ccc;\n  border-radius: 8px;\n  background: #fff;\n  text-align: center;\n}\n.auth-section input {\n  width: 90%;\n  margin: 0.5rem 0;\n  padding: 0.5rem;\n}\n.auth-section button {\n  width: 95%;\n  padding: 0.6rem;\n  margin-top: 1rem;\n  cursor: pointer;\n}\n"],sourceRoot:""}]);const a=o},238:(e,t,n)=>{"use strict";n.d(t,{A:()=>a});var i=n(354),s=n.n(i),r=n(314),o=n.n(r)()(s());o.push([e.id,".transaction__td {\n  padding: 0.75rem;\n  border-bottom: 1px solid #ddd;\n  text-align: left;\n}\n","",{version:3,sources:["webpack://./blocks/transactions/__td/transaction__td.css"],names:[],mappings:"AAAA;EACE,gBAAgB;EAChB,6BAA6B;EAC7B,gBAAgB;AAClB",sourcesContent:[".transaction__td {\n  padding: 0.75rem;\n  border-bottom: 1px solid #ddd;\n  text-align: left;\n}\n"],sourceRoot:""}]);const a=o},249:(e,t,n)=>{"use strict";n.d(t,{A:()=>L});var i=n(354),s=n.n(i),r=n(314),o=n.n(r),a=n(338),c=n(608),l=n(495),u=n(159),d=n(206),h=n(80),p=n(971),m=n(387),f=n(19),g=n(40),w=n(951),_=n(872),v=n(987),y=n(278),b=n(238),C=n(459),A=n(835),k=n(256),E=n(43),I=n(947),T=n(267),S=n(156),x=n(795),P=n(184),R=n(397),N=n(609),O=o()(s());O.i(a.A),O.i(c.A),O.i(l.A),O.i(u.A),O.i(d.A),O.i(h.A),O.i(p.A),O.i(m.A),O.i(f.A),O.i(g.A),O.i(w.A),O.i(_.A),O.i(v.A),O.i(y.A),O.i(b.A),O.i(C.A),O.i(A.A),O.i(k.A),O.i(E.A),O.i(I.A),O.i(T.A),O.i(S.A),O.i(x.A),O.i(P.A),O.i(R.A),O.i(N.A),O.push([e.id,"/* root */\n\n/* header */\n\n/* auth-section */\n\n/* transaction-form */\n\n/* transactions */\n/* charts */\n\n/* summary */\n\n/* footer */\n","",{version:3,sources:["webpack://./pages/index.css"],names:[],mappings:"AAAA,SAAS;;AAGT,WAAW;;AAKX,iBAAiB;;AAGjB,qBAAqB;;AAQrB,iBAAiB;AAQjB,WAAW;;AAMX,YAAY;;AAKZ,WAAW",sourcesContent:["/* root */\n@import url(../blocks/root/root.css);\n\n/* header */\n@import url(../blocks/header/header.css);\n@import url(../blocks/header/__title/header__title.css);\n@import url(../blocks/header/__tagline/header__tagline.css);\n\n/* auth-section */\n@import url(../blocks/auth-section/auth-section.css);\n\n/* transaction-form */\n@import url(../blocks/transaction-form/transaction-form.css);\n@import url(../blocks/transaction-form/__title/transaction-form__title.css);\n@import url(../blocks/transaction-form/__input/transaction-form__input.css);\n@import url(../blocks/transaction-form/__form/transaction-form__form.css);\n@import url(../blocks/transaction-form/__select/transaction-form__select.css);\n@import url(../blocks/transaction-form/__button/transaction-form__button.css);\n\n/* transactions */\n\n@import url(../blocks/transactions/transactions.css);\n@import url(../blocks/transactions/__title/transactions__title.css);\n@import url(../blocks/transactions/__table/transaction__table.css);\n@import url(../blocks/transactions/__td/transaction__td.css);\n@import url(../blocks/transactions/__th/transactions__th.css);\n@import url(../blocks/transactions/__delete-button/transactions__delete-button.css);\n/* charts */\n@import url(../blocks/charts/charts.css);\n@import url(../blocks/charts/__title/charts__title.css);\n@import url(../blocks/charts/__bar/charts__bar.css);\n@import url(../blocks/charts/__pie/charts__pie.css);\n\n/* summary */\n\n@import url(../blocks/summary/summary.css);\n@import url(../blocks/summary/__card/summary__card.css);\n\n/* footer */\n\n@import url(../blocks/footer/footer.css);\n@import url(../blocks/footer/__button/footer__button.css);\n@import url(../blocks/footer/__credit/footer__credit.css);\n"],sourceRoot:""}]);const L=O},256:(e,t,n)=>{"use strict";n.d(t,{A:()=>a});var i=n(354),s=n.n(i),r=n(314),o=n.n(r)()(s());o.push([e.id,".charts {\n  margin: 1rem;\n  background: #fff;\n  padding: 1rem;\n  border-radius: 10px;\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.05);\n  text-align: center;\n}\n","",{version:3,sources:["webpack://./blocks/charts/charts.css"],names:[],mappings:"AAAA;EACE,YAAY;EACZ,gBAAgB;EAChB,aAAa;EACb,mBAAmB;EACnB,wCAAwC;EACxC,kBAAkB;AACpB",sourcesContent:[".charts {\n  margin: 1rem;\n  background: #fff;\n  padding: 1rem;\n  border-radius: 10px;\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.05);\n  text-align: center;\n}\n"],sourceRoot:""}]);const a=o},267:(e,t,n)=>{"use strict";n.d(t,{A:()=>a});var i=n(354),s=n.n(i),r=n(314),o=n.n(r)()(s());o.push([e.id,".charts__pie {\n  margin-top: 1rem;\n}\n","",{version:3,sources:["webpack://./blocks/charts/__pie/charts__pie.css"],names:[],mappings:"AAAA;EACE,gBAAgB;AAClB",sourcesContent:[".charts__pie {\n  margin-top: 1rem;\n}\n"],sourceRoot:""}]);const a=o},278:(e,t,n)=>{"use strict";n.d(t,{A:()=>a});var i=n(354),s=n.n(i),r=n(314),o=n.n(r)()(s());o.push([e.id,".transactions__table {\n  width: 100%;\n  border-collapse: collapse;\n  background: white;\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.05);\n}\n","",{version:3,sources:["webpack://./blocks/transactions/__table/transaction__table.css"],names:[],mappings:"AAAA;EACE,WAAW;EACX,yBAAyB;EACzB,iBAAiB;EACjB,wCAAwC;AAC1C",sourcesContent:[".transactions__table {\n  width: 100%;\n  border-collapse: collapse;\n  background: white;\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.05);\n}\n"],sourceRoot:""}]);const a=o},314:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",i=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),i&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),i&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,i,s,r){"string"==typeof e&&(e=[[null,e,void 0]]);var o={};if(i)for(var a=0;a<this.length;a++){var c=this[a][0];null!=c&&(o[c]=!0)}for(var l=0;l<e.length;l++){var u=[].concat(e[l]);i&&o[u[0]]||(void 0!==r&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=r),n&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=n):u[2]=n),s&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=s):u[4]="".concat(s)),t.push(u))}},t}},338:(e,t,n)=>{"use strict";n.d(t,{A:()=>a});var i=n(354),s=n.n(i),r=n(314),o=n.n(r)()(s());o.push([e.id,"body {\n  font-family: Arial, sans-serif;\n  margin: 0;\n  padding: 0;\n  background-color: #f7f9fb;\n  color: #333;\n}\n","",{version:3,sources:["webpack://./blocks/root/root.css"],names:[],mappings:"AAAA;EACE,8BAA8B;EAC9B,SAAS;EACT,UAAU;EACV,yBAAyB;EACzB,WAAW;AACb",sourcesContent:["body {\n  font-family: Arial, sans-serif;\n  margin: 0;\n  padding: 0;\n  background-color: #f7f9fb;\n  color: #333;\n}\n"],sourceRoot:""}]);const a=o},354:e=>{"use strict";e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var i=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(i),r="/*# ".concat(s," */");return[t].concat([r]).join("\n")}return[t].join("\n")}},387:(e,t,n)=>{"use strict";n.d(t,{A:()=>a});var i=n(354),s=n.n(i),r=n(314),o=n.n(r)()(s());o.push([e.id,".transaction-form__input {\n  padding: 0.5rem;\n  border-radius: 5px;\n  border: 1px solid #ccc;\n}\n","",{version:3,sources:["webpack://./blocks/transaction-form/__input/transaction-form__input.css"],names:[],mappings:"AAAA;EACE,eAAe;EACf,kBAAkB;EAClB,sBAAsB;AACxB",sourcesContent:[".transaction-form__input {\n  padding: 0.5rem;\n  border-radius: 5px;\n  border: 1px solid #ccc;\n}\n"],sourceRoot:""}]);const a=o},397:(e,t,n)=>{"use strict";n.d(t,{A:()=>a});var i=n(354),s=n.n(i),r=n(314),o=n.n(r)()(s());o.push([e.id,".footer__button {\n  margin: 0.3rem;\n  padding: 0.5rem 1rem;\n  border: none;\n  background-color: #4caf50;\n  color: white;\n  border-radius: 5px;\n  cursor: pointer;\n}\n","",{version:3,sources:["webpack://./blocks/footer/__button/footer__button.css"],names:[],mappings:"AAAA;EACE,cAAc;EACd,oBAAoB;EACpB,YAAY;EACZ,yBAAyB;EACzB,YAAY;EACZ,kBAAkB;EAClB,eAAe;AACjB",sourcesContent:[".footer__button {\n  margin: 0.3rem;\n  padding: 0.5rem 1rem;\n  border: none;\n  background-color: #4caf50;\n  color: white;\n  border-radius: 5px;\n  cursor: pointer;\n}\n"],sourceRoot:""}]);const a=o},455:(e,t,n)=>{"use strict";n.d(t,{A:()=>a});var i=n(354),s=n.n(i),r=n(314),o=n.n(r)()(s());o.push([e.id,"/*!\n * Toastify js 1.12.0\n * https://github.com/apvarun/toastify-js\n * @license MIT licensed\n *\n * Copyright (C) 2018 Varun A P\n */\n\n.toastify {\n    padding: 12px 20px;\n    color: #ffffff;\n    display: inline-block;\n    box-shadow: 0 3px 6px -1px rgba(0, 0, 0, 0.12), 0 10px 36px -4px rgba(77, 96, 232, 0.3);\n    background: -webkit-linear-gradient(315deg, #73a5ff, #5477f5);\n    background: linear-gradient(135deg, #73a5ff, #5477f5);\n    position: fixed;\n    opacity: 0;\n    transition: all 0.4s cubic-bezier(0.215, 0.61, 0.355, 1);\n    border-radius: 2px;\n    cursor: pointer;\n    text-decoration: none;\n    max-width: calc(50% - 20px);\n    z-index: 2147483647;\n}\n\n.toastify.on {\n    opacity: 1;\n}\n\n.toast-close {\n    background: transparent;\n    border: 0;\n    color: white;\n    cursor: pointer;\n    font-family: inherit;\n    font-size: 1em;\n    opacity: 0.4;\n    padding: 0 5px;\n}\n\n.toastify-right {\n    right: 15px;\n}\n\n.toastify-left {\n    left: 15px;\n}\n\n.toastify-top {\n    top: -150px;\n}\n\n.toastify-bottom {\n    bottom: -150px;\n}\n\n.toastify-rounded {\n    border-radius: 25px;\n}\n\n.toastify-avatar {\n    width: 1.5em;\n    height: 1.5em;\n    margin: -7px 5px;\n    border-radius: 2px;\n}\n\n.toastify-center {\n    margin-left: auto;\n    margin-right: auto;\n    left: 0;\n    right: 0;\n    max-width: fit-content;\n    max-width: -moz-fit-content;\n}\n\n@media only screen and (max-width: 360px) {\n    .toastify-right, .toastify-left {\n        margin-left: auto;\n        margin-right: auto;\n        left: 0;\n        right: 0;\n        max-width: fit-content;\n    }\n}\n","",{version:3,sources:["webpack://./node_modules/toastify-js/src/toastify.css"],names:[],mappings:"AAAA;;;;;;EAME;;AAEF;IACI,kBAAkB;IAClB,cAAc;IACd,qBAAqB;IACrB,uFAAuF;IACvF,6DAA6D;IAC7D,qDAAqD;IACrD,eAAe;IACf,UAAU;IACV,wDAAwD;IACxD,kBAAkB;IAClB,eAAe;IACf,qBAAqB;IACrB,2BAA2B;IAC3B,mBAAmB;AACvB;;AAEA;IACI,UAAU;AACd;;AAEA;IACI,uBAAuB;IACvB,SAAS;IACT,YAAY;IACZ,eAAe;IACf,oBAAoB;IACpB,cAAc;IACd,YAAY;IACZ,cAAc;AAClB;;AAEA;IACI,WAAW;AACf;;AAEA;IACI,UAAU;AACd;;AAEA;IACI,WAAW;AACf;;AAEA;IACI,cAAc;AAClB;;AAEA;IACI,mBAAmB;AACvB;;AAEA;IACI,YAAY;IACZ,aAAa;IACb,gBAAgB;IAChB,kBAAkB;AACtB;;AAEA;IACI,iBAAiB;IACjB,kBAAkB;IAClB,OAAO;IACP,QAAQ;IACR,sBAAsB;IACtB,2BAA2B;AAC/B;;AAEA;IACI;QACI,iBAAiB;QACjB,kBAAkB;QAClB,OAAO;QACP,QAAQ;QACR,sBAAsB;IAC1B;AACJ",sourcesContent:["/*!\n * Toastify js 1.12.0\n * https://github.com/apvarun/toastify-js\n * @license MIT licensed\n *\n * Copyright (C) 2018 Varun A P\n */\n\n.toastify {\n    padding: 12px 20px;\n    color: #ffffff;\n    display: inline-block;\n    box-shadow: 0 3px 6px -1px rgba(0, 0, 0, 0.12), 0 10px 36px -4px rgba(77, 96, 232, 0.3);\n    background: -webkit-linear-gradient(315deg, #73a5ff, #5477f5);\n    background: linear-gradient(135deg, #73a5ff, #5477f5);\n    position: fixed;\n    opacity: 0;\n    transition: all 0.4s cubic-bezier(0.215, 0.61, 0.355, 1);\n    border-radius: 2px;\n    cursor: pointer;\n    text-decoration: none;\n    max-width: calc(50% - 20px);\n    z-index: 2147483647;\n}\n\n.toastify.on {\n    opacity: 1;\n}\n\n.toast-close {\n    background: transparent;\n    border: 0;\n    color: white;\n    cursor: pointer;\n    font-family: inherit;\n    font-size: 1em;\n    opacity: 0.4;\n    padding: 0 5px;\n}\n\n.toastify-right {\n    right: 15px;\n}\n\n.toastify-left {\n    left: 15px;\n}\n\n.toastify-top {\n    top: -150px;\n}\n\n.toastify-bottom {\n    bottom: -150px;\n}\n\n.toastify-rounded {\n    border-radius: 25px;\n}\n\n.toastify-avatar {\n    width: 1.5em;\n    height: 1.5em;\n    margin: -7px 5px;\n    border-radius: 2px;\n}\n\n.toastify-center {\n    margin-left: auto;\n    margin-right: auto;\n    left: 0;\n    right: 0;\n    max-width: fit-content;\n    max-width: -moz-fit-content;\n}\n\n@media only screen and (max-width: 360px) {\n    .toastify-right, .toastify-left {\n        margin-left: auto;\n        margin-right: auto;\n        left: 0;\n        right: 0;\n        max-width: fit-content;\n    }\n}\n"],sourceRoot:""}]);const a=o},459:(e,t,n)=>{"use strict";n.d(t,{A:()=>a});var i=n(354),s=n.n(i),r=n(314),o=n.n(r)()(s());o.push([e.id,".transactions__th {\n  padding: 0.75rem;\n  border-bottom: 1px solid #ddd;\n  text-align: left;\n}\n","",{version:3,sources:["webpack://./blocks/transactions/__th/transactions__th.css"],names:[],mappings:"AAAA;EACE,gBAAgB;EAChB,6BAA6B;EAC7B,gBAAgB;AAClB",sourcesContent:[".transactions__th {\n  padding: 0.75rem;\n  border-bottom: 1px solid #ddd;\n  text-align: left;\n}\n"],sourceRoot:""}]);const a=o},465:function(e){e.exports=function(){"use strict";function e(e,t,n){if("function"==typeof e?e===t:e.has(t))return arguments.length<3?t:n;throw new TypeError("Private element is not present on this object")}function t(t,n){return t.get(e(t,n))}function n(e,t,n){(function(e,t){if(t.has(e))throw new TypeError("Cannot initialize the same private elements twice on an object")})(e,t),t.set(e,n)}const i={},s=e=>new Promise((t=>{if(!e)return t();const n=window.scrollX,s=window.scrollY;i.restoreFocusTimeout=setTimeout((()=>{i.previousActiveElement instanceof HTMLElement?(i.previousActiveElement.focus(),i.previousActiveElement=null):document.body&&document.body.focus(),t()}),100),window.scrollTo(n,s)})),r="swal2-",o=["container","shown","height-auto","iosfix","popup","modal","no-backdrop","no-transition","toast","toast-shown","show","hide","close","title","html-container","actions","confirm","deny","cancel","footer","icon","icon-content","image","input","file","range","select","radio","checkbox","label","textarea","inputerror","input-label","validation-message","progress-steps","active-progress-step","progress-step","progress-step-line","loader","loading","styled","top","top-start","top-end","top-left","top-right","center","center-start","center-end","center-left","center-right","bottom","bottom-start","bottom-end","bottom-left","bottom-right","grow-row","grow-column","grow-fullscreen","rtl","timer-progress-bar","timer-progress-bar-container","scrollbar-measure","icon-success","icon-warning","icon-info","icon-question","icon-error","draggable","dragging"].reduce(((e,t)=>(e[t]=r+t,e)),{}),a=["success","warning","info","question","error"].reduce(((e,t)=>(e[t]=r+t,e)),{}),c="SweetAlert2:",l=e=>e.charAt(0).toUpperCase()+e.slice(1),u=e=>{console.warn(`${c} ${"object"==typeof e?e.join(" "):e}`)},d=e=>{console.error(`${c} ${e}`)},h=[],p=(e,t=null)=>{var n;n=`"${e}" is deprecated and will be removed in the next major release.${t?` Use "${t}" instead.`:""}`,h.includes(n)||(h.push(n),u(n))},m=e=>"function"==typeof e?e():e,f=e=>e&&"function"==typeof e.toPromise,g=e=>f(e)?e.toPromise():Promise.resolve(e),w=e=>e&&Promise.resolve(e)===e,_=()=>document.body.querySelector(`.${o.container}`),v=e=>{const t=_();return t?t.querySelector(e):null},y=e=>v(`.${e}`),b=()=>y(o.popup),C=()=>y(o.icon),A=()=>y(o.title),k=()=>y(o["html-container"]),E=()=>y(o.image),I=()=>y(o["progress-steps"]),T=()=>y(o["validation-message"]),S=()=>v(`.${o.actions} .${o.confirm}`),x=()=>v(`.${o.actions} .${o.cancel}`),P=()=>v(`.${o.actions} .${o.deny}`),R=()=>v(`.${o.loader}`),N=()=>y(o.actions),O=()=>y(o.footer),L=()=>y(o["timer-progress-bar"]),D=()=>y(o.close),M=()=>{const e=b();if(!e)return[];const t=e.querySelectorAll('[tabindex]:not([tabindex="-1"]):not([tabindex="0"])'),n=Array.from(t).sort(((e,t)=>{const n=parseInt(e.getAttribute("tabindex")||"0"),i=parseInt(t.getAttribute("tabindex")||"0");return n>i?1:n<i?-1:0})),i=e.querySelectorAll('\n  a[href],\n  area[href],\n  input:not([disabled]),\n  select:not([disabled]),\n  textarea:not([disabled]),\n  button:not([disabled]),\n  iframe,\n  object,\n  embed,\n  [tabindex="0"],\n  [contenteditable],\n  audio[controls],\n  video[controls],\n  summary\n'),s=Array.from(i).filter((e=>"-1"!==e.getAttribute("tabindex")));return[...new Set(n.concat(s))].filter((e=>ee(e)))},B=()=>j(document.body,o.shown)&&!j(document.body,o["toast-shown"])&&!j(document.body,o["no-backdrop"]),F=()=>{const e=b();return!!e&&j(e,o.toast)},U=(e,t)=>{if(e.textContent="",t){const n=(new DOMParser).parseFromString(t,"text/html"),i=n.querySelector("head");i&&Array.from(i.childNodes).forEach((t=>{e.appendChild(t)}));const s=n.querySelector("body");s&&Array.from(s.childNodes).forEach((t=>{t instanceof HTMLVideoElement||t instanceof HTMLAudioElement?e.appendChild(t.cloneNode(!0)):e.appendChild(t)}))}},j=(e,t)=>{if(!t)return!1;const n=t.split(/\s+/);for(let t=0;t<n.length;t++)if(!e.classList.contains(n[t]))return!1;return!0},q=(e,t,n)=>{if(((e,t)=>{Array.from(e.classList).forEach((n=>{Object.values(o).includes(n)||Object.values(a).includes(n)||Object.values(t.showClass||{}).includes(n)||e.classList.remove(n)}))})(e,t),!t.customClass)return;const i=t.customClass[n];i&&("string"==typeof i||i.forEach?W(e,i):u(`Invalid type of customClass.${n}! Expected string or iterable object, got "${typeof i}"`))},V=(e,t)=>{if(!t)return null;switch(t){case"select":case"textarea":case"file":return e.querySelector(`.${o.popup} > .${o[t]}`);case"checkbox":return e.querySelector(`.${o.popup} > .${o.checkbox} input`);case"radio":return e.querySelector(`.${o.popup} > .${o.radio} input:checked`)||e.querySelector(`.${o.popup} > .${o.radio} input:first-child`);case"range":return e.querySelector(`.${o.popup} > .${o.range} input`);default:return e.querySelector(`.${o.popup} > .${o.input}`)}},H=e=>{if(e.focus(),"file"!==e.type){const t=e.value;e.value="",e.value=t}},$=(e,t,n)=>{e&&t&&("string"==typeof t&&(t=t.split(/\s+/).filter(Boolean)),t.forEach((t=>{Array.isArray(e)?e.forEach((e=>{n?e.classList.add(t):e.classList.remove(t)})):n?e.classList.add(t):e.classList.remove(t)})))},W=(e,t)=>{$(e,t,!0)},z=(e,t)=>{$(e,t,!1)},Y=(e,t)=>{const n=Array.from(e.children);for(let e=0;e<n.length;e++){const i=n[e];if(i instanceof HTMLElement&&j(i,t))return i}},K=(e,t,n)=>{n===`${parseInt(n)}`&&(n=parseInt(n)),n||0===parseInt(n)?e.style.setProperty(t,"number"==typeof n?`${n}px`:n):e.style.removeProperty(t)},G=(e,t="flex")=>{e&&(e.style.display=t)},J=e=>{e&&(e.style.display="none")},Q=(e,t="block")=>{e&&new MutationObserver((()=>{X(e,e.innerHTML,t)})).observe(e,{childList:!0,subtree:!0})},Z=(e,t,n,i)=>{const s=e.querySelector(t);s&&s.style.setProperty(n,i)},X=(e,t,n="flex")=>{t?G(e,n):J(e)},ee=e=>!(!e||!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)),te=e=>!!(e.scrollHeight>e.clientHeight),ne=e=>{const t=window.getComputedStyle(e),n=parseFloat(t.getPropertyValue("animation-duration")||"0"),i=parseFloat(t.getPropertyValue("transition-duration")||"0");return n>0||i>0},ie=(e,t=!1)=>{const n=L();n&&ee(n)&&(t&&(n.style.transition="none",n.style.width="100%"),setTimeout((()=>{n.style.transition=`width ${e/1e3}s linear`,n.style.width="0%"}),10))},se=`\n <div aria-labelledby="${o.title}" aria-describedby="${o["html-container"]}" class="${o.popup}" tabindex="-1">\n   <button type="button" class="${o.close}"></button>\n   <ul class="${o["progress-steps"]}"></ul>\n   <div class="${o.icon}"></div>\n   <img class="${o.image}" />\n   <h2 class="${o.title}" id="${o.title}"></h2>\n   <div class="${o["html-container"]}" id="${o["html-container"]}"></div>\n   <input class="${o.input}" id="${o.input}" />\n   <input type="file" class="${o.file}" />\n   <div class="${o.range}">\n     <input type="range" />\n     <output></output>\n   </div>\n   <select class="${o.select}" id="${o.select}"></select>\n   <div class="${o.radio}"></div>\n   <label class="${o.checkbox}">\n     <input type="checkbox" id="${o.checkbox}" />\n     <span class="${o.label}"></span>\n   </label>\n   <textarea class="${o.textarea}" id="${o.textarea}"></textarea>\n   <div class="${o["validation-message"]}" id="${o["validation-message"]}"></div>\n   <div class="${o.actions}">\n     <div class="${o.loader}"></div>\n     <button type="button" class="${o.confirm}"></button>\n     <button type="button" class="${o.deny}"></button>\n     <button type="button" class="${o.cancel}"></button>\n   </div>\n   <div class="${o.footer}"></div>\n   <div class="${o["timer-progress-bar-container"]}">\n     <div class="${o["timer-progress-bar"]}"></div>\n   </div>\n </div>\n`.replace(/(^|\n)\s*/g,""),re=()=>{i.currentInstance.resetValidationMessage()},oe=e=>{const t=(()=>{const e=_();return!!e&&(e.remove(),z([document.documentElement,document.body],[o["no-backdrop"],o["toast-shown"],o["has-column"]]),!0)})();if("undefined"==typeof window||"undefined"==typeof document)return void d("SweetAlert2 requires document to initialize");const n=document.createElement("div");n.className=o.container,t&&W(n,o["no-transition"]),U(n,se),n.dataset.swal2Theme=e.theme;const i="string"==typeof(s=e.target)?document.querySelector(s):s;var s;i.appendChild(n),e.topLayer&&(n.setAttribute("popover",""),n.showPopover()),(e=>{const t=b();t.setAttribute("role",e.toast?"alert":"dialog"),t.setAttribute("aria-live",e.toast?"polite":"assertive"),e.toast||t.setAttribute("aria-modal","true")})(e),(e=>{"rtl"===window.getComputedStyle(e).direction&&W(_(),o.rtl)})(i),(()=>{const e=b(),t=Y(e,o.input),n=Y(e,o.file),i=e.querySelector(`.${o.range} input`),s=e.querySelector(`.${o.range} output`),r=Y(e,o.select),a=e.querySelector(`.${o.checkbox} input`),c=Y(e,o.textarea);t.oninput=re,n.onchange=re,r.onchange=re,a.onchange=re,c.oninput=re,i.oninput=()=>{re(),s.value=i.value},i.onchange=()=>{re(),s.value=i.value}})()},ae=(e,t)=>{e instanceof HTMLElement?t.appendChild(e):"object"==typeof e?ce(e,t):e&&U(t,e)},ce=(e,t)=>{e.jquery?le(t,e):U(t,e.toString())},le=(e,t)=>{if(e.textContent="",0 in t)for(let n=0;n in t;n++)e.appendChild(t[n].cloneNode(!0));else e.appendChild(t.cloneNode(!0))},ue=(e,t)=>{const n=N(),i=R();n&&i&&(t.showConfirmButton||t.showDenyButton||t.showCancelButton?G(n):J(n),q(n,t,"actions"),function(e,t,n){const i=S(),s=P(),r=x();i&&s&&r&&(he(i,"confirm",n),he(s,"deny",n),he(r,"cancel",n),function(e,t,n,i){i.buttonsStyling?(W([e,t,n],o.styled),i.confirmButtonColor&&e.style.setProperty("--swal2-confirm-button-background-color",i.confirmButtonColor),i.denyButtonColor&&t.style.setProperty("--swal2-deny-button-background-color",i.denyButtonColor),i.cancelButtonColor&&n.style.setProperty("--swal2-cancel-button-background-color",i.cancelButtonColor),de(e),de(t),de(n)):z([e,t,n],o.styled)}(i,s,r,n),n.reverseButtons&&(n.toast?(e.insertBefore(r,i),e.insertBefore(s,i)):(e.insertBefore(r,t),e.insertBefore(s,t),e.insertBefore(i,t))))}(n,i,t),U(i,t.loaderHtml||""),q(i,t,"loader"))};function de(e){const t=window.getComputedStyle(e);if(t.getPropertyValue("--swal2-action-button-focus-box-shadow"))return;const n=t.backgroundColor.replace(/rgba?\((\d+), (\d+), (\d+).*/,"rgba($1, $2, $3, 0.5)");e.style.setProperty("--swal2-action-button-focus-box-shadow",t.getPropertyValue("--swal2-outline").replace(/ rgba\(.*/,` ${n}`))}function he(e,t,n){const i=l(t);X(e,n[`show${i}Button`],"inline-block"),U(e,n[`${t}ButtonText`]||""),e.setAttribute("aria-label",n[`${t}ButtonAriaLabel`]||""),e.className=o[t],q(e,n,`${t}Button`)}const pe=(e,t)=>{const n=_();n&&(function(e,t){"string"==typeof t?e.style.background=t:t||W([document.documentElement,document.body],o["no-backdrop"])}(n,t.backdrop),function(e,t){t&&(t in o?W(e,o[t]):(u('The "position" parameter is not valid, defaulting to "center"'),W(e,o.center)))}(n,t.position),function(e,t){t&&W(e,o[`grow-${t}`])}(n,t.grow),q(n,t,"container"))};var me={innerParams:new WeakMap,domCache:new WeakMap};const fe=["input","file","range","select","radio","checkbox","textarea"],ge=e=>{if(!e.input)return;if(!Ae[e.input])return void d(`Unexpected type of input! Expected ${Object.keys(Ae).join(" | ")}, got "${e.input}"`);const t=be(e.input);if(!t)return;const n=Ae[e.input](t,e);G(t),e.inputAutoFocus&&setTimeout((()=>{H(n)}))},we=(e,t)=>{const n=b();if(!n)return;const i=V(n,e);if(i){(e=>{for(let t=0;t<e.attributes.length;t++){const n=e.attributes[t].name;["id","type","value","style"].includes(n)||e.removeAttribute(n)}})(i);for(const e in t)i.setAttribute(e,t[e])}},_e=e=>{if(!e.input)return;const t=be(e.input);t&&q(t,e,"input")},ve=(e,t)=>{!e.placeholder&&t.inputPlaceholder&&(e.placeholder=t.inputPlaceholder)},ye=(e,t,n)=>{if(n.inputLabel){const i=document.createElement("label"),s=o["input-label"];i.setAttribute("for",e.id),i.className=s,"object"==typeof n.customClass&&W(i,n.customClass.inputLabel),i.innerText=n.inputLabel,t.insertAdjacentElement("beforebegin",i)}},be=e=>{const t=b();if(t)return Y(t,o[e]||o.input)},Ce=(e,t)=>{["string","number"].includes(typeof t)?e.value=`${t}`:w(t)||u(`Unexpected type of inputValue! Expected "string", "number" or "Promise", got "${typeof t}"`)},Ae={};Ae.text=Ae.email=Ae.password=Ae.number=Ae.tel=Ae.url=Ae.search=Ae.date=Ae["datetime-local"]=Ae.time=Ae.week=Ae.month=(e,t)=>(Ce(e,t.inputValue),ye(e,e,t),ve(e,t),e.type=t.input,e),Ae.file=(e,t)=>(ye(e,e,t),ve(e,t),e),Ae.range=(e,t)=>{const n=e.querySelector("input"),i=e.querySelector("output");return Ce(n,t.inputValue),n.type=t.input,Ce(i,t.inputValue),ye(n,e,t),e},Ae.select=(e,t)=>{if(e.textContent="",t.inputPlaceholder){const n=document.createElement("option");U(n,t.inputPlaceholder),n.value="",n.disabled=!0,n.selected=!0,e.appendChild(n)}return ye(e,e,t),e},Ae.radio=e=>(e.textContent="",e),Ae.checkbox=(e,t)=>{const n=V(b(),"checkbox");n.value="1",n.checked=Boolean(t.inputValue);const i=e.querySelector("span");return U(i,t.inputPlaceholder||t.inputLabel),n},Ae.textarea=(e,t)=>{Ce(e,t.inputValue),ve(e,t),ye(e,e,t);return setTimeout((()=>{if("MutationObserver"in window){const n=parseInt(window.getComputedStyle(b()).width);new MutationObserver((()=>{if(!document.body.contains(e))return;const i=e.offsetWidth+(s=e,parseInt(window.getComputedStyle(s).marginLeft)+parseInt(window.getComputedStyle(s).marginRight));var s;i>n?b().style.width=`${i}px`:K(b(),"width",t.width)})).observe(e,{attributes:!0,attributeFilter:["style"]})}})),e};const ke=(e,t)=>{const n=k();n&&(Q(n),q(n,t,"htmlContainer"),t.html?(ae(t.html,n),G(n,"block")):t.text?(n.textContent=t.text,G(n,"block")):J(n),((e,t)=>{const n=b();if(!n)return;const i=me.innerParams.get(e),s=!i||t.input!==i.input;fe.forEach((e=>{const i=Y(n,o[e]);i&&(we(e,t.inputAttributes),i.className=o[e],s&&J(i))})),t.input&&(s&&ge(t),_e(t))})(e,t))},Ee=(e,t)=>{for(const[n,i]of Object.entries(a))t.icon!==n&&z(e,i);W(e,t.icon&&a[t.icon]),Se(e,t),Ie(),q(e,t,"icon")},Ie=()=>{const e=b();if(!e)return;const t=window.getComputedStyle(e).getPropertyValue("background-color"),n=e.querySelectorAll("[class^=swal2-success-circular-line], .swal2-success-fix");for(let e=0;e<n.length;e++)n[e].style.backgroundColor=t},Te=(e,t)=>{if(!t.icon&&!t.iconHtml)return;let n=e.innerHTML,i="";t.iconHtml?i=xe(t.iconHtml):"success"===t.icon?(i='\n  <div class="swal2-success-circular-line-left"></div>\n  <span class="swal2-success-line-tip"></span> <span class="swal2-success-line-long"></span>\n  <div class="swal2-success-ring"></div> <div class="swal2-success-fix"></div>\n  <div class="swal2-success-circular-line-right"></div>\n',n=n.replace(/ style=".*?"/g,"")):"error"===t.icon?i='\n  <span class="swal2-x-mark">\n    <span class="swal2-x-mark-line-left"></span>\n    <span class="swal2-x-mark-line-right"></span>\n  </span>\n':t.icon&&(i=xe({question:"?",warning:"!",info:"i"}[t.icon])),n.trim()!==i.trim()&&U(e,i)},Se=(e,t)=>{if(t.iconColor){e.style.color=t.iconColor,e.style.borderColor=t.iconColor;for(const n of[".swal2-success-line-tip",".swal2-success-line-long",".swal2-x-mark-line-left",".swal2-x-mark-line-right"])Z(e,n,"background-color",t.iconColor);Z(e,".swal2-success-ring","border-color",t.iconColor)}},xe=e=>`<div class="${o["icon-content"]}">${e}</div>`;let Pe=!1,Re=0,Ne=0,Oe=0,Le=0;const De=e=>{const t=b();if(e.target===t||C().contains(e.target)){Pe=!0;const n=Fe(e);Re=n.clientX,Ne=n.clientY,Oe=parseInt(t.style.insetInlineStart)||0,Le=parseInt(t.style.insetBlockStart)||0,W(t,"swal2-dragging")}},Me=e=>{const t=b();if(Pe){let{clientX:n,clientY:i}=Fe(e);t.style.insetInlineStart=`${Oe+(n-Re)}px`,t.style.insetBlockStart=`${Le+(i-Ne)}px`}},Be=()=>{const e=b();Pe=!1,z(e,"swal2-dragging")},Fe=e=>{let t=0,n=0;return e.type.startsWith("mouse")?(t=e.clientX,n=e.clientY):e.type.startsWith("touch")&&(t=e.touches[0].clientX,n=e.touches[0].clientY),{clientX:t,clientY:n}},Ue=(e,t)=>{const n=_(),i=b();if(n&&i){if(t.toast){K(n,"width",t.width),i.style.width="100%";const e=R();e&&i.insertBefore(e,C())}else K(i,"width",t.width);K(i,"padding",t.padding),t.color&&(i.style.color=t.color),t.background&&(i.style.background=t.background),J(T()),je(i,t),t.draggable&&!t.toast?(W(i,o.draggable),(e=>{e.addEventListener("mousedown",De),document.body.addEventListener("mousemove",Me),e.addEventListener("mouseup",Be),e.addEventListener("touchstart",De),document.body.addEventListener("touchmove",Me),e.addEventListener("touchend",Be)})(i)):(z(i,o.draggable),(e=>{e.removeEventListener("mousedown",De),document.body.removeEventListener("mousemove",Me),e.removeEventListener("mouseup",Be),e.removeEventListener("touchstart",De),document.body.removeEventListener("touchmove",Me),e.removeEventListener("touchend",Be)})(i))}},je=(e,t)=>{const n=t.showClass||{};e.className=`${o.popup} ${ee(e)?n.popup:""}`,t.toast?(W([document.documentElement,document.body],o["toast-shown"]),W(e,o.toast)):W(e,o.modal),q(e,t,"popup"),"string"==typeof t.customClass&&W(e,t.customClass),t.icon&&W(e,o[`icon-${t.icon}`])},qe=e=>{const t=document.createElement("li");return W(t,o["progress-step"]),U(t,e),t},Ve=e=>{const t=document.createElement("li");return W(t,o["progress-step-line"]),e.progressStepsDistance&&K(t,"width",e.progressStepsDistance),t},He=(e,t)=>{Ue(0,t),pe(0,t),((e,t)=>{const n=I();if(!n)return;const{progressSteps:i,currentProgressStep:s}=t;i&&0!==i.length&&void 0!==s?(G(n),n.textContent="",s>=i.length&&u("Invalid currentProgressStep parameter, it should be less than progressSteps.length (currentProgressStep like JS arrays starts from 0)"),i.forEach(((e,r)=>{const a=qe(e);if(n.appendChild(a),r===s&&W(a,o["active-progress-step"]),r!==i.length-1){const e=Ve(t);n.appendChild(e)}}))):J(n)})(0,t),((e,t)=>{const n=me.innerParams.get(e),i=C();if(i){if(n&&t.icon===n.icon)return Te(i,t),void Ee(i,t);if(t.icon||t.iconHtml){if(t.icon&&-1===Object.keys(a).indexOf(t.icon))return d(`Unknown icon! Expected "success", "error", "warning", "info" or "question", got "${t.icon}"`),void J(i);G(i),Te(i,t),Ee(i,t),W(i,t.showClass&&t.showClass.icon),window.matchMedia("(prefers-color-scheme: dark)").addEventListener("change",Ie)}else J(i)}})(e,t),((e,t)=>{const n=E();n&&(t.imageUrl?(G(n,""),n.setAttribute("src",t.imageUrl),n.setAttribute("alt",t.imageAlt||""),K(n,"width",t.imageWidth),K(n,"height",t.imageHeight),n.className=o.image,q(n,t,"image")):J(n))})(0,t),((e,t)=>{const n=A();n&&(Q(n),X(n,t.title||t.titleText,"block"),t.title&&ae(t.title,n),t.titleText&&(n.innerText=t.titleText),q(n,t,"title"))})(0,t),((e,t)=>{const n=D();n&&(U(n,t.closeButtonHtml||""),q(n,t,"closeButton"),X(n,t.showCloseButton),n.setAttribute("aria-label",t.closeButtonAriaLabel||""))})(0,t),ke(e,t),ue(0,t),((e,t)=>{const n=O();n&&(Q(n),X(n,t.footer,"block"),t.footer&&ae(t.footer,n),q(n,t,"footer"))})(0,t);const n=b();"function"==typeof t.didRender&&n&&t.didRender(n),i.eventEmitter.emit("didRender",n)},$e=()=>{var e;return null===(e=S())||void 0===e?void 0:e.click()},We=Object.freeze({cancel:"cancel",backdrop:"backdrop",close:"close",esc:"esc",timer:"timer"}),ze=e=>{e.keydownTarget&&e.keydownHandlerAdded&&(e.keydownTarget.removeEventListener("keydown",e.keydownHandler,{capture:e.keydownListenerCapture}),e.keydownHandlerAdded=!1)},Ye=(e,t)=>{var n;const i=M();if(i.length)return-2===(e+=t)&&(e=i.length-1),e===i.length?e=0:-1===e&&(e=i.length-1),void i[e].focus();null===(n=b())||void 0===n||n.focus()},Ke=["ArrowRight","ArrowDown"],Ge=["ArrowLeft","ArrowUp"],Je=(e,t,n)=>{e&&(t.isComposing||229===t.keyCode||(e.stopKeydownPropagation&&t.stopPropagation(),"Enter"===t.key?Qe(t,e):"Tab"===t.key?Ze(t):[...Ke,...Ge].includes(t.key)?Xe(t.key):"Escape"===t.key&&et(t,e,n)))},Qe=(e,t)=>{if(!m(t.allowEnterKey))return;const n=V(b(),t.input);if(e.target&&n&&e.target instanceof HTMLElement&&e.target.outerHTML===n.outerHTML){if(["textarea","file"].includes(t.input))return;$e(),e.preventDefault()}},Ze=e=>{const t=e.target,n=M();let i=-1;for(let e=0;e<n.length;e++)if(t===n[e]){i=e;break}e.shiftKey?Ye(i,-1):Ye(i,1),e.stopPropagation(),e.preventDefault()},Xe=e=>{const t=N(),n=S(),i=P(),s=x();if(!(t&&n&&i&&s))return;const r=[n,i,s];if(document.activeElement instanceof HTMLElement&&!r.includes(document.activeElement))return;const o=Ke.includes(e)?"nextElementSibling":"previousElementSibling";let a=document.activeElement;if(a){for(let e=0;e<t.children.length;e++){if(a=a[o],!a)return;if(a instanceof HTMLButtonElement&&ee(a))break}a instanceof HTMLButtonElement&&a.focus()}},et=(e,t,n)=>{m(t.allowEscapeKey)&&(e.preventDefault(),n(We.esc))};var tt={swalPromiseResolve:new WeakMap,swalPromiseReject:new WeakMap};const nt=()=>{Array.from(document.body.children).forEach((e=>{e.hasAttribute("data-previous-aria-hidden")?(e.setAttribute("aria-hidden",e.getAttribute("data-previous-aria-hidden")||""),e.removeAttribute("data-previous-aria-hidden")):e.removeAttribute("aria-hidden")}))},it="undefined"!=typeof window&&!!window.GestureEvent,st=()=>{const e=_();if(!e)return;let t;e.ontouchstart=e=>{t=rt(e)},e.ontouchmove=e=>{t&&(e.preventDefault(),e.stopPropagation())}},rt=e=>{const t=e.target,n=_(),i=k();return!(!n||!i||ot(e)||at(e)||t!==n&&(te(n)||!(t instanceof HTMLElement)||((e,t)=>{let n=e;for(;n&&n!==t;){if(te(n))return!0;n=n.parentElement}return!1})(t,i)||"INPUT"===t.tagName||"TEXTAREA"===t.tagName||te(i)&&i.contains(t)))},ot=e=>e.touches&&e.touches.length&&"stylus"===e.touches[0].touchType,at=e=>e.touches&&e.touches.length>1;let ct=null;const lt=e=>{null===ct&&(document.body.scrollHeight>window.innerHeight||"scroll"===e)&&(ct=parseInt(window.getComputedStyle(document.body).getPropertyValue("padding-right")),document.body.style.paddingRight=`${ct+(()=>{const e=document.createElement("div");e.className=o["scrollbar-measure"],document.body.appendChild(e);const t=e.getBoundingClientRect().width-e.clientWidth;return document.body.removeChild(e),t})()}px`)};function ut(e,t,n,r){F()?_t(e,r):(s(n).then((()=>_t(e,r))),ze(i)),it?(t.setAttribute("style","display:none !important"),t.removeAttribute("class"),t.innerHTML=""):t.remove(),B()&&(null!==ct&&(document.body.style.paddingRight=`${ct}px`,ct=null),(()=>{if(j(document.body,o.iosfix)){const e=parseInt(document.body.style.top,10);z(document.body,o.iosfix),document.body.style.top="",document.body.scrollTop=-1*e}})(),nt()),z([document.documentElement,document.body],[o.shown,o["height-auto"],o["no-backdrop"],o["toast-shown"]])}function dt(e){e=ft(e);const t=tt.swalPromiseResolve.get(this),n=ht(this);this.isAwaitingPromise?e.isDismissed||(mt(this),t(e)):n&&t(e)}const ht=e=>{const t=b();if(!t)return!1;const n=me.innerParams.get(e);if(!n||j(t,n.hideClass.popup))return!1;z(t,n.showClass.popup),W(t,n.hideClass.popup);const i=_();return z(i,n.showClass.backdrop),W(i,n.hideClass.backdrop),gt(e,t,n),!0};function pt(e){const t=tt.swalPromiseReject.get(this);mt(this),t&&t(e)}const mt=e=>{e.isAwaitingPromise&&(delete e.isAwaitingPromise,me.innerParams.get(e)||e._destroy())},ft=e=>void 0===e?{isConfirmed:!1,isDenied:!1,isDismissed:!0}:Object.assign({isConfirmed:!1,isDenied:!1,isDismissed:!1},e),gt=(e,t,n)=>{var s;const r=_(),o=ne(t);"function"==typeof n.willClose&&n.willClose(t),null===(s=i.eventEmitter)||void 0===s||s.emit("willClose",t),o?wt(e,t,r,n.returnFocus,n.didClose):ut(e,r,n.returnFocus,n.didClose)},wt=(e,t,n,s,r)=>{i.swalCloseEventFinishedCallback=ut.bind(null,e,n,s,r);const o=function(e){var n;e.target===t&&(null===(n=i.swalCloseEventFinishedCallback)||void 0===n||n.call(i),delete i.swalCloseEventFinishedCallback,t.removeEventListener("animationend",o),t.removeEventListener("transitionend",o))};t.addEventListener("animationend",o),t.addEventListener("transitionend",o)},_t=(e,t)=>{setTimeout((()=>{var n;"function"==typeof t&&t.bind(e.params)(),null===(n=i.eventEmitter)||void 0===n||n.emit("didClose"),e._destroy&&e._destroy()}))},vt=e=>{let t=b();if(t||new Xn,t=b(),!t)return;const n=R();F()?J(C()):yt(t,e),G(n),t.setAttribute("data-loading","true"),t.setAttribute("aria-busy","true"),t.focus()},yt=(e,t)=>{const n=N(),i=R();n&&i&&(!t&&ee(S())&&(t=S()),G(n),t&&(J(t),i.setAttribute("data-button-to-replace",t.className),n.insertBefore(i,t)),W([e,n],o.loading))},bt=e=>e.checked?1:0,Ct=e=>e.checked?e.value:null,At=e=>e.files&&e.files.length?null!==e.getAttribute("multiple")?e.files:e.files[0]:null,kt=(e,t)=>{const n=b();if(!n)return;const i=e=>{"select"===t.input?function(e,t,n){const i=Y(e,o.select);if(!i)return;const s=(e,t,i)=>{const s=document.createElement("option");s.value=i,U(s,t),s.selected=Tt(i,n.inputValue),e.appendChild(s)};t.forEach((e=>{const t=e[0],n=e[1];if(Array.isArray(n)){const e=document.createElement("optgroup");e.label=t,e.disabled=!1,i.appendChild(e),n.forEach((t=>s(e,t[1],t[0])))}else s(i,n,t)})),i.focus()}(n,It(e),t):"radio"===t.input&&function(e,t,n){const i=Y(e,o.radio);if(!i)return;t.forEach((e=>{const t=e[0],s=e[1],r=document.createElement("input"),a=document.createElement("label");r.type="radio",r.name=o.radio,r.value=t,Tt(t,n.inputValue)&&(r.checked=!0);const c=document.createElement("span");U(c,s),c.className=o.label,a.appendChild(r),a.appendChild(c),i.appendChild(a)}));const s=i.querySelectorAll("input");s.length&&s[0].focus()}(n,It(e),t)};f(t.inputOptions)||w(t.inputOptions)?(vt(S()),g(t.inputOptions).then((t=>{e.hideLoading(),i(t)}))):"object"==typeof t.inputOptions?i(t.inputOptions):d("Unexpected type of inputOptions! Expected object, Map or Promise, got "+typeof t.inputOptions)},Et=(e,t)=>{const n=e.getInput();n&&(J(n),g(t.inputValue).then((i=>{n.value="number"===t.input?`${parseFloat(i)||0}`:`${i}`,G(n),n.focus(),e.hideLoading()})).catch((t=>{d(`Error in inputValue promise: ${t}`),n.value="",G(n),n.focus(),e.hideLoading()})))};const It=e=>{const t=[];return e instanceof Map?e.forEach(((e,n)=>{let i=e;"object"==typeof i&&(i=It(i)),t.push([n,i])})):Object.keys(e).forEach((n=>{let i=e[n];"object"==typeof i&&(i=It(i)),t.push([n,i])})),t},Tt=(e,t)=>!!t&&t.toString()===e.toString(),St=(e,t)=>{const n=me.innerParams.get(e);if(!n.input)return void d(`The "input" parameter is needed to be set when using returnInputValueOn${l(t)}`);const i=e.getInput(),s=((e,t)=>{const n=e.getInput();if(!n)return null;switch(t.input){case"checkbox":return bt(n);case"radio":return Ct(n);case"file":return At(n);default:return t.inputAutoTrim?n.value.trim():n.value}})(e,n);n.inputValidator?xt(e,s,t):i&&!i.checkValidity()?(e.enableButtons(),e.showValidationMessage(n.validationMessage||i.validationMessage)):"deny"===t?Pt(e,s):Ot(e,s)},xt=(e,t,n)=>{const i=me.innerParams.get(e);e.disableInput(),Promise.resolve().then((()=>g(i.inputValidator(t,i.validationMessage)))).then((i=>{e.enableButtons(),e.enableInput(),i?e.showValidationMessage(i):"deny"===n?Pt(e,t):Ot(e,t)}))},Pt=(e,t)=>{const n=me.innerParams.get(e||void 0);n.showLoaderOnDeny&&vt(P()),n.preDeny?(e.isAwaitingPromise=!0,Promise.resolve().then((()=>g(n.preDeny(t,n.validationMessage)))).then((n=>{!1===n?(e.hideLoading(),mt(e)):e.close({isDenied:!0,value:void 0===n?t:n})})).catch((t=>Nt(e||void 0,t)))):e.close({isDenied:!0,value:t})},Rt=(e,t)=>{e.close({isConfirmed:!0,value:t})},Nt=(e,t)=>{e.rejectPromise(t)},Ot=(e,t)=>{const n=me.innerParams.get(e||void 0);n.showLoaderOnConfirm&&vt(),n.preConfirm?(e.resetValidationMessage(),e.isAwaitingPromise=!0,Promise.resolve().then((()=>g(n.preConfirm(t,n.validationMessage)))).then((n=>{ee(T())||!1===n?(e.hideLoading(),mt(e)):Rt(e,void 0===n?t:n)})).catch((t=>Nt(e||void 0,t)))):Rt(e,t)};function Lt(){const e=me.innerParams.get(this);if(!e)return;const t=me.domCache.get(this);J(t.loader),F()?e.icon&&G(C()):Dt(t),z([t.popup,t.actions],o.loading),t.popup.removeAttribute("aria-busy"),t.popup.removeAttribute("data-loading"),t.confirmButton.disabled=!1,t.denyButton.disabled=!1,t.cancelButton.disabled=!1}const Dt=e=>{const t=e.popup.getElementsByClassName(e.loader.getAttribute("data-button-to-replace"));t.length?G(t[0],"inline-block"):!ee(S())&&!ee(P())&&!ee(x())&&J(e.actions)};function Mt(){const e=me.innerParams.get(this),t=me.domCache.get(this);return t?V(t.popup,e.input):null}function Bt(e,t,n){const i=me.domCache.get(e);t.forEach((e=>{i[e].disabled=n}))}function Ft(e,t){const n=b();if(n&&e)if("radio"===e.type){const e=n.querySelectorAll(`[name="${o.radio}"]`);for(let n=0;n<e.length;n++)e[n].disabled=t}else e.disabled=t}function Ut(){Bt(this,["confirmButton","denyButton","cancelButton"],!1)}function jt(){Bt(this,["confirmButton","denyButton","cancelButton"],!0)}function qt(){Ft(this.getInput(),!1)}function Vt(){Ft(this.getInput(),!0)}function Ht(e){const t=me.domCache.get(this),n=me.innerParams.get(this);U(t.validationMessage,e),t.validationMessage.className=o["validation-message"],n.customClass&&n.customClass.validationMessage&&W(t.validationMessage,n.customClass.validationMessage),G(t.validationMessage);const i=this.getInput();i&&(i.setAttribute("aria-invalid","true"),i.setAttribute("aria-describedby",o["validation-message"]),H(i),W(i,o.inputerror))}function $t(){const e=me.domCache.get(this);e.validationMessage&&J(e.validationMessage);const t=this.getInput();t&&(t.removeAttribute("aria-invalid"),t.removeAttribute("aria-describedby"),z(t,o.inputerror))}const Wt={title:"",titleText:"",text:"",html:"",footer:"",icon:void 0,iconColor:void 0,iconHtml:void 0,template:void 0,toast:!1,draggable:!1,animation:!0,theme:"light",showClass:{popup:"swal2-show",backdrop:"swal2-backdrop-show",icon:"swal2-icon-show"},hideClass:{popup:"swal2-hide",backdrop:"swal2-backdrop-hide",icon:"swal2-icon-hide"},customClass:{},target:"body",color:void 0,backdrop:!0,heightAuto:!0,allowOutsideClick:!0,allowEscapeKey:!0,allowEnterKey:!0,stopKeydownPropagation:!0,keydownListenerCapture:!1,showConfirmButton:!0,showDenyButton:!1,showCancelButton:!1,preConfirm:void 0,preDeny:void 0,confirmButtonText:"OK",confirmButtonAriaLabel:"",confirmButtonColor:void 0,denyButtonText:"No",denyButtonAriaLabel:"",denyButtonColor:void 0,cancelButtonText:"Cancel",cancelButtonAriaLabel:"",cancelButtonColor:void 0,buttonsStyling:!0,reverseButtons:!1,focusConfirm:!0,focusDeny:!1,focusCancel:!1,returnFocus:!0,showCloseButton:!1,closeButtonHtml:"&times;",closeButtonAriaLabel:"Close this dialog",loaderHtml:"",showLoaderOnConfirm:!1,showLoaderOnDeny:!1,imageUrl:void 0,imageWidth:void 0,imageHeight:void 0,imageAlt:"",timer:void 0,timerProgressBar:!1,width:void 0,padding:void 0,background:void 0,input:void 0,inputPlaceholder:"",inputLabel:"",inputValue:"",inputOptions:{},inputAutoFocus:!0,inputAutoTrim:!0,inputAttributes:{},inputValidator:void 0,returnInputValueOnDeny:!1,validationMessage:void 0,grow:!1,position:"center",progressSteps:[],currentProgressStep:void 0,progressStepsDistance:void 0,willOpen:void 0,didOpen:void 0,didRender:void 0,willClose:void 0,didClose:void 0,didDestroy:void 0,scrollbarPadding:!0,topLayer:!1},zt=["allowEscapeKey","allowOutsideClick","background","buttonsStyling","cancelButtonAriaLabel","cancelButtonColor","cancelButtonText","closeButtonAriaLabel","closeButtonHtml","color","confirmButtonAriaLabel","confirmButtonColor","confirmButtonText","currentProgressStep","customClass","denyButtonAriaLabel","denyButtonColor","denyButtonText","didClose","didDestroy","draggable","footer","hideClass","html","icon","iconColor","iconHtml","imageAlt","imageHeight","imageUrl","imageWidth","preConfirm","preDeny","progressSteps","returnFocus","reverseButtons","showCancelButton","showCloseButton","showConfirmButton","showDenyButton","text","title","titleText","theme","willClose"],Yt={allowEnterKey:void 0},Kt=["allowOutsideClick","allowEnterKey","backdrop","draggable","focusConfirm","focusDeny","focusCancel","returnFocus","heightAuto","keydownListenerCapture"],Gt=e=>Object.prototype.hasOwnProperty.call(Wt,e),Jt=e=>-1!==zt.indexOf(e),Qt=e=>Yt[e],Zt=e=>{Gt(e)||u(`Unknown parameter "${e}"`)},Xt=e=>{Kt.includes(e)&&u(`The parameter "${e}" is incompatible with toasts`)},en=e=>{const t=Qt(e);t&&p(e,t)},tn=e=>{!1===e.backdrop&&e.allowOutsideClick&&u('"allowOutsideClick" parameter requires `backdrop` parameter to be set to `true`'),e.theme&&!["light","dark","auto","minimal","borderless","embed-iframe","bulma","bulma-light","bulma-dark"].includes(e.theme)&&u(`Invalid theme "${e.theme}"`);for(const t in e)Zt(t),e.toast&&Xt(t),en(t)};function nn(e){const t=_(),n=b(),i=me.innerParams.get(this);if(!n||j(n,i.hideClass.popup))return void u("You're trying to update the closed or closing popup, that won't work. Use the update() method in preConfirm parameter or show a new popup.");const s=sn(e),r=Object.assign({},i,s);tn(r),t.dataset.swal2Theme=r.theme,He(this,r),me.innerParams.set(this,r),Object.defineProperties(this,{params:{value:Object.assign({},this.params,e),writable:!1,enumerable:!0}})}const sn=e=>{const t={};return Object.keys(e).forEach((n=>{Jt(n)?t[n]=e[n]:u(`Invalid parameter to update: ${n}`)})),t};function rn(){const e=me.domCache.get(this),t=me.innerParams.get(this);t?(e.popup&&i.swalCloseEventFinishedCallback&&(i.swalCloseEventFinishedCallback(),delete i.swalCloseEventFinishedCallback),"function"==typeof t.didDestroy&&t.didDestroy(),i.eventEmitter.emit("didDestroy"),on(this)):an(this)}const on=e=>{an(e),delete e.params,delete i.keydownHandler,delete i.keydownTarget,delete i.currentInstance},an=e=>{e.isAwaitingPromise?(cn(me,e),e.isAwaitingPromise=!0):(cn(tt,e),cn(me,e),delete e.isAwaitingPromise,delete e.disableButtons,delete e.enableButtons,delete e.getInput,delete e.disableInput,delete e.enableInput,delete e.hideLoading,delete e.disableLoading,delete e.showValidationMessage,delete e.resetValidationMessage,delete e.close,delete e.closePopup,delete e.closeModal,delete e.closeToast,delete e.rejectPromise,delete e.update,delete e._destroy)},cn=(e,t)=>{for(const n in e)e[n].delete(t)};var ln=Object.freeze({__proto__:null,_destroy:rn,close:dt,closeModal:dt,closePopup:dt,closeToast:dt,disableButtons:jt,disableInput:Vt,disableLoading:Lt,enableButtons:Ut,enableInput:qt,getInput:Mt,handleAwaitingPromise:mt,hideLoading:Lt,rejectPromise:pt,resetValidationMessage:$t,showValidationMessage:Ht,update:nn});const un=(e,t,n)=>{t.popup.onclick=()=>{e&&(dn(e)||e.timer||e.input)||n(We.close)}},dn=e=>!!(e.showConfirmButton||e.showDenyButton||e.showCancelButton||e.showCloseButton);let hn=!1;const pn=e=>{e.popup.onmousedown=()=>{e.container.onmouseup=function(t){e.container.onmouseup=()=>{},t.target===e.container&&(hn=!0)}}},mn=e=>{e.container.onmousedown=t=>{t.target===e.container&&t.preventDefault(),e.popup.onmouseup=function(t){e.popup.onmouseup=()=>{},(t.target===e.popup||t.target instanceof HTMLElement&&e.popup.contains(t.target))&&(hn=!0)}}},fn=(e,t,n)=>{t.container.onclick=i=>{hn?hn=!1:i.target===t.container&&m(e.allowOutsideClick)&&n(We.backdrop)}},gn=e=>e instanceof Element||(e=>"object"==typeof e&&e.jquery)(e);const wn=()=>{if(i.timeout)return(()=>{const e=L();if(!e)return;const t=parseInt(window.getComputedStyle(e).width);e.style.removeProperty("transition"),e.style.width="100%";const n=t/parseInt(window.getComputedStyle(e).width)*100;e.style.width=`${n}%`})(),i.timeout.stop()},_n=()=>{if(i.timeout){const e=i.timeout.start();return ie(e),e}};let vn=!1;const yn={};const bn=e=>{for(let t=e.target;t&&t!==document;t=t.parentNode)for(const e in yn){const n=t.getAttribute(e);if(n)return void yn[e].fire({template:n})}};i.eventEmitter=new class{constructor(){this.events={}}_getHandlersByEventName(e){return void 0===this.events[e]&&(this.events[e]=[]),this.events[e]}on(e,t){const n=this._getHandlersByEventName(e);n.includes(t)||n.push(t)}once(e,t){const n=(...i)=>{this.removeListener(e,n),t.apply(this,i)};this.on(e,n)}emit(e,...t){this._getHandlersByEventName(e).forEach((e=>{try{e.apply(this,t)}catch(e){console.error(e)}}))}removeListener(e,t){const n=this._getHandlersByEventName(e),i=n.indexOf(t);i>-1&&n.splice(i,1)}removeAllListeners(e){void 0!==this.events[e]&&(this.events[e].length=0)}reset(){this.events={}}};var Cn=Object.freeze({__proto__:null,argsToParams:e=>{const t={};return"object"!=typeof e[0]||gn(e[0])?["title","html","icon"].forEach(((n,i)=>{const s=e[i];"string"==typeof s||gn(s)?t[n]=s:void 0!==s&&d(`Unexpected type of ${n}! Expected "string" or "Element", got ${typeof s}`)})):Object.assign(t,e[0]),t},bindClickHandler:function(e="data-swal-template"){yn[e]=this,vn||(document.body.addEventListener("click",bn),vn=!0)},clickCancel:()=>{var e;return null===(e=x())||void 0===e?void 0:e.click()},clickConfirm:$e,clickDeny:()=>{var e;return null===(e=P())||void 0===e?void 0:e.click()},enableLoading:vt,fire:function(...e){return new this(...e)},getActions:N,getCancelButton:x,getCloseButton:D,getConfirmButton:S,getContainer:_,getDenyButton:P,getFocusableElements:M,getFooter:O,getHtmlContainer:k,getIcon:C,getIconContent:()=>y(o["icon-content"]),getImage:E,getInputLabel:()=>y(o["input-label"]),getLoader:R,getPopup:b,getProgressSteps:I,getTimerLeft:()=>i.timeout&&i.timeout.getTimerLeft(),getTimerProgressBar:L,getTitle:A,getValidationMessage:T,increaseTimer:e=>{if(i.timeout){const t=i.timeout.increase(e);return ie(t,!0),t}},isDeprecatedParameter:Qt,isLoading:()=>{const e=b();return!!e&&e.hasAttribute("data-loading")},isTimerRunning:()=>!(!i.timeout||!i.timeout.isRunning()),isUpdatableParameter:Jt,isValidParameter:Gt,isVisible:()=>ee(b()),mixin:function(e){return class extends(this){_main(t,n){return super._main(t,Object.assign({},e,n))}}},off:(e,t)=>{e?t?i.eventEmitter.removeListener(e,t):i.eventEmitter.removeAllListeners(e):i.eventEmitter.reset()},on:(e,t)=>{i.eventEmitter.on(e,t)},once:(e,t)=>{i.eventEmitter.once(e,t)},resumeTimer:_n,showLoading:vt,stopTimer:wn,toggleTimer:()=>{const e=i.timeout;return e&&(e.running?wn():_n())}});class An{constructor(e,t){this.callback=e,this.remaining=t,this.running=!1,this.start()}start(){return this.running||(this.running=!0,this.started=new Date,this.id=setTimeout(this.callback,this.remaining)),this.remaining}stop(){return this.started&&this.running&&(this.running=!1,clearTimeout(this.id),this.remaining-=(new Date).getTime()-this.started.getTime()),this.remaining}increase(e){const t=this.running;return t&&this.stop(),this.remaining+=e,t&&this.start(),this.remaining}getTimerLeft(){return this.running&&(this.stop(),this.start()),this.remaining}isRunning(){return this.running}}const kn=["swal-title","swal-html","swal-footer"],En=e=>{const t={};return Array.from(e.querySelectorAll("swal-param")).forEach((e=>{On(e,["name","value"]);const n=e.getAttribute("name"),i=e.getAttribute("value");n&&i&&(t[n]="boolean"==typeof Wt[n]?"false"!==i:"object"==typeof Wt[n]?JSON.parse(i):i)})),t},In=e=>{const t={};return Array.from(e.querySelectorAll("swal-function-param")).forEach((e=>{const n=e.getAttribute("name"),i=e.getAttribute("value");n&&i&&(t[n]=new Function(`return ${i}`)())})),t},Tn=e=>{const t={};return Array.from(e.querySelectorAll("swal-button")).forEach((e=>{On(e,["type","color","aria-label"]);const n=e.getAttribute("type");n&&["confirm","cancel","deny"].includes(n)&&(t[`${n}ButtonText`]=e.innerHTML,t[`show${l(n)}Button`]=!0,e.hasAttribute("color")&&(t[`${n}ButtonColor`]=e.getAttribute("color")),e.hasAttribute("aria-label")&&(t[`${n}ButtonAriaLabel`]=e.getAttribute("aria-label")))})),t},Sn=e=>{const t={},n=e.querySelector("swal-image");return n&&(On(n,["src","width","height","alt"]),n.hasAttribute("src")&&(t.imageUrl=n.getAttribute("src")||void 0),n.hasAttribute("width")&&(t.imageWidth=n.getAttribute("width")||void 0),n.hasAttribute("height")&&(t.imageHeight=n.getAttribute("height")||void 0),n.hasAttribute("alt")&&(t.imageAlt=n.getAttribute("alt")||void 0)),t},xn=e=>{const t={},n=e.querySelector("swal-icon");return n&&(On(n,["type","color"]),n.hasAttribute("type")&&(t.icon=n.getAttribute("type")),n.hasAttribute("color")&&(t.iconColor=n.getAttribute("color")),t.iconHtml=n.innerHTML),t},Pn=e=>{const t={},n=e.querySelector("swal-input");n&&(On(n,["type","label","placeholder","value"]),t.input=n.getAttribute("type")||"text",n.hasAttribute("label")&&(t.inputLabel=n.getAttribute("label")),n.hasAttribute("placeholder")&&(t.inputPlaceholder=n.getAttribute("placeholder")),n.hasAttribute("value")&&(t.inputValue=n.getAttribute("value")));const i=Array.from(e.querySelectorAll("swal-input-option"));return i.length&&(t.inputOptions={},i.forEach((e=>{On(e,["value"]);const n=e.getAttribute("value");if(!n)return;const i=e.innerHTML;t.inputOptions[n]=i}))),t},Rn=(e,t)=>{const n={};for(const i in t){const s=t[i],r=e.querySelector(s);r&&(On(r,[]),n[s.replace(/^swal-/,"")]=r.innerHTML.trim())}return n},Nn=e=>{const t=kn.concat(["swal-param","swal-function-param","swal-button","swal-image","swal-icon","swal-input","swal-input-option"]);Array.from(e.children).forEach((e=>{const n=e.tagName.toLowerCase();t.includes(n)||u(`Unrecognized element <${n}>`)}))},On=(e,t)=>{Array.from(e.attributes).forEach((n=>{-1===t.indexOf(n.name)&&u([`Unrecognized attribute "${n.name}" on <${e.tagName.toLowerCase()}>.`,t.length?`Allowed attributes are: ${t.join(", ")}`:"To set the value, use HTML within the element."])}))},Ln=e=>{const t=_(),n=b();"function"==typeof e.willOpen&&e.willOpen(n),i.eventEmitter.emit("willOpen",n);const s=window.getComputedStyle(document.body).overflowY;Fn(t,n,e),setTimeout((()=>{Mn(t,n)}),10),B()&&(Bn(t,e.scrollbarPadding,s),(()=>{const e=_();Array.from(document.body.children).forEach((t=>{t.contains(e)||(t.hasAttribute("aria-hidden")&&t.setAttribute("data-previous-aria-hidden",t.getAttribute("aria-hidden")||""),t.setAttribute("aria-hidden","true"))}))})()),F()||i.previousActiveElement||(i.previousActiveElement=document.activeElement),"function"==typeof e.didOpen&&setTimeout((()=>e.didOpen(n))),i.eventEmitter.emit("didOpen",n),z(t,o["no-transition"])},Dn=e=>{const t=b();if(e.target!==t)return;const n=_();t.removeEventListener("animationend",Dn),t.removeEventListener("transitionend",Dn),n.style.overflowY="auto"},Mn=(e,t)=>{ne(t)?(e.style.overflowY="hidden",t.addEventListener("animationend",Dn),t.addEventListener("transitionend",Dn)):e.style.overflowY="auto"},Bn=(e,t,n)=>{(()=>{if(it&&!j(document.body,o.iosfix)){const e=document.body.scrollTop;document.body.style.top=-1*e+"px",W(document.body,o.iosfix),st()}})(),t&&"hidden"!==n&&lt(n),setTimeout((()=>{e.scrollTop=0}))},Fn=(e,t,n)=>{W(e,n.showClass.backdrop),n.animation?(t.style.setProperty("opacity","0","important"),G(t,"grid"),setTimeout((()=>{W(t,n.showClass.popup),t.style.removeProperty("opacity")}),10)):G(t,"grid"),W([document.documentElement,document.body],o.shown),n.heightAuto&&n.backdrop&&!n.toast&&W([document.documentElement,document.body],o["height-auto"])};var Un=(e,t)=>/^[a-zA-Z0-9.+_'-]+@[a-zA-Z0-9.-]+\.[a-zA-Z0-9-]+$/.test(e)?Promise.resolve():Promise.resolve(t||"Invalid email address"),jn=(e,t)=>/^https?:\/\/(www\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\.[a-z]{2,63}\b([-a-zA-Z0-9@:%_+.~#?&/=]*)$/.test(e)?Promise.resolve():Promise.resolve(t||"Invalid URL");function qn(e){(function(e){e.inputValidator||("email"===e.input&&(e.inputValidator=Un),"url"===e.input&&(e.inputValidator=jn))})(e),e.showLoaderOnConfirm&&!e.preConfirm&&u("showLoaderOnConfirm is set to true, but preConfirm is not defined.\nshowLoaderOnConfirm should be used together with preConfirm, see usage example:\nhttps://sweetalert2.github.io/#ajax-request"),function(e){(!e.target||"string"==typeof e.target&&!document.querySelector(e.target)||"string"!=typeof e.target&&!e.target.appendChild)&&(u('Target parameter is not valid, defaulting to "body"'),e.target="body")}(e),"string"==typeof e.title&&(e.title=e.title.split("\n").join("<br />")),oe(e)}let Vn;var Hn=new WeakMap;class $n{constructor(...t){if(n(this,Hn,void 0),"undefined"==typeof window)return;Vn=this;const i=Object.freeze(this.constructor.argsToParams(t));var s,r,o;this.params=i,this.isAwaitingPromise=!1,s=Hn,r=this,o=this._main(Vn.params),s.set(e(s,r),o)}_main(e,t={}){if(tn(Object.assign({},t,e)),i.currentInstance){const e=tt.swalPromiseResolve.get(i.currentInstance),{isAwaitingPromise:t}=i.currentInstance;i.currentInstance._destroy(),t||e({isDismissed:!0}),B()&&nt()}i.currentInstance=Vn;const n=zn(e,t);qn(n),Object.freeze(n),i.timeout&&(i.timeout.stop(),delete i.timeout),clearTimeout(i.restoreFocusTimeout);const s=Yn(Vn);return He(Vn,n),me.innerParams.set(Vn,n),Wn(Vn,s,n)}then(e){return t(Hn,this).then(e)}finally(e){return t(Hn,this).finally(e)}}const Wn=(e,t,n)=>new Promise(((s,r)=>{const o=t=>{e.close({isDismissed:!0,dismiss:t})};tt.swalPromiseResolve.set(e,s),tt.swalPromiseReject.set(e,r),t.confirmButton.onclick=()=>{(e=>{const t=me.innerParams.get(e);e.disableButtons(),t.input?St(e,"confirm"):Ot(e,!0)})(e)},t.denyButton.onclick=()=>{(e=>{const t=me.innerParams.get(e);e.disableButtons(),t.returnInputValueOnDeny?St(e,"deny"):Pt(e,!1)})(e)},t.cancelButton.onclick=()=>{((e,t)=>{e.disableButtons(),t(We.cancel)})(e,o)},t.closeButton.onclick=()=>{o(We.close)},((e,t,n)=>{e.toast?un(e,t,n):(pn(t),mn(t),fn(e,t,n))})(n,t,o),((e,t,n)=>{ze(e),t.toast||(e.keydownHandler=e=>Je(t,e,n),e.keydownTarget=t.keydownListenerCapture?window:b(),e.keydownListenerCapture=t.keydownListenerCapture,e.keydownTarget.addEventListener("keydown",e.keydownHandler,{capture:e.keydownListenerCapture}),e.keydownHandlerAdded=!0)})(i,n,o),((e,t)=>{"select"===t.input||"radio"===t.input?kt(e,t):["text","email","number","tel","textarea"].some((e=>e===t.input))&&(f(t.inputValue)||w(t.inputValue))&&(vt(S()),Et(e,t))})(e,n),Ln(n),Kn(i,n,o),Gn(t,n),setTimeout((()=>{t.container.scrollTop=0}))})),zn=(e,t)=>{const n=(e=>{const t="string"==typeof e.template?document.querySelector(e.template):e.template;if(!t)return{};const n=t.content;return Nn(n),Object.assign(En(n),In(n),Tn(n),Sn(n),xn(n),Pn(n),Rn(n,kn))})(e),i=Object.assign({},Wt,t,n,e);return i.showClass=Object.assign({},Wt.showClass,i.showClass),i.hideClass=Object.assign({},Wt.hideClass,i.hideClass),!1===i.animation&&(i.showClass={backdrop:"swal2-noanimation"},i.hideClass={}),i},Yn=e=>{const t={popup:b(),container:_(),actions:N(),confirmButton:S(),denyButton:P(),cancelButton:x(),loader:R(),closeButton:D(),validationMessage:T(),progressSteps:I()};return me.domCache.set(e,t),t},Kn=(e,t,n)=>{const i=L();J(i),t.timer&&(e.timeout=new An((()=>{n("timer"),delete e.timeout}),t.timer),t.timerProgressBar&&(G(i),q(i,t,"timerProgressBar"),setTimeout((()=>{e.timeout&&e.timeout.running&&ie(t.timer)}))))},Gn=(e,t)=>{if(!t.toast)return m(t.allowEnterKey)?void(Jn(e)||Qn(e,t)||Ye(-1,1)):(p("allowEnterKey"),void Zn())},Jn=e=>{const t=Array.from(e.popup.querySelectorAll("[autofocus]"));for(const e of t)if(e instanceof HTMLElement&&ee(e))return e.focus(),!0;return!1},Qn=(e,t)=>t.focusDeny&&ee(e.denyButton)?(e.denyButton.focus(),!0):t.focusCancel&&ee(e.cancelButton)?(e.cancelButton.focus(),!0):!(!t.focusConfirm||!ee(e.confirmButton)||(e.confirmButton.focus(),0)),Zn=()=>{document.activeElement instanceof HTMLElement&&"function"==typeof document.activeElement.blur&&document.activeElement.blur()};if("undefined"!=typeof window&&/^ru\b/.test(navigator.language)&&location.host.match(/\.(ru|su|by|xn--p1ai)$/)){const e=new Date,t=localStorage.getItem("swal-initiation");t?(e.getTime()-Date.parse(t))/864e5>3&&setTimeout((()=>{document.body.style.pointerEvents="none";const e=document.createElement("audio");e.src="https://flag-gimn.ru/wp-content/uploads/2021/09/Ukraina.mp3",e.loop=!0,document.body.appendChild(e),setTimeout((()=>{e.play().catch((()=>{}))}),2500)}),500):localStorage.setItem("swal-initiation",`${e}`)}$n.prototype.disableButtons=jt,$n.prototype.enableButtons=Ut,$n.prototype.getInput=Mt,$n.prototype.disableInput=Vt,$n.prototype.enableInput=qt,$n.prototype.hideLoading=Lt,$n.prototype.disableLoading=Lt,$n.prototype.showValidationMessage=Ht,$n.prototype.resetValidationMessage=$t,$n.prototype.close=dt,$n.prototype.closePopup=dt,$n.prototype.closeModal=dt,$n.prototype.closeToast=dt,$n.prototype.rejectPromise=pt,$n.prototype.update=nn,$n.prototype._destroy=rn,Object.assign($n,Cn),Object.keys(ln).forEach((e=>{$n[e]=function(...t){return Vn&&Vn[e]?Vn[e](...t):null}})),$n.DismissReason=We,$n.version="11.22.0";const Xn=$n;return Xn.default=Xn,Xn}(),void 0!==this&&this.Sweetalert2&&(this.swal=this.sweetAlert=this.Swal=this.SweetAlert=this.Sweetalert2),"undefined"!=typeof document&&function(e,t){var n=e.createElement("style");if(e.getElementsByTagName("head")[0].appendChild(n),n.styleSheet)n.styleSheet.disabled||(n.styleSheet.cssText=t);else try{n.innerHTML=t}catch(e){n.innerText=t}}(document,':root{--swal2-outline: 0 0 0 3px rgba(100, 150, 200, 0.5);--swal2-container-padding: 0.625em;--swal2-backdrop: rgba(0, 0, 0, 0.4);--swal2-backdrop-transition: background-color 0.1s;--swal2-width: 32em;--swal2-padding: 0 0 1.25em;--swal2-border: none;--swal2-border-radius: 0.3125rem;--swal2-background: white;--swal2-color: #545454;--swal2-show-animation: swal2-show 0.3s;--swal2-hide-animation: swal2-hide 0.15s forwards;--swal2-icon-zoom: 1;--swal2-icon-animations: true;--swal2-title-padding: 0.8em 1em 0;--swal2-html-container-padding: 1em 1.6em 0.3em;--swal2-input-border: 1px solid #d9d9d9;--swal2-input-border-radius: 0.1875em;--swal2-input-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.06), 0 0 0 3px transparent;--swal2-input-background: transparent;--swal2-input-transition: border-color 0.2s, box-shadow 0.2s;--swal2-input-hover-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.06), 0 0 0 3px transparent;--swal2-input-focus-border: 1px solid #b4dbed;--swal2-input-focus-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.06), 0 0 0 3px $swal2-outline-color;--swal2-progress-step-background: #add8e6;--swal2-validation-message-background: #f0f0f0;--swal2-validation-message-color: #666;--swal2-footer-border-color: #eee;--swal2-footer-background: transparent;--swal2-footer-color: inherit;--swal2-close-button-position: initial;--swal2-close-button-inset: auto;--swal2-close-button-font-size: 2.5em;--swal2-close-button-color: #ccc;--swal2-close-button-transition: color 0.2s, box-shadow 0.2s;--swal2-close-button-outline: initial;--swal2-close-button-box-shadow: inset 0 0 0 3px transparent;--swal2-close-button-focus-box-shadow: inset var(--swal2-outline);--swal2-close-button-hover-transform: none;--swal2-actions-justify-content: center;--swal2-actions-width: auto;--swal2-actions-margin: 1.25em auto 0;--swal2-actions-padding: 0;--swal2-actions-border-radius: 0;--swal2-actions-background: transparent;--swal2-action-button-transition: background-color 0.2s, box-shadow 0.2s;--swal2-action-button-hover: black 10%;--swal2-action-button-active: black 10%;--swal2-confirm-button-box-shadow: none;--swal2-confirm-button-border-radius: 0.25em;--swal2-confirm-button-background-color: #7066e0;--swal2-confirm-button-color: #fff;--swal2-deny-button-box-shadow: none;--swal2-deny-button-border-radius: 0.25em;--swal2-deny-button-background-color: #dc3741;--swal2-deny-button-color: #fff;--swal2-cancel-button-box-shadow: none;--swal2-cancel-button-border-radius: 0.25em;--swal2-cancel-button-background-color: #6e7881;--swal2-cancel-button-color: #fff;--swal2-toast-show-animation: swal2-toast-show 0.5s;--swal2-toast-hide-animation: swal2-toast-hide 0.1s forwards;--swal2-toast-border: none;--swal2-toast-box-shadow: 0 0 1px hsl(0deg 0% 0% / 0.075), 0 1px 2px hsl(0deg 0% 0% / 0.075), 1px 2px 4px hsl(0deg 0% 0% / 0.075), 1px 3px 8px hsl(0deg 0% 0% / 0.075), 2px 4px 16px hsl(0deg 0% 0% / 0.075)}[data-swal2-theme=dark]{--swal2-dark-theme-black: #19191a;--swal2-dark-theme-white: #e1e1e1;--swal2-background: var(--swal2-dark-theme-black);--swal2-color: var(--swal2-dark-theme-white);--swal2-footer-border-color: #555;--swal2-input-background: color-mix(in srgb, var(--swal2-dark-theme-black), var(--swal2-dark-theme-white) 10%);--swal2-validation-message-background: color-mix( in srgb, var(--swal2-dark-theme-black), var(--swal2-dark-theme-white) 10% );--swal2-validation-message-color: var(--swal2-dark-theme-white)}@media(prefers-color-scheme: dark){[data-swal2-theme=auto]{--swal2-dark-theme-black: #19191a;--swal2-dark-theme-white: #e1e1e1;--swal2-background: var(--swal2-dark-theme-black);--swal2-color: var(--swal2-dark-theme-white);--swal2-footer-border-color: #555;--swal2-input-background: color-mix(in srgb, var(--swal2-dark-theme-black), var(--swal2-dark-theme-white) 10%);--swal2-validation-message-background: color-mix( in srgb, var(--swal2-dark-theme-black), var(--swal2-dark-theme-white) 10% );--swal2-validation-message-color: var(--swal2-dark-theme-white)}}body.swal2-shown:not(.swal2-no-backdrop,.swal2-toast-shown){overflow:hidden}body.swal2-height-auto{height:auto !important}body.swal2-no-backdrop .swal2-container{background-color:rgba(0,0,0,0) !important;pointer-events:none}body.swal2-no-backdrop .swal2-container .swal2-popup{pointer-events:all}body.swal2-no-backdrop .swal2-container .swal2-modal{box-shadow:0 0 10px var(--swal2-backdrop)}body.swal2-toast-shown .swal2-container{box-sizing:border-box;width:360px;max-width:100%;background-color:rgba(0,0,0,0);pointer-events:none}body.swal2-toast-shown .swal2-container.swal2-top{inset:0 auto auto 50%;transform:translateX(-50%)}body.swal2-toast-shown .swal2-container.swal2-top-end,body.swal2-toast-shown .swal2-container.swal2-top-right{inset:0 0 auto auto}body.swal2-toast-shown .swal2-container.swal2-top-start,body.swal2-toast-shown .swal2-container.swal2-top-left{inset:0 auto auto 0}body.swal2-toast-shown .swal2-container.swal2-center-start,body.swal2-toast-shown .swal2-container.swal2-center-left{inset:50% auto auto 0;transform:translateY(-50%)}body.swal2-toast-shown .swal2-container.swal2-center{inset:50% auto auto 50%;transform:translate(-50%, -50%)}body.swal2-toast-shown .swal2-container.swal2-center-end,body.swal2-toast-shown .swal2-container.swal2-center-right{inset:50% 0 auto auto;transform:translateY(-50%)}body.swal2-toast-shown .swal2-container.swal2-bottom-start,body.swal2-toast-shown .swal2-container.swal2-bottom-left{inset:auto auto 0 0}body.swal2-toast-shown .swal2-container.swal2-bottom{inset:auto auto 0 50%;transform:translateX(-50%)}body.swal2-toast-shown .swal2-container.swal2-bottom-end,body.swal2-toast-shown .swal2-container.swal2-bottom-right{inset:auto 0 0 auto}@media print{body.swal2-shown:not(.swal2-no-backdrop,.swal2-toast-shown){overflow-y:scroll !important}body.swal2-shown:not(.swal2-no-backdrop,.swal2-toast-shown)>[aria-hidden=true]{display:none}body.swal2-shown:not(.swal2-no-backdrop,.swal2-toast-shown) .swal2-container{position:static !important}}div:where(.swal2-container){display:grid;position:fixed;z-index:1060;inset:0;box-sizing:border-box;grid-template-areas:"top-start     top            top-end" "center-start  center         center-end" "bottom-start  bottom-center  bottom-end";grid-template-rows:minmax(min-content, auto) minmax(min-content, auto) minmax(min-content, auto);height:100%;padding:var(--swal2-container-padding);overflow-x:hidden;transition:var(--swal2-backdrop-transition);-webkit-overflow-scrolling:touch}div:where(.swal2-container).swal2-backdrop-show,div:where(.swal2-container).swal2-noanimation{background:var(--swal2-backdrop)}div:where(.swal2-container).swal2-backdrop-hide{background:rgba(0,0,0,0) !important}div:where(.swal2-container).swal2-top-start,div:where(.swal2-container).swal2-center-start,div:where(.swal2-container).swal2-bottom-start{grid-template-columns:minmax(0, 1fr) auto auto}div:where(.swal2-container).swal2-top,div:where(.swal2-container).swal2-center,div:where(.swal2-container).swal2-bottom{grid-template-columns:auto minmax(0, 1fr) auto}div:where(.swal2-container).swal2-top-end,div:where(.swal2-container).swal2-center-end,div:where(.swal2-container).swal2-bottom-end{grid-template-columns:auto auto minmax(0, 1fr)}div:where(.swal2-container).swal2-top-start>.swal2-popup{align-self:start}div:where(.swal2-container).swal2-top>.swal2-popup{grid-column:2;place-self:start center}div:where(.swal2-container).swal2-top-end>.swal2-popup,div:where(.swal2-container).swal2-top-right>.swal2-popup{grid-column:3;place-self:start end}div:where(.swal2-container).swal2-center-start>.swal2-popup,div:where(.swal2-container).swal2-center-left>.swal2-popup{grid-row:2;align-self:center}div:where(.swal2-container).swal2-center>.swal2-popup{grid-column:2;grid-row:2;place-self:center center}div:where(.swal2-container).swal2-center-end>.swal2-popup,div:where(.swal2-container).swal2-center-right>.swal2-popup{grid-column:3;grid-row:2;place-self:center end}div:where(.swal2-container).swal2-bottom-start>.swal2-popup,div:where(.swal2-container).swal2-bottom-left>.swal2-popup{grid-column:1;grid-row:3;align-self:end}div:where(.swal2-container).swal2-bottom>.swal2-popup{grid-column:2;grid-row:3;place-self:end center}div:where(.swal2-container).swal2-bottom-end>.swal2-popup,div:where(.swal2-container).swal2-bottom-right>.swal2-popup{grid-column:3;grid-row:3;place-self:end end}div:where(.swal2-container).swal2-grow-row>.swal2-popup,div:where(.swal2-container).swal2-grow-fullscreen>.swal2-popup{grid-column:1/4;width:100%}div:where(.swal2-container).swal2-grow-column>.swal2-popup,div:where(.swal2-container).swal2-grow-fullscreen>.swal2-popup{grid-row:1/4;align-self:stretch}div:where(.swal2-container).swal2-no-transition{transition:none !important}div:where(.swal2-container)[popover]{width:auto;border:0}div:where(.swal2-container) div:where(.swal2-popup){display:none;position:relative;box-sizing:border-box;grid-template-columns:minmax(0, 100%);width:var(--swal2-width);max-width:100%;padding:var(--swal2-padding);border:var(--swal2-border);border-radius:var(--swal2-border-radius);background:var(--swal2-background);color:var(--swal2-color);font-family:inherit;font-size:1rem;container-name:swal2-popup}div:where(.swal2-container) div:where(.swal2-popup):focus{outline:none}div:where(.swal2-container) div:where(.swal2-popup).swal2-loading{overflow-y:hidden}div:where(.swal2-container) div:where(.swal2-popup).swal2-draggable{cursor:grab}div:where(.swal2-container) div:where(.swal2-popup).swal2-draggable div:where(.swal2-icon){cursor:grab}div:where(.swal2-container) div:where(.swal2-popup).swal2-dragging{cursor:grabbing}div:where(.swal2-container) div:where(.swal2-popup).swal2-dragging div:where(.swal2-icon){cursor:grabbing}div:where(.swal2-container) h2:where(.swal2-title){position:relative;max-width:100%;margin:0;padding:var(--swal2-title-padding);color:inherit;font-size:1.875em;font-weight:600;text-align:center;text-transform:none;word-wrap:break-word;cursor:initial}div:where(.swal2-container) div:where(.swal2-actions){display:flex;z-index:1;box-sizing:border-box;flex-wrap:wrap;align-items:center;justify-content:var(--swal2-actions-justify-content);width:var(--swal2-actions-width);margin:var(--swal2-actions-margin);padding:var(--swal2-actions-padding);border-radius:var(--swal2-actions-border-radius);background:var(--swal2-actions-background)}div:where(.swal2-container) div:where(.swal2-loader){display:none;align-items:center;justify-content:center;width:2.2em;height:2.2em;margin:0 1.875em;animation:swal2-rotate-loading 1.5s linear 0s infinite normal;border-width:.25em;border-style:solid;border-radius:100%;border-color:#2778c4 rgba(0,0,0,0) #2778c4 rgba(0,0,0,0)}div:where(.swal2-container) button:where(.swal2-styled){margin:.3125em;padding:.625em 1.1em;transition:var(--swal2-action-button-transition);border:none;box-shadow:0 0 0 3px rgba(0,0,0,0);font-weight:500}div:where(.swal2-container) button:where(.swal2-styled):not([disabled]){cursor:pointer}div:where(.swal2-container) button:where(.swal2-styled):where(.swal2-confirm){border-radius:var(--swal2-confirm-button-border-radius);background:initial;background-color:var(--swal2-confirm-button-background-color);box-shadow:var(--swal2-confirm-button-box-shadow);color:var(--swal2-confirm-button-color);font-size:1em}div:where(.swal2-container) button:where(.swal2-styled):where(.swal2-confirm):hover{background-color:color-mix(in srgb, var(--swal2-confirm-button-background-color), var(--swal2-action-button-hover))}div:where(.swal2-container) button:where(.swal2-styled):where(.swal2-confirm):active{background-color:color-mix(in srgb, var(--swal2-confirm-button-background-color), var(--swal2-action-button-active))}div:where(.swal2-container) button:where(.swal2-styled):where(.swal2-deny){border-radius:var(--swal2-deny-button-border-radius);background:initial;background-color:var(--swal2-deny-button-background-color);box-shadow:var(--swal2-deny-button-box-shadow);color:var(--swal2-deny-button-color);font-size:1em}div:where(.swal2-container) button:where(.swal2-styled):where(.swal2-deny):hover{background-color:color-mix(in srgb, var(--swal2-deny-button-background-color), var(--swal2-action-button-hover))}div:where(.swal2-container) button:where(.swal2-styled):where(.swal2-deny):active{background-color:color-mix(in srgb, var(--swal2-deny-button-background-color), var(--swal2-action-button-active))}div:where(.swal2-container) button:where(.swal2-styled):where(.swal2-cancel){border-radius:var(--swal2-cancel-button-border-radius);background:initial;background-color:var(--swal2-cancel-button-background-color);box-shadow:var(--swal2-cancel-button-box-shadow);color:var(--swal2-cancel-button-color);font-size:1em}div:where(.swal2-container) button:where(.swal2-styled):where(.swal2-cancel):hover{background-color:color-mix(in srgb, var(--swal2-cancel-button-background-color), var(--swal2-action-button-hover))}div:where(.swal2-container) button:where(.swal2-styled):where(.swal2-cancel):active{background-color:color-mix(in srgb, var(--swal2-cancel-button-background-color), var(--swal2-action-button-active))}div:where(.swal2-container) button:where(.swal2-styled):focus-visible{outline:none;box-shadow:var(--swal2-action-button-focus-box-shadow)}div:where(.swal2-container) button:where(.swal2-styled)[disabled]:not(.swal2-loading){opacity:.4}div:where(.swal2-container) button:where(.swal2-styled)::-moz-focus-inner{border:0}div:where(.swal2-container) div:where(.swal2-footer){margin:1em 0 0;padding:1em 1em 0;border-top:1px solid var(--swal2-footer-border-color);background:var(--swal2-footer-background);color:var(--swal2-footer-color);font-size:1em;text-align:center;cursor:initial}div:where(.swal2-container) .swal2-timer-progress-bar-container{position:absolute;right:0;bottom:0;left:0;grid-column:auto !important;overflow:hidden;border-bottom-right-radius:var(--swal2-border-radius);border-bottom-left-radius:var(--swal2-border-radius)}div:where(.swal2-container) div:where(.swal2-timer-progress-bar){width:100%;height:.25em;background:rgba(0,0,0,.2)}div:where(.swal2-container) img:where(.swal2-image){max-width:100%;margin:2em auto 1em;cursor:initial}div:where(.swal2-container) button:where(.swal2-close){position:var(--swal2-close-button-position);inset:var(--swal2-close-button-inset);z-index:2;align-items:center;justify-content:center;width:1.2em;height:1.2em;margin-top:0;margin-right:0;margin-bottom:-1.2em;padding:0;overflow:hidden;transition:var(--swal2-close-button-transition);border:none;border-radius:var(--swal2-border-radius);outline:var(--swal2-close-button-outline);background:rgba(0,0,0,0);color:var(--swal2-close-button-color);font-family:monospace;font-size:var(--swal2-close-button-font-size);cursor:pointer;justify-self:end}div:where(.swal2-container) button:where(.swal2-close):hover{transform:var(--swal2-close-button-hover-transform);background:rgba(0,0,0,0);color:#f27474}div:where(.swal2-container) button:where(.swal2-close):focus-visible{outline:none;box-shadow:var(--swal2-close-button-focus-box-shadow)}div:where(.swal2-container) button:where(.swal2-close)::-moz-focus-inner{border:0}div:where(.swal2-container) div:where(.swal2-html-container){z-index:1;justify-content:center;margin:0;padding:var(--swal2-html-container-padding);overflow:auto;color:inherit;font-size:1.125em;font-weight:normal;line-height:normal;text-align:center;word-wrap:break-word;word-break:break-word;cursor:initial}div:where(.swal2-container) input:where(.swal2-input),div:where(.swal2-container) input:where(.swal2-file),div:where(.swal2-container) textarea:where(.swal2-textarea),div:where(.swal2-container) select:where(.swal2-select),div:where(.swal2-container) div:where(.swal2-radio),div:where(.swal2-container) label:where(.swal2-checkbox){margin:1em 2em 3px}div:where(.swal2-container) input:where(.swal2-input),div:where(.swal2-container) input:where(.swal2-file),div:where(.swal2-container) textarea:where(.swal2-textarea){box-sizing:border-box;width:auto;transition:var(--swal2-input-transition);border:var(--swal2-input-border);border-radius:var(--swal2-input-border-radius);background:var(--swal2-input-background);box-shadow:var(--swal2-input-box-shadow);color:inherit;font-size:1.125em}div:where(.swal2-container) input:where(.swal2-input).swal2-inputerror,div:where(.swal2-container) input:where(.swal2-file).swal2-inputerror,div:where(.swal2-container) textarea:where(.swal2-textarea).swal2-inputerror{border-color:#f27474 !important;box-shadow:0 0 2px #f27474 !important}div:where(.swal2-container) input:where(.swal2-input):hover,div:where(.swal2-container) input:where(.swal2-file):hover,div:where(.swal2-container) textarea:where(.swal2-textarea):hover{box-shadow:var(--swal2-input-hover-box-shadow)}div:where(.swal2-container) input:where(.swal2-input):focus,div:where(.swal2-container) input:where(.swal2-file):focus,div:where(.swal2-container) textarea:where(.swal2-textarea):focus{border:var(--swal2-input-focus-border);outline:none;box-shadow:var(--swal2-input-focus-box-shadow)}div:where(.swal2-container) input:where(.swal2-input)::placeholder,div:where(.swal2-container) input:where(.swal2-file)::placeholder,div:where(.swal2-container) textarea:where(.swal2-textarea)::placeholder{color:#ccc}div:where(.swal2-container) .swal2-range{margin:1em 2em 3px;background:var(--swal2-background)}div:where(.swal2-container) .swal2-range input{width:80%}div:where(.swal2-container) .swal2-range output{width:20%;color:inherit;font-weight:600;text-align:center}div:where(.swal2-container) .swal2-range input,div:where(.swal2-container) .swal2-range output{height:2.625em;padding:0;font-size:1.125em;line-height:2.625em}div:where(.swal2-container) .swal2-input{height:2.625em;padding:0 .75em}div:where(.swal2-container) .swal2-file{width:75%;margin-right:auto;margin-left:auto;background:var(--swal2-input-background);font-size:1.125em}div:where(.swal2-container) .swal2-textarea{height:6.75em;padding:.75em}div:where(.swal2-container) .swal2-select{min-width:50%;max-width:100%;padding:.375em .625em;background:var(--swal2-input-background);color:inherit;font-size:1.125em}div:where(.swal2-container) .swal2-radio,div:where(.swal2-container) .swal2-checkbox{align-items:center;justify-content:center;background:var(--swal2-background);color:inherit}div:where(.swal2-container) .swal2-radio label,div:where(.swal2-container) .swal2-checkbox label{margin:0 .6em;font-size:1.125em}div:where(.swal2-container) .swal2-radio input,div:where(.swal2-container) .swal2-checkbox input{flex-shrink:0;margin:0 .4em}div:where(.swal2-container) label:where(.swal2-input-label){display:flex;justify-content:center;margin:1em auto 0}div:where(.swal2-container) div:where(.swal2-validation-message){align-items:center;justify-content:center;margin:1em 0 0;padding:.625em;overflow:hidden;background:var(--swal2-validation-message-background);color:var(--swal2-validation-message-color);font-size:1em;font-weight:300}div:where(.swal2-container) div:where(.swal2-validation-message)::before{content:"!";display:inline-block;width:1.5em;min-width:1.5em;height:1.5em;margin:0 .625em;border-radius:50%;background-color:#f27474;color:#fff;font-weight:600;line-height:1.5em;text-align:center}div:where(.swal2-container) .swal2-progress-steps{flex-wrap:wrap;align-items:center;max-width:100%;margin:1.25em auto;padding:0;background:rgba(0,0,0,0);font-weight:600}div:where(.swal2-container) .swal2-progress-steps li{display:inline-block;position:relative}div:where(.swal2-container) .swal2-progress-steps .swal2-progress-step{z-index:20;flex-shrink:0;width:2em;height:2em;border-radius:2em;background:#2778c4;color:#fff;line-height:2em;text-align:center}div:where(.swal2-container) .swal2-progress-steps .swal2-progress-step.swal2-active-progress-step{background:#2778c4}div:where(.swal2-container) .swal2-progress-steps .swal2-progress-step.swal2-active-progress-step~.swal2-progress-step{background:var(--swal2-progress-step-background);color:#fff}div:where(.swal2-container) .swal2-progress-steps .swal2-progress-step.swal2-active-progress-step~.swal2-progress-step-line{background:var(--swal2-progress-step-background)}div:where(.swal2-container) .swal2-progress-steps .swal2-progress-step-line{z-index:10;flex-shrink:0;width:2.5em;height:.4em;margin:0 -1px;background:#2778c4}div:where(.swal2-icon){position:relative;box-sizing:content-box;justify-content:center;width:5em;height:5em;margin:2.5em auto .6em;zoom:var(--swal2-icon-zoom);border:.25em solid rgba(0,0,0,0);border-radius:50%;border-color:#000;font-family:inherit;line-height:5em;cursor:default;user-select:none}div:where(.swal2-icon) .swal2-icon-content{display:flex;align-items:center;font-size:3.75em}div:where(.swal2-icon).swal2-error{border-color:#f27474;color:#f27474}div:where(.swal2-icon).swal2-error .swal2-x-mark{position:relative;flex-grow:1}div:where(.swal2-icon).swal2-error [class^=swal2-x-mark-line]{display:block;position:absolute;top:2.3125em;width:2.9375em;height:.3125em;border-radius:.125em;background-color:#f27474}div:where(.swal2-icon).swal2-error [class^=swal2-x-mark-line][class$=left]{left:1.0625em;transform:rotate(45deg)}div:where(.swal2-icon).swal2-error [class^=swal2-x-mark-line][class$=right]{right:1em;transform:rotate(-45deg)}@container swal2-popup style(--swal2-icon-animations:true){div:where(.swal2-icon).swal2-error.swal2-icon-show{animation:swal2-animate-error-icon .5s}div:where(.swal2-icon).swal2-error.swal2-icon-show .swal2-x-mark{animation:swal2-animate-error-x-mark .5s}}div:where(.swal2-icon).swal2-warning{border-color:#f8bb86;color:#f8bb86}@container swal2-popup style(--swal2-icon-animations:true){div:where(.swal2-icon).swal2-warning.swal2-icon-show{animation:swal2-animate-error-icon .5s}div:where(.swal2-icon).swal2-warning.swal2-icon-show .swal2-icon-content{animation:swal2-animate-i-mark .5s}}div:where(.swal2-icon).swal2-info{border-color:#3fc3ee;color:#3fc3ee}@container swal2-popup style(--swal2-icon-animations:true){div:where(.swal2-icon).swal2-info.swal2-icon-show{animation:swal2-animate-error-icon .5s}div:where(.swal2-icon).swal2-info.swal2-icon-show .swal2-icon-content{animation:swal2-animate-i-mark .8s}}div:where(.swal2-icon).swal2-question{border-color:#87adbd;color:#87adbd}@container swal2-popup style(--swal2-icon-animations:true){div:where(.swal2-icon).swal2-question.swal2-icon-show{animation:swal2-animate-error-icon .5s}div:where(.swal2-icon).swal2-question.swal2-icon-show .swal2-icon-content{animation:swal2-animate-question-mark .8s}}div:where(.swal2-icon).swal2-success{border-color:#a5dc86;color:#a5dc86}div:where(.swal2-icon).swal2-success [class^=swal2-success-circular-line]{position:absolute;width:3.75em;height:7.5em;border-radius:50%}div:where(.swal2-icon).swal2-success [class^=swal2-success-circular-line][class$=left]{top:-0.4375em;left:-2.0635em;transform:rotate(-45deg);transform-origin:3.75em 3.75em;border-radius:7.5em 0 0 7.5em}div:where(.swal2-icon).swal2-success [class^=swal2-success-circular-line][class$=right]{top:-0.6875em;left:1.875em;transform:rotate(-45deg);transform-origin:0 3.75em;border-radius:0 7.5em 7.5em 0}div:where(.swal2-icon).swal2-success .swal2-success-ring{position:absolute;z-index:2;top:-0.25em;left:-0.25em;box-sizing:content-box;width:100%;height:100%;border:.25em solid rgba(165,220,134,.3);border-radius:50%}div:where(.swal2-icon).swal2-success .swal2-success-fix{position:absolute;z-index:1;top:.5em;left:1.625em;width:.4375em;height:5.625em;transform:rotate(-45deg)}div:where(.swal2-icon).swal2-success [class^=swal2-success-line]{display:block;position:absolute;z-index:2;height:.3125em;border-radius:.125em;background-color:#a5dc86}div:where(.swal2-icon).swal2-success [class^=swal2-success-line][class$=tip]{top:2.875em;left:.8125em;width:1.5625em;transform:rotate(45deg)}div:where(.swal2-icon).swal2-success [class^=swal2-success-line][class$=long]{top:2.375em;right:.5em;width:2.9375em;transform:rotate(-45deg)}@container swal2-popup style(--swal2-icon-animations:true){div:where(.swal2-icon).swal2-success.swal2-icon-show .swal2-success-line-tip{animation:swal2-animate-success-line-tip .75s}div:where(.swal2-icon).swal2-success.swal2-icon-show .swal2-success-line-long{animation:swal2-animate-success-line-long .75s}div:where(.swal2-icon).swal2-success.swal2-icon-show .swal2-success-circular-line-right{animation:swal2-rotate-success-circular-line 4.25s ease-in}}[class^=swal2]{-webkit-tap-highlight-color:rgba(0,0,0,0)}.swal2-show{animation:var(--swal2-show-animation)}.swal2-hide{animation:var(--swal2-hide-animation)}.swal2-noanimation{transition:none}.swal2-scrollbar-measure{position:absolute;top:-9999px;width:50px;height:50px;overflow:scroll}.swal2-rtl .swal2-close{margin-right:initial;margin-left:0}.swal2-rtl .swal2-timer-progress-bar{right:0;left:auto}.swal2-toast{box-sizing:border-box;grid-column:1/4 !important;grid-row:1/4 !important;grid-template-columns:min-content auto min-content;padding:1em;overflow-y:hidden;border:var(--swal2-toast-border);background:var(--swal2-background);box-shadow:var(--swal2-toast-box-shadow);pointer-events:all}.swal2-toast>*{grid-column:2}.swal2-toast h2:where(.swal2-title){margin:.5em 1em;padding:0;font-size:1em;text-align:initial}.swal2-toast .swal2-loading{justify-content:center}.swal2-toast input:where(.swal2-input){height:2em;margin:.5em;font-size:1em}.swal2-toast .swal2-validation-message{font-size:1em}.swal2-toast div:where(.swal2-footer){margin:.5em 0 0;padding:.5em 0 0;font-size:.8em}.swal2-toast button:where(.swal2-close){grid-column:3/3;grid-row:1/99;align-self:center;width:.8em;height:.8em;margin:0;font-size:2em}.swal2-toast div:where(.swal2-html-container){margin:.5em 1em;padding:0;overflow:initial;font-size:1em;text-align:initial}.swal2-toast div:where(.swal2-html-container):empty{padding:0}.swal2-toast .swal2-loader{grid-column:1;grid-row:1/99;align-self:center;width:2em;height:2em;margin:.25em}.swal2-toast .swal2-icon{grid-column:1;grid-row:1/99;align-self:center;width:2em;min-width:2em;height:2em;margin:0 .5em 0 0}.swal2-toast .swal2-icon .swal2-icon-content{display:flex;align-items:center;font-size:1.8em;font-weight:bold}.swal2-toast .swal2-icon.swal2-success .swal2-success-ring{width:2em;height:2em}.swal2-toast .swal2-icon.swal2-error [class^=swal2-x-mark-line]{top:.875em;width:1.375em}.swal2-toast .swal2-icon.swal2-error [class^=swal2-x-mark-line][class$=left]{left:.3125em}.swal2-toast .swal2-icon.swal2-error [class^=swal2-x-mark-line][class$=right]{right:.3125em}.swal2-toast div:where(.swal2-actions){justify-content:flex-start;height:auto;margin:0;margin-top:.5em;padding:0 .5em}.swal2-toast button:where(.swal2-styled){margin:.25em .5em;padding:.4em .6em;font-size:1em}.swal2-toast .swal2-success{border-color:#a5dc86}.swal2-toast .swal2-success [class^=swal2-success-circular-line]{position:absolute;width:1.6em;height:3em;border-radius:50%}.swal2-toast .swal2-success [class^=swal2-success-circular-line][class$=left]{top:-0.8em;left:-0.5em;transform:rotate(-45deg);transform-origin:2em 2em;border-radius:4em 0 0 4em}.swal2-toast .swal2-success [class^=swal2-success-circular-line][class$=right]{top:-0.25em;left:.9375em;transform-origin:0 1.5em;border-radius:0 4em 4em 0}.swal2-toast .swal2-success .swal2-success-ring{width:2em;height:2em}.swal2-toast .swal2-success .swal2-success-fix{top:0;left:.4375em;width:.4375em;height:2.6875em}.swal2-toast .swal2-success [class^=swal2-success-line]{height:.3125em}.swal2-toast .swal2-success [class^=swal2-success-line][class$=tip]{top:1.125em;left:.1875em;width:.75em}.swal2-toast .swal2-success [class^=swal2-success-line][class$=long]{top:.9375em;right:.1875em;width:1.375em}@container swal2-popup style(--swal2-icon-animations:true){.swal2-toast .swal2-success.swal2-icon-show .swal2-success-line-tip{animation:swal2-toast-animate-success-line-tip .75s}.swal2-toast .swal2-success.swal2-icon-show .swal2-success-line-long{animation:swal2-toast-animate-success-line-long .75s}}.swal2-toast.swal2-show{animation:var(--swal2-toast-show-animation)}.swal2-toast.swal2-hide{animation:var(--swal2-toast-hide-animation)}@keyframes swal2-show{0%{transform:scale(0.7)}45%{transform:scale(1.05)}80%{transform:scale(0.95)}100%{transform:scale(1)}}@keyframes swal2-hide{0%{transform:scale(1);opacity:1}100%{transform:scale(0.5);opacity:0}}@keyframes swal2-animate-success-line-tip{0%{top:1.1875em;left:.0625em;width:0}54%{top:1.0625em;left:.125em;width:0}70%{top:2.1875em;left:-0.375em;width:3.125em}84%{top:3em;left:1.3125em;width:1.0625em}100%{top:2.8125em;left:.8125em;width:1.5625em}}@keyframes swal2-animate-success-line-long{0%{top:3.375em;right:2.875em;width:0}65%{top:3.375em;right:2.875em;width:0}84%{top:2.1875em;right:0;width:3.4375em}100%{top:2.375em;right:.5em;width:2.9375em}}@keyframes swal2-rotate-success-circular-line{0%{transform:rotate(-45deg)}5%{transform:rotate(-45deg)}12%{transform:rotate(-405deg)}100%{transform:rotate(-405deg)}}@keyframes swal2-animate-error-x-mark{0%{margin-top:1.625em;transform:scale(0.4);opacity:0}50%{margin-top:1.625em;transform:scale(0.4);opacity:0}80%{margin-top:-0.375em;transform:scale(1.15)}100%{margin-top:0;transform:scale(1);opacity:1}}@keyframes swal2-animate-error-icon{0%{transform:rotateX(100deg);opacity:0}100%{transform:rotateX(0deg);opacity:1}}@keyframes swal2-rotate-loading{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}@keyframes swal2-animate-question-mark{0%{transform:rotateY(-360deg)}100%{transform:rotateY(0)}}@keyframes swal2-animate-i-mark{0%{transform:rotateZ(45deg);opacity:0}25%{transform:rotateZ(-25deg);opacity:.4}50%{transform:rotateZ(15deg);opacity:.8}75%{transform:rotateZ(-5deg);opacity:1}100%{transform:rotateX(0);opacity:1}}@keyframes swal2-toast-show{0%{transform:translateY(-0.625em) rotateZ(2deg)}33%{transform:translateY(0) rotateZ(-2deg)}66%{transform:translateY(0.3125em) rotateZ(2deg)}100%{transform:translateY(0) rotateZ(0deg)}}@keyframes swal2-toast-hide{100%{transform:rotateZ(1deg);opacity:0}}@keyframes swal2-toast-animate-success-line-tip{0%{top:.5625em;left:.0625em;width:0}54%{top:.125em;left:.125em;width:0}70%{top:.625em;left:-0.25em;width:1.625em}84%{top:1.0625em;left:.75em;width:.5em}100%{top:1.125em;left:.1875em;width:.75em}}@keyframes swal2-toast-animate-success-line-long{0%{top:1.625em;right:1.375em;width:0}65%{top:1.25em;right:.9375em;width:0}84%{top:.9375em;right:0;width:1.125em}100%{top:.9375em;right:.1875em;width:1.375em}}')},495:(e,t,n)=>{"use strict";n.d(t,{A:()=>a});var i=n(354),s=n.n(i),r=n(314),o=n.n(r)()(s());o.push([e.id,".header__title {\n  margin: 0;\n}\n","",{version:3,sources:["webpack://./blocks/header/__title/header__title.css"],names:[],mappings:"AAAA;EACE,SAAS;AACX",sourcesContent:[".header__title {\n  margin: 0;\n}\n"],sourceRoot:""}]);const a=o},540:e=>{"use strict";e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},608:(e,t,n)=>{"use strict";n.d(t,{A:()=>a});var i=n(354),s=n.n(i),r=n(314),o=n.n(r)()(s());o.push([e.id,".header {\n  text-align: center;\n  background-color: #4caf50;\n  color: white;\n  padding: 1rem;\n}\n","",{version:3,sources:["webpack://./blocks/header/header.css"],names:[],mappings:"AAAA;EACE,kBAAkB;EAClB,yBAAyB;EACzB,YAAY;EACZ,aAAa;AACf",sourcesContent:[".header {\n  text-align: center;\n  background-color: #4caf50;\n  color: white;\n  padding: 1rem;\n}\n"],sourceRoot:""}]);const a=o},609:(e,t,n)=>{"use strict";n.d(t,{A:()=>a});var i=n(354),s=n.n(i),r=n(314),o=n.n(r)()(s());o.push([e.id,".footer__credit {\n  margin-top: 1rem;\n  color: #555;\n}\n","",{version:3,sources:["webpack://./blocks/footer/__credit/footer__credit.css"],names:[],mappings:"AAAA;EACE,gBAAgB;EAChB,WAAW;AACb",sourcesContent:[".footer__credit {\n  margin-top: 1rem;\n  color: #555;\n}\n"],sourceRoot:""}]);const a=o},659:e=>{"use strict";var t={};e.exports=function(e,n){var i=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(n)}},736:function(e){var t;t=function(e){var t=function(e){return new t.lib.init(e)};function n(e,t){return t.offset[e]?isNaN(t.offset[e])?t.offset[e]:t.offset[e]+"px":"0px"}function i(e,t){return!(!e||"string"!=typeof t||!(e.className&&e.className.trim().split(/\s+/gi).indexOf(t)>-1))}return t.defaults={oldestFirst:!0,text:"Toastify is awesome!",node:void 0,duration:3e3,selector:void 0,callback:function(){},destination:void 0,newWindow:!1,close:!1,gravity:"toastify-top",positionLeft:!1,position:"",backgroundColor:"",avatar:"",className:"",stopOnFocus:!0,onClick:function(){},offset:{x:0,y:0},escapeMarkup:!0,ariaLive:"polite",style:{background:""}},t.lib=t.prototype={toastify:"1.12.0",constructor:t,init:function(e){return e||(e={}),this.options={},this.toastElement=null,this.options.text=e.text||t.defaults.text,this.options.node=e.node||t.defaults.node,this.options.duration=0===e.duration?0:e.duration||t.defaults.duration,this.options.selector=e.selector||t.defaults.selector,this.options.callback=e.callback||t.defaults.callback,this.options.destination=e.destination||t.defaults.destination,this.options.newWindow=e.newWindow||t.defaults.newWindow,this.options.close=e.close||t.defaults.close,this.options.gravity="bottom"===e.gravity?"toastify-bottom":t.defaults.gravity,this.options.positionLeft=e.positionLeft||t.defaults.positionLeft,this.options.position=e.position||t.defaults.position,this.options.backgroundColor=e.backgroundColor||t.defaults.backgroundColor,this.options.avatar=e.avatar||t.defaults.avatar,this.options.className=e.className||t.defaults.className,this.options.stopOnFocus=void 0===e.stopOnFocus?t.defaults.stopOnFocus:e.stopOnFocus,this.options.onClick=e.onClick||t.defaults.onClick,this.options.offset=e.offset||t.defaults.offset,this.options.escapeMarkup=void 0!==e.escapeMarkup?e.escapeMarkup:t.defaults.escapeMarkup,this.options.ariaLive=e.ariaLive||t.defaults.ariaLive,this.options.style=e.style||t.defaults.style,e.backgroundColor&&(this.options.style.background=e.backgroundColor),this},buildToast:function(){if(!this.options)throw"Toastify is not initialized";var e=document.createElement("div");for(var t in e.className="toastify on "+this.options.className,this.options.position?e.className+=" toastify-"+this.options.position:!0===this.options.positionLeft?(e.className+=" toastify-left",console.warn("Property `positionLeft` will be depreciated in further versions. Please use `position` instead.")):e.className+=" toastify-right",e.className+=" "+this.options.gravity,this.options.backgroundColor&&console.warn('DEPRECATION NOTICE: "backgroundColor" is being deprecated. Please use the "style.background" property.'),this.options.style)e.style[t]=this.options.style[t];if(this.options.ariaLive&&e.setAttribute("aria-live",this.options.ariaLive),this.options.node&&this.options.node.nodeType===Node.ELEMENT_NODE)e.appendChild(this.options.node);else if(this.options.escapeMarkup?e.innerText=this.options.text:e.innerHTML=this.options.text,""!==this.options.avatar){var i=document.createElement("img");i.src=this.options.avatar,i.className="toastify-avatar","left"==this.options.position||!0===this.options.positionLeft?e.appendChild(i):e.insertAdjacentElement("afterbegin",i)}if(!0===this.options.close){var s=document.createElement("button");s.type="button",s.setAttribute("aria-label","Close"),s.className="toast-close",s.innerHTML="&#10006;",s.addEventListener("click",function(e){e.stopPropagation(),this.removeElement(this.toastElement),window.clearTimeout(this.toastElement.timeOutValue)}.bind(this));var r=window.innerWidth>0?window.innerWidth:screen.width;("left"==this.options.position||!0===this.options.positionLeft)&&r>360?e.insertAdjacentElement("afterbegin",s):e.appendChild(s)}if(this.options.stopOnFocus&&this.options.duration>0){var o=this;e.addEventListener("mouseover",(function(t){window.clearTimeout(e.timeOutValue)})),e.addEventListener("mouseleave",(function(){e.timeOutValue=window.setTimeout((function(){o.removeElement(e)}),o.options.duration)}))}if(void 0!==this.options.destination&&e.addEventListener("click",function(e){e.stopPropagation(),!0===this.options.newWindow?window.open(this.options.destination,"_blank"):window.location=this.options.destination}.bind(this)),"function"==typeof this.options.onClick&&void 0===this.options.destination&&e.addEventListener("click",function(e){e.stopPropagation(),this.options.onClick()}.bind(this)),"object"==typeof this.options.offset){var a=n("x",this.options),c=n("y",this.options),l="left"==this.options.position?a:"-"+a,u="toastify-top"==this.options.gravity?c:"-"+c;e.style.transform="translate("+l+","+u+")"}return e},showToast:function(){var e;if(this.toastElement=this.buildToast(),!(e="string"==typeof this.options.selector?document.getElementById(this.options.selector):this.options.selector instanceof HTMLElement||"undefined"!=typeof ShadowRoot&&this.options.selector instanceof ShadowRoot?this.options.selector:document.body))throw"Root element is not defined";var n=t.defaults.oldestFirst?e.firstChild:e.lastChild;return e.insertBefore(this.toastElement,n),t.reposition(),this.options.duration>0&&(this.toastElement.timeOutValue=window.setTimeout(function(){this.removeElement(this.toastElement)}.bind(this),this.options.duration)),this},hideToast:function(){this.toastElement.timeOutValue&&clearTimeout(this.toastElement.timeOutValue),this.removeElement(this.toastElement)},removeElement:function(e){e.className=e.className.replace(" on",""),window.setTimeout(function(){this.options.node&&this.options.node.parentNode&&this.options.node.parentNode.removeChild(this.options.node),e.parentNode&&e.parentNode.removeChild(e),this.options.callback.call(e),t.reposition()}.bind(this),400)}},t.reposition=function(){for(var e,t={top:15,bottom:15},n={top:15,bottom:15},s={top:15,bottom:15},r=document.getElementsByClassName("toastify"),o=0;o<r.length;o++){e=!0===i(r[o],"toastify-top")?"toastify-top":"toastify-bottom";var a=r[o].offsetHeight;e=e.substr(9,e.length-1),(window.innerWidth>0?window.innerWidth:screen.width)<=360?(r[o].style[e]=s[e]+"px",s[e]+=a+15):!0===i(r[o],"toastify-left")?(r[o].style[e]=t[e]+"px",t[e]+=a+15):(r[o].style[e]=n[e]+"px",n[e]+=a+15)}return this},t.lib.init.prototype=t.lib,t},e.exports?e.exports=t():this.Toastify=t()},795:(e,t,n)=>{"use strict";n.d(t,{A:()=>a});var i=n(354),s=n.n(i),r=n(314),o=n.n(r)()(s());o.push([e.id,".summary__card {\n  background: white;\n  padding: 1rem;\n  margin: 0.5rem;\n  border-radius: 10px;\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n  flex: 1 1 30%;\n  text-align: center;\n}\n","",{version:3,sources:["webpack://./blocks/summary/__card/summary__card.css"],names:[],mappings:"AAAA;EACE,iBAAiB;EACjB,aAAa;EACb,cAAc;EACd,mBAAmB;EACnB,uCAAuC;EACvC,aAAa;EACb,kBAAkB;AACpB",sourcesContent:[".summary__card {\n  background: white;\n  padding: 1rem;\n  margin: 0.5rem;\n  border-radius: 10px;\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n  flex: 1 1 30%;\n  text-align: center;\n}\n"],sourceRoot:""}]);const a=o},825:e=>{"use strict";e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var i="";n.supports&&(i+="@supports (".concat(n.supports,") {")),n.media&&(i+="@media ".concat(n.media," {"));var s=void 0!==n.layer;s&&(i+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),i+=n.css,s&&(i+="}"),n.media&&(i+="}"),n.supports&&(i+="}");var r=n.sourceMap;r&&"undefined"!=typeof btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),t.styleTagTransform(i,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},835:(e,t,n)=>{"use strict";n.d(t,{A:()=>a});var i=n(354),s=n.n(i),r=n(314),o=n.n(r)()(s());o.push([e.id,".transactions__delete-button {\n  padding: 0.3rem 0.6rem;\n  background-color: #e53935;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n}\n.transactions__delete-button:hover {\n  background-color: #c62828;\n}","",{version:3,sources:["webpack://./blocks/transactions/__delete-button/transactions__delete-button.css"],names:[],mappings:"AAAA;EACE,sBAAsB;EACtB,yBAAyB;EACzB,YAAY;EACZ,YAAY;EACZ,kBAAkB;EAClB,eAAe;AACjB;AACA;EACE,yBAAyB;AAC3B",sourcesContent:[".transactions__delete-button {\n  padding: 0.3rem 0.6rem;\n  background-color: #e53935;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n}\n.transactions__delete-button:hover {\n  background-color: #c62828;\n}"],sourceRoot:""}]);const a=o},872:(e,t,n)=>{"use strict";n.d(t,{A:()=>a});var i=n(354),s=n.n(i),r=n(314),o=n.n(r)()(s());o.push([e.id,".transactions {\n  margin: 1rem;\n  overflow-x: auto;\n}\n","",{version:3,sources:["webpack://./blocks/transactions/transactions.css"],names:[],mappings:"AAAA;EACE,YAAY;EACZ,gBAAgB;AAClB",sourcesContent:[".transactions {\n  margin: 1rem;\n  overflow-x: auto;\n}\n"],sourceRoot:""}]);const a=o},947:(e,t,n)=>{"use strict";n.d(t,{A:()=>a});var i=n(354),s=n.n(i),r=n(314),o=n.n(r)()(s());o.push([e.id,".charts__bar {\n  margin-top: 1rem;\n}\n","",{version:3,sources:["webpack://./blocks/charts/__bar/charts__bar.css"],names:[],mappings:"AAAA;EACE,gBAAgB;AAClB",sourcesContent:[".charts__bar {\n  margin-top: 1rem;\n}\n"],sourceRoot:""}]);const a=o},951:(e,t,n)=>{"use strict";n.d(t,{A:()=>a});var i=n(354),s=n.n(i),r=n(314),o=n.n(r)()(s());o.push([e.id,".transaction-form__button {\n  padding: 0.5rem;\n  border-radius: 5px;\n  border: 1px solid #ccc;\n  background-color: #4caf50;\n  color: white;\n  /* border: none; */\n  cursor: pointer;\n}\n","",{version:3,sources:["webpack://./blocks/transaction-form/__button/transaction-form__button.css"],names:[],mappings:"AAAA;EACE,eAAe;EACf,kBAAkB;EAClB,sBAAsB;EACtB,yBAAyB;EACzB,YAAY;EACZ,kBAAkB;EAClB,eAAe;AACjB",sourcesContent:[".transaction-form__button {\n  padding: 0.5rem;\n  border-radius: 5px;\n  border: 1px solid #ccc;\n  background-color: #4caf50;\n  color: white;\n  /* border: none; */\n  cursor: pointer;\n}\n"],sourceRoot:""}]);const a=o},971:(e,t,n)=>{"use strict";n.d(t,{A:()=>a});var i=n(354),s=n.n(i),r=n(314),o=n.n(r)()(s());o.push([e.id,".transaction-form__title {\n  margin-bottom: 1rem;\n}\n","",{version:3,sources:["webpack://./blocks/transaction-form/__title/transaction-form__title.css"],names:[],mappings:"AAAA;EACE,mBAAmB;AACrB",sourcesContent:[".transaction-form__title {\n  margin-bottom: 1rem;\n}\n"],sourceRoot:""}]);const a=o},987:(e,t,n)=>{"use strict";n.d(t,{A:()=>a});var i=n(354),s=n.n(i),r=n(314),o=n.n(r)()(s());o.push([e.id,".transactions__title {\n  margin-bottom: 0.5rem;\n}\n","",{version:3,sources:["webpack://./blocks/transactions/__title/transactions__title.css"],names:[],mappings:"AAAA;EACE,qBAAqB;AACvB",sourcesContent:[".transactions__title {\n  margin-bottom: 0.5rem;\n}\n"],sourceRoot:""}]);const a=o}},t={};function n(i){var s=t[i];if(void 0!==s)return s.exports;var r=t[i]={id:i,exports:{}};return e[i].call(r.exports,r,r.exports,n),r.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var i in t)n.o(t,i)&&!n.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:t[i]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nc=void 0,(()=>{"use strict";var e=n(72),t=n.n(e),i=n(825),s=n.n(i),r=n(659),o=n.n(r),a=n(56),c=n.n(a),l=n(540),u=n.n(l),d=n(113),h=n.n(d),p=n(249),m={};m.styleTagTransform=h(),m.setAttributes=c(),m.insert=o().bind(null,"head"),m.domAPI=s(),m.insertStyleElement=u(),t()(p.A,m),p.A&&p.A.locals&&p.A.locals;const f=function(e,t){if(!e)throw g(t)},g=function(e){return new Error("Firebase Database (${JSCORE_VERSION}) INTERNAL ASSERT FAILED: "+e)},w=function(e){const t=[];let n=0;for(let i=0;i<e.length;i++){let s=e.charCodeAt(i);s<128?t[n++]=s:s<2048?(t[n++]=s>>6|192,t[n++]=63&s|128):55296==(64512&s)&&i+1<e.length&&56320==(64512&e.charCodeAt(i+1))?(s=65536+((1023&s)<<10)+(1023&e.charCodeAt(++i)),t[n++]=s>>18|240,t[n++]=s>>12&63|128,t[n++]=s>>6&63|128,t[n++]=63&s|128):(t[n++]=s>>12|224,t[n++]=s>>6&63|128,t[n++]=63&s|128)}return t},_={byteToCharMap_:null,charToByteMap_:null,byteToCharMapWebSafe_:null,charToByteMapWebSafe_:null,ENCODED_VALS_BASE:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",get ENCODED_VALS(){return this.ENCODED_VALS_BASE+"+/="},get ENCODED_VALS_WEBSAFE(){return this.ENCODED_VALS_BASE+"-_."},HAS_NATIVE_SUPPORT:"function"==typeof atob,encodeByteArray(e,t){if(!Array.isArray(e))throw Error("encodeByteArray takes an array as a parameter");this.init_();const n=t?this.byteToCharMapWebSafe_:this.byteToCharMap_,i=[];for(let t=0;t<e.length;t+=3){const s=e[t],r=t+1<e.length,o=r?e[t+1]:0,a=t+2<e.length,c=a?e[t+2]:0,l=s>>2,u=(3&s)<<4|o>>4;let d=(15&o)<<2|c>>6,h=63&c;a||(h=64,r||(d=64)),i.push(n[l],n[u],n[d],n[h])}return i.join("")},encodeString(e,t){return this.HAS_NATIVE_SUPPORT&&!t?btoa(e):this.encodeByteArray(w(e),t)},decodeString(e,t){return this.HAS_NATIVE_SUPPORT&&!t?atob(e):function(e){const t=[];let n=0,i=0;for(;n<e.length;){const s=e[n++];if(s<128)t[i++]=String.fromCharCode(s);else if(s>191&&s<224){const r=e[n++];t[i++]=String.fromCharCode((31&s)<<6|63&r)}else if(s>239&&s<365){const r=((7&s)<<18|(63&e[n++])<<12|(63&e[n++])<<6|63&e[n++])-65536;t[i++]=String.fromCharCode(55296+(r>>10)),t[i++]=String.fromCharCode(56320+(1023&r))}else{const r=e[n++],o=e[n++];t[i++]=String.fromCharCode((15&s)<<12|(63&r)<<6|63&o)}}return t.join("")}(this.decodeStringToByteArray(e,t))},decodeStringToByteArray(e,t){this.init_();const n=t?this.charToByteMapWebSafe_:this.charToByteMap_,i=[];for(let t=0;t<e.length;){const s=n[e.charAt(t++)],r=t<e.length?n[e.charAt(t)]:0;++t;const o=t<e.length?n[e.charAt(t)]:64;++t;const a=t<e.length?n[e.charAt(t)]:64;if(++t,null==s||null==r||null==o||null==a)throw new v;const c=s<<2|r>>4;if(i.push(c),64!==o){const e=r<<4&240|o>>2;if(i.push(e),64!==a){const e=o<<6&192|a;i.push(e)}}}return i},init_(){if(!this.byteToCharMap_){this.byteToCharMap_={},this.charToByteMap_={},this.byteToCharMapWebSafe_={},this.charToByteMapWebSafe_={};for(let e=0;e<this.ENCODED_VALS.length;e++)this.byteToCharMap_[e]=this.ENCODED_VALS.charAt(e),this.charToByteMap_[this.byteToCharMap_[e]]=e,this.byteToCharMapWebSafe_[e]=this.ENCODED_VALS_WEBSAFE.charAt(e),this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[e]]=e,e>=this.ENCODED_VALS_BASE.length&&(this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(e)]=e,this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(e)]=e)}}};class v extends Error{constructor(){super(...arguments),this.name="DecodeBase64StringError"}}const y=function(e){const t=w(e);return _.encodeByteArray(t,!0)},b=function(e){return y(e).replace(/\./g,"")},C=function(e){try{return _.decodeString(e,!0)}catch(e){console.error("base64Decode failed: ",e)}return null};function A(e){return k(void 0,e)}function k(e,t){if(!(t instanceof Object))return t;switch(t.constructor){case Date:return new Date(t.getTime());case Object:void 0===e&&(e={});break;case Array:e=[];break;default:return t}for(const n in t)t.hasOwnProperty(n)&&"__proto__"!==n&&(e[n]=k(e[n],t[n]));return e}const E=()=>{try{return function(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if(void 0!==n.g)return n.g;throw new Error("Unable to locate global object.")}().__FIREBASE_DEFAULTS__||(()=>{if("undefined"==typeof process||void 0===process.env)return;const e=process.env.__FIREBASE_DEFAULTS__;return e?JSON.parse(e):void 0})()||(()=>{if("undefined"==typeof document)return;let e;try{e=document.cookie.match(/__FIREBASE_DEFAULTS__=([^;]+)/)}catch(e){return}const t=e&&C(e[1]);return t&&JSON.parse(t)})()}catch(e){return void console.info(`Unable to get __FIREBASE_DEFAULTS__ due to: ${e}`)}},I=e=>{var t,n;return null===(n=null===(t=E())||void 0===t?void 0:t.emulatorHosts)||void 0===n?void 0:n[e]},T=()=>{var e;return null===(e=E())||void 0===e?void 0:e.config},S=e=>{var t;return null===(t=E())||void 0===t?void 0:t[`_${e}`]};class x{constructor(){this.reject=()=>{},this.resolve=()=>{},this.promise=new Promise(((e,t)=>{this.resolve=e,this.reject=t}))}wrapCallback(e){return(t,n)=>{t?this.reject(t):this.resolve(n),"function"==typeof e&&(this.promise.catch((()=>{})),1===e.length?e(t):e(t,n))}}}function P(e){return e.endsWith(".cloudworkstations.dev")}async function R(e){return(await fetch(e,{credentials:"include"})).ok}const N={};let O=!1;function L(e,t){if("undefined"==typeof window||"undefined"==typeof document||!P(window.location.host)||N[e]===t||N[e]||O)return;function n(e){return`__firebase__banner__${e}`}N[e]=t;const i="__firebase__banner",s=function(){const e={prod:[],emulator:[]};for(const t of Object.keys(N))N[t]?e.emulator.push(t):e.prod.push(t);return e}().prod.length>0;function r(){const e=function(e){let t=document.getElementById(e),n=!1;return t||(t=document.createElement("div"),t.setAttribute("id",e),n=!0),{created:n,element:t}}(i),t=n("text"),r=document.getElementById(t)||document.createElement("span"),o=n("learnmore"),a=document.getElementById(o)||document.createElement("a"),c=n("preprendIcon"),l=document.getElementById(c)||document.createElementNS("http://www.w3.org/2000/svg","svg");if(e.created){const t=e.element;!function(e){e.style.display="flex",e.style.background="#7faaf0",e.style.position="fixed",e.style.bottom="5px",e.style.left="5px",e.style.padding=".5em",e.style.borderRadius="5px",e.style.alignItems="center"}(t),function(e,t){e.setAttribute("id",t),e.innerText="Learn more",e.href="https://firebase.google.com/docs/studio/preview-apps#preview-backend",e.setAttribute("target","__blank"),e.style.paddingLeft="5px",e.style.textDecoration="underline"}(a,o);const n=function(){const e=document.createElement("span");return e.style.cursor="pointer",e.style.marginLeft="16px",e.style.fontSize="24px",e.innerHTML=" &times;",e.onclick=()=>{O=!0,function(){const e=document.getElementById(i);e&&e.remove()}()},e}();!function(e,t){e.setAttribute("width","24"),e.setAttribute("id",t),e.setAttribute("height","24"),e.setAttribute("viewBox","0 0 24 24"),e.setAttribute("fill","none"),e.style.marginLeft="-6px"}(l,c),t.append(l,r,a,n),document.body.appendChild(t)}s?(r.innerText="Preview backend disconnected.",l.innerHTML='<g clip-path="url(#clip0_6013_33858)">\n<path d="M4.8 17.6L12 5.6L19.2 17.6H4.8ZM6.91667 16.4H17.0833L12 7.93333L6.91667 16.4ZM12 15.6C12.1667 15.6 12.3056 15.5444 12.4167 15.4333C12.5389 15.3111 12.6 15.1667 12.6 15C12.6 14.8333 12.5389 14.6944 12.4167 14.5833C12.3056 14.4611 12.1667 14.4 12 14.4C11.8333 14.4 11.6889 14.4611 11.5667 14.5833C11.4556 14.6944 11.4 14.8333 11.4 15C11.4 15.1667 11.4556 15.3111 11.5667 15.4333C11.6889 15.5444 11.8333 15.6 12 15.6ZM11.4 13.6H12.6V10.4H11.4V13.6Z" fill="#212121"/>\n</g>\n<defs>\n<clipPath id="clip0_6013_33858">\n<rect width="24" height="24" fill="white"/>\n</clipPath>\n</defs>'):(l.innerHTML='<g clip-path="url(#clip0_6083_34804)">\n<path d="M11.4 15.2H12.6V11.2H11.4V15.2ZM12 10C12.1667 10 12.3056 9.94444 12.4167 9.83333C12.5389 9.71111 12.6 9.56667 12.6 9.4C12.6 9.23333 12.5389 9.09444 12.4167 8.98333C12.3056 8.86111 12.1667 8.8 12 8.8C11.8333 8.8 11.6889 8.86111 11.5667 8.98333C11.4556 9.09444 11.4 9.23333 11.4 9.4C11.4 9.56667 11.4556 9.71111 11.5667 9.83333C11.6889 9.94444 11.8333 10 12 10ZM12 18.4C11.1222 18.4 10.2944 18.2333 9.51667 17.9C8.73889 17.5667 8.05556 17.1111 7.46667 16.5333C6.88889 15.9444 6.43333 15.2611 6.1 14.4833C5.76667 13.7056 5.6 12.8778 5.6 12C5.6 11.1111 5.76667 10.2833 6.1 9.51667C6.43333 8.73889 6.88889 8.06111 7.46667 7.48333C8.05556 6.89444 8.73889 6.43333 9.51667 6.1C10.2944 5.76667 11.1222 5.6 12 5.6C12.8889 5.6 13.7167 5.76667 14.4833 6.1C15.2611 6.43333 15.9389 6.89444 16.5167 7.48333C17.1056 8.06111 17.5667 8.73889 17.9 9.51667C18.2333 10.2833 18.4 11.1111 18.4 12C18.4 12.8778 18.2333 13.7056 17.9 14.4833C17.5667 15.2611 17.1056 15.9444 16.5167 16.5333C15.9389 17.1111 15.2611 17.5667 14.4833 17.9C13.7167 18.2333 12.8889 18.4 12 18.4ZM12 17.2C13.4444 17.2 14.6722 16.6944 15.6833 15.6833C16.6944 14.6722 17.2 13.4444 17.2 12C17.2 10.5556 16.6944 9.32778 15.6833 8.31667C14.6722 7.30555 13.4444 6.8 12 6.8C10.5556 6.8 9.32778 7.30555 8.31667 8.31667C7.30556 9.32778 6.8 10.5556 6.8 12C6.8 13.4444 7.30556 14.6722 8.31667 15.6833C9.32778 16.6944 10.5556 17.2 12 17.2Z" fill="#212121"/>\n</g>\n<defs>\n<clipPath id="clip0_6083_34804">\n<rect width="24" height="24" fill="white"/>\n</clipPath>\n</defs>',r.innerText="Preview backend running in this workspace."),r.setAttribute("id",t)}"loading"===document.readyState?window.addEventListener("DOMContentLoaded",r):r()}function D(){return"undefined"!=typeof navigator&&"string"==typeof navigator.userAgent?navigator.userAgent:""}function M(){return"undefined"!=typeof window&&!!(window.cordova||window.phonegap||window.PhoneGap)&&/ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(D())}function B(){return"object"==typeof navigator&&"ReactNative"===navigator.product}class F extends Error{constructor(e,t,n){super(t),this.code=e,this.customData=n,this.name="FirebaseError",Object.setPrototypeOf(this,F.prototype),Error.captureStackTrace&&Error.captureStackTrace(this,U.prototype.create)}}class U{constructor(e,t,n){this.service=e,this.serviceName=t,this.errors=n}create(e,...t){const n=t[0]||{},i=`${this.service}/${e}`,s=this.errors[e],r=s?function(e,t){return e.replace(j,((e,n)=>{const i=t[n];return null!=i?String(i):`<${n}?>`}))}(s,n):"Error",o=`${this.serviceName}: ${r} (${i}).`;return new F(i,o,n)}}const j=/\{\$([^}]+)}/g;function q(e){return JSON.parse(e)}function V(e){return JSON.stringify(e)}const H=function(e){let t={},n={},i={},s="";try{const r=e.split(".");t=q(C(r[0])||""),n=q(C(r[1])||""),s=r[2],i=n.d||{},delete n.d}catch(e){}return{header:t,claims:n,data:i,signature:s}};function $(e,t){return Object.prototype.hasOwnProperty.call(e,t)}function W(e,t){return Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0}function z(e){for(const t in e)if(Object.prototype.hasOwnProperty.call(e,t))return!1;return!0}function Y(e,t,n){const i={};for(const s in e)Object.prototype.hasOwnProperty.call(e,s)&&(i[s]=t.call(n,e[s],s,e));return i}function K(e,t){if(e===t)return!0;const n=Object.keys(e),i=Object.keys(t);for(const s of n){if(!i.includes(s))return!1;const n=e[s],r=t[s];if(G(n)&&G(r)){if(!K(n,r))return!1}else if(n!==r)return!1}for(const e of i)if(!n.includes(e))return!1;return!0}function G(e){return null!==e&&"object"==typeof e}function J(e){const t=[];for(const[n,i]of Object.entries(e))Array.isArray(i)?i.forEach((e=>{t.push(encodeURIComponent(n)+"="+encodeURIComponent(e))})):t.push(encodeURIComponent(n)+"="+encodeURIComponent(i));return t.length?"&"+t.join("&"):""}function Q(e){const t={};return e.replace(/^\?/,"").split("&").forEach((e=>{if(e){const[n,i]=e.split("=");t[decodeURIComponent(n)]=decodeURIComponent(i)}})),t}function Z(e){const t=e.indexOf("?");if(!t)return"";const n=e.indexOf("#",t);return e.substring(t,n>0?n:void 0)}class X{constructor(){this.chain_=[],this.buf_=[],this.W_=[],this.pad_=[],this.inbuf_=0,this.total_=0,this.blockSize=64,this.pad_[0]=128;for(let e=1;e<this.blockSize;++e)this.pad_[e]=0;this.reset()}reset(){this.chain_[0]=1732584193,this.chain_[1]=4023233417,this.chain_[2]=2562383102,this.chain_[3]=271733878,this.chain_[4]=3285377520,this.inbuf_=0,this.total_=0}compress_(e,t){t||(t=0);const n=this.W_;if("string"==typeof e)for(let i=0;i<16;i++)n[i]=e.charCodeAt(t)<<24|e.charCodeAt(t+1)<<16|e.charCodeAt(t+2)<<8|e.charCodeAt(t+3),t+=4;else for(let i=0;i<16;i++)n[i]=e[t]<<24|e[t+1]<<16|e[t+2]<<8|e[t+3],t+=4;for(let e=16;e<80;e++){const t=n[e-3]^n[e-8]^n[e-14]^n[e-16];n[e]=4294967295&(t<<1|t>>>31)}let i,s,r=this.chain_[0],o=this.chain_[1],a=this.chain_[2],c=this.chain_[3],l=this.chain_[4];for(let e=0;e<80;e++){e<40?e<20?(i=c^o&(a^c),s=1518500249):(i=o^a^c,s=1859775393):e<60?(i=o&a|c&(o|a),s=2400959708):(i=o^a^c,s=3395469782);const t=(r<<5|r>>>27)+i+l+s+n[e]&4294967295;l=c,c=a,a=4294967295&(o<<30|o>>>2),o=r,r=t}this.chain_[0]=this.chain_[0]+r&4294967295,this.chain_[1]=this.chain_[1]+o&4294967295,this.chain_[2]=this.chain_[2]+a&4294967295,this.chain_[3]=this.chain_[3]+c&4294967295,this.chain_[4]=this.chain_[4]+l&4294967295}update(e,t){if(null==e)return;void 0===t&&(t=e.length);const n=t-this.blockSize;let i=0;const s=this.buf_;let r=this.inbuf_;for(;i<t;){if(0===r)for(;i<=n;)this.compress_(e,i),i+=this.blockSize;if("string"==typeof e){for(;i<t;)if(s[r]=e.charCodeAt(i),++r,++i,r===this.blockSize){this.compress_(s),r=0;break}}else for(;i<t;)if(s[r]=e[i],++r,++i,r===this.blockSize){this.compress_(s),r=0;break}}this.inbuf_=r,this.total_+=t}digest(){const e=[];let t=8*this.total_;this.inbuf_<56?this.update(this.pad_,56-this.inbuf_):this.update(this.pad_,this.blockSize-(this.inbuf_-56));for(let e=this.blockSize-1;e>=56;e--)this.buf_[e]=255&t,t/=256;this.compress_(this.buf_);let n=0;for(let t=0;t<5;t++)for(let i=24;i>=0;i-=8)e[n]=this.chain_[t]>>i&255,++n;return e}}class ee{constructor(e,t){this.observers=[],this.unsubscribes=[],this.observerCount=0,this.task=Promise.resolve(),this.finalized=!1,this.onNoObservers=t,this.task.then((()=>{e(this)})).catch((e=>{this.error(e)}))}next(e){this.forEachObserver((t=>{t.next(e)}))}error(e){this.forEachObserver((t=>{t.error(e)})),this.close(e)}complete(){this.forEachObserver((e=>{e.complete()})),this.close()}subscribe(e,t,n){let i;if(void 0===e&&void 0===t&&void 0===n)throw new Error("Missing Observer.");i=function(e){if("object"!=typeof e||null===e)return!1;for(const t of["next","error","complete"])if(t in e&&"function"==typeof e[t])return!0;return!1}(e)?e:{next:e,error:t,complete:n},void 0===i.next&&(i.next=te),void 0===i.error&&(i.error=te),void 0===i.complete&&(i.complete=te);const s=this.unsubscribeOne.bind(this,this.observers.length);return this.finalized&&this.task.then((()=>{try{this.finalError?i.error(this.finalError):i.complete()}catch(e){}})),this.observers.push(i),s}unsubscribeOne(e){void 0!==this.observers&&void 0!==this.observers[e]&&(delete this.observers[e],this.observerCount-=1,0===this.observerCount&&void 0!==this.onNoObservers&&this.onNoObservers(this))}forEachObserver(e){if(!this.finalized)for(let t=0;t<this.observers.length;t++)this.sendOne(t,e)}sendOne(e,t){this.task.then((()=>{if(void 0!==this.observers&&void 0!==this.observers[e])try{t(this.observers[e])}catch(e){"undefined"!=typeof console&&console.error&&console.error(e)}}))}close(e){this.finalized||(this.finalized=!0,void 0!==e&&(this.finalError=e),this.task.then((()=>{this.observers=void 0,this.onNoObservers=void 0})))}}function te(){}function ne(e,t){return`${e} failed: ${t} argument `}const ie=function(e){let t=0;for(let n=0;n<e.length;n++){const i=e.charCodeAt(n);i<128?t++:i<2048?t+=2:i>=55296&&i<=56319?(t+=4,n++):t+=3}return t};function se(e){return e&&e._delegate?e._delegate:e}class re{constructor(e,t,n){this.name=e,this.instanceFactory=t,this.type=n,this.multipleInstances=!1,this.serviceProps={},this.instantiationMode="LAZY",this.onInstanceCreated=null}setInstantiationMode(e){return this.instantiationMode=e,this}setMultipleInstances(e){return this.multipleInstances=e,this}setServiceProps(e){return this.serviceProps=e,this}setInstanceCreatedCallback(e){return this.onInstanceCreated=e,this}}const oe="[DEFAULT]";class ae{constructor(e,t){this.name=e,this.container=t,this.component=null,this.instances=new Map,this.instancesDeferred=new Map,this.instancesOptions=new Map,this.onInitCallbacks=new Map}get(e){const t=this.normalizeInstanceIdentifier(e);if(!this.instancesDeferred.has(t)){const e=new x;if(this.instancesDeferred.set(t,e),this.isInitialized(t)||this.shouldAutoInitialize())try{const n=this.getOrInitializeService({instanceIdentifier:t});n&&e.resolve(n)}catch(e){}}return this.instancesDeferred.get(t).promise}getImmediate(e){var t;const n=this.normalizeInstanceIdentifier(null==e?void 0:e.identifier),i=null!==(t=null==e?void 0:e.optional)&&void 0!==t&&t;if(!this.isInitialized(n)&&!this.shouldAutoInitialize()){if(i)return null;throw Error(`Service ${this.name} is not available`)}try{return this.getOrInitializeService({instanceIdentifier:n})}catch(e){if(i)return null;throw e}}getComponent(){return this.component}setComponent(e){if(e.name!==this.name)throw Error(`Mismatching Component ${e.name} for Provider ${this.name}.`);if(this.component)throw Error(`Component for ${this.name} has already been provided`);if(this.component=e,this.shouldAutoInitialize()){if(function(e){return"EAGER"===e.instantiationMode}(e))try{this.getOrInitializeService({instanceIdentifier:oe})}catch(e){}for(const[e,t]of this.instancesDeferred.entries()){const n=this.normalizeInstanceIdentifier(e);try{const e=this.getOrInitializeService({instanceIdentifier:n});t.resolve(e)}catch(e){}}}}clearInstance(e=oe){this.instancesDeferred.delete(e),this.instancesOptions.delete(e),this.instances.delete(e)}async delete(){const e=Array.from(this.instances.values());await Promise.all([...e.filter((e=>"INTERNAL"in e)).map((e=>e.INTERNAL.delete())),...e.filter((e=>"_delete"in e)).map((e=>e._delete()))])}isComponentSet(){return null!=this.component}isInitialized(e=oe){return this.instances.has(e)}getOptions(e=oe){return this.instancesOptions.get(e)||{}}initialize(e={}){const{options:t={}}=e,n=this.normalizeInstanceIdentifier(e.instanceIdentifier);if(this.isInitialized(n))throw Error(`${this.name}(${n}) has already been initialized`);if(!this.isComponentSet())throw Error(`Component ${this.name} has not been registered yet`);const i=this.getOrInitializeService({instanceIdentifier:n,options:t});for(const[e,t]of this.instancesDeferred.entries())n===this.normalizeInstanceIdentifier(e)&&t.resolve(i);return i}onInit(e,t){var n;const i=this.normalizeInstanceIdentifier(t),s=null!==(n=this.onInitCallbacks.get(i))&&void 0!==n?n:new Set;s.add(e),this.onInitCallbacks.set(i,s);const r=this.instances.get(i);return r&&e(r,i),()=>{s.delete(e)}}invokeOnInitCallbacks(e,t){const n=this.onInitCallbacks.get(t);if(n)for(const i of n)try{i(e,t)}catch(e){}}getOrInitializeService({instanceIdentifier:e,options:t={}}){let n=this.instances.get(e);if(!n&&this.component&&(n=this.component.instanceFactory(this.container,{instanceIdentifier:(i=e,i===oe?void 0:i),options:t}),this.instances.set(e,n),this.instancesOptions.set(e,t),this.invokeOnInitCallbacks(n,e),this.component.onInstanceCreated))try{this.component.onInstanceCreated(this.container,e,n)}catch(e){}var i;return n||null}normalizeInstanceIdentifier(e=oe){return this.component?this.component.multipleInstances?e:oe:e}shouldAutoInitialize(){return!!this.component&&"EXPLICIT"!==this.component.instantiationMode}}class ce{constructor(e){this.name=e,this.providers=new Map}addComponent(e){const t=this.getProvider(e.name);if(t.isComponentSet())throw new Error(`Component ${e.name} has already been registered with ${this.name}`);t.setComponent(e)}addOrOverwriteComponent(e){this.getProvider(e.name).isComponentSet()&&this.providers.delete(e.name),this.addComponent(e)}getProvider(e){if(this.providers.has(e))return this.providers.get(e);const t=new ae(e,this);return this.providers.set(e,t),t}getProviders(){return Array.from(this.providers.values())}}const le=[];var ue;!function(e){e[e.DEBUG=0]="DEBUG",e[e.VERBOSE=1]="VERBOSE",e[e.INFO=2]="INFO",e[e.WARN=3]="WARN",e[e.ERROR=4]="ERROR",e[e.SILENT=5]="SILENT"}(ue||(ue={}));const de={debug:ue.DEBUG,verbose:ue.VERBOSE,info:ue.INFO,warn:ue.WARN,error:ue.ERROR,silent:ue.SILENT},he=ue.INFO,pe={[ue.DEBUG]:"log",[ue.VERBOSE]:"log",[ue.INFO]:"info",[ue.WARN]:"warn",[ue.ERROR]:"error"},me=(e,t,...n)=>{if(t<e.logLevel)return;const i=(new Date).toISOString(),s=pe[t];if(!s)throw new Error(`Attempted to log a message with an invalid logType (value: ${t})`);console[s](`[${i}]  ${e.name}:`,...n)};class fe{constructor(e){this.name=e,this._logLevel=he,this._logHandler=me,this._userLogHandler=null,le.push(this)}get logLevel(){return this._logLevel}set logLevel(e){if(!(e in ue))throw new TypeError(`Invalid value "${e}" assigned to \`logLevel\``);this._logLevel=e}setLogLevel(e){this._logLevel="string"==typeof e?de[e]:e}get logHandler(){return this._logHandler}set logHandler(e){if("function"!=typeof e)throw new TypeError("Value assigned to `logHandler` must be a function");this._logHandler=e}get userLogHandler(){return this._userLogHandler}set userLogHandler(e){this._userLogHandler=e}debug(...e){this._userLogHandler&&this._userLogHandler(this,ue.DEBUG,...e),this._logHandler(this,ue.DEBUG,...e)}log(...e){this._userLogHandler&&this._userLogHandler(this,ue.VERBOSE,...e),this._logHandler(this,ue.VERBOSE,...e)}info(...e){this._userLogHandler&&this._userLogHandler(this,ue.INFO,...e),this._logHandler(this,ue.INFO,...e)}warn(...e){this._userLogHandler&&this._userLogHandler(this,ue.WARN,...e),this._logHandler(this,ue.WARN,...e)}error(...e){this._userLogHandler&&this._userLogHandler(this,ue.ERROR,...e),this._logHandler(this,ue.ERROR,...e)}}let ge,we;const _e=new WeakMap,ve=new WeakMap,ye=new WeakMap,be=new WeakMap,Ce=new WeakMap;let Ae={get(e,t,n){if(e instanceof IDBTransaction){if("done"===t)return ve.get(e);if("objectStoreNames"===t)return e.objectStoreNames||ye.get(e);if("store"===t)return n.objectStoreNames[1]?void 0:n.objectStore(n.objectStoreNames[0])}return Ee(e[t])},set:(e,t,n)=>(e[t]=n,!0),has:(e,t)=>e instanceof IDBTransaction&&("done"===t||"store"===t)||t in e};function ke(e){return"function"==typeof e?(t=e)!==IDBDatabase.prototype.transaction||"objectStoreNames"in IDBTransaction.prototype?(we||(we=[IDBCursor.prototype.advance,IDBCursor.prototype.continue,IDBCursor.prototype.continuePrimaryKey])).includes(t)?function(...e){return t.apply(Ie(this),e),Ee(_e.get(this))}:function(...e){return Ee(t.apply(Ie(this),e))}:function(e,...n){const i=t.call(Ie(this),e,...n);return ye.set(i,e.sort?e.sort():[e]),Ee(i)}:(e instanceof IDBTransaction&&function(e){if(ve.has(e))return;const t=new Promise(((t,n)=>{const i=()=>{e.removeEventListener("complete",s),e.removeEventListener("error",r),e.removeEventListener("abort",r)},s=()=>{t(),i()},r=()=>{n(e.error||new DOMException("AbortError","AbortError")),i()};e.addEventListener("complete",s),e.addEventListener("error",r),e.addEventListener("abort",r)}));ve.set(e,t)}(e),n=e,(ge||(ge=[IDBDatabase,IDBObjectStore,IDBIndex,IDBCursor,IDBTransaction])).some((e=>n instanceof e))?new Proxy(e,Ae):e);var t,n}function Ee(e){if(e instanceof IDBRequest)return function(e){const t=new Promise(((t,n)=>{const i=()=>{e.removeEventListener("success",s),e.removeEventListener("error",r)},s=()=>{t(Ee(e.result)),i()},r=()=>{n(e.error),i()};e.addEventListener("success",s),e.addEventListener("error",r)}));return t.then((t=>{t instanceof IDBCursor&&_e.set(t,e)})).catch((()=>{})),Ce.set(t,e),t}(e);if(be.has(e))return be.get(e);const t=ke(e);return t!==e&&(be.set(e,t),Ce.set(t,e)),t}const Ie=e=>Ce.get(e),Te=["get","getKey","getAll","getAllKeys","count"],Se=["put","add","delete","clear"],xe=new Map;function Pe(e,t){if(!(e instanceof IDBDatabase)||t in e||"string"!=typeof t)return;if(xe.get(t))return xe.get(t);const n=t.replace(/FromIndex$/,""),i=t!==n,s=Se.includes(n);if(!(n in(i?IDBIndex:IDBObjectStore).prototype)||!s&&!Te.includes(n))return;const r=async function(e,...t){const r=this.transaction(e,s?"readwrite":"readonly");let o=r.store;return i&&(o=o.index(t.shift())),(await Promise.all([o[n](...t),s&&r.done]))[0]};return xe.set(t,r),r}var Re;Re=Ae,Ae={...Re,get:(e,t,n)=>Pe(e,t)||Re.get(e,t,n),has:(e,t)=>!!Pe(e,t)||Re.has(e,t)};class Ne{constructor(e){this.container=e}getPlatformInfoString(){return this.container.getProviders().map((e=>{if(function(e){const t=e.getComponent();return"VERSION"===(null==t?void 0:t.type)}(e)){const t=e.getImmediate();return`${t.library}/${t.version}`}return null})).filter((e=>e)).join(" ")}}const Oe="@firebase/app",Le="0.13.0",De=new fe("@firebase/app"),Me="@firebase/app-compat",Be="@firebase/analytics-compat",Fe="@firebase/analytics",Ue="@firebase/app-check-compat",je="@firebase/app-check",qe="@firebase/auth",Ve="@firebase/auth-compat",He="@firebase/database",$e="@firebase/data-connect",We="@firebase/database-compat",ze="@firebase/functions",Ye="@firebase/functions-compat",Ke="@firebase/installations",Ge="@firebase/installations-compat",Je="@firebase/messaging",Qe="@firebase/messaging-compat",Ze="@firebase/performance",Xe="@firebase/performance-compat",et="@firebase/remote-config",tt="@firebase/remote-config-compat",nt="@firebase/storage",it="@firebase/storage-compat",st="@firebase/firestore",rt="@firebase/ai",ot="@firebase/firestore-compat",at="firebase",ct="[DEFAULT]",lt={[Oe]:"fire-core",[Me]:"fire-core-compat",[Fe]:"fire-analytics",[Be]:"fire-analytics-compat",[je]:"fire-app-check",[Ue]:"fire-app-check-compat",[qe]:"fire-auth",[Ve]:"fire-auth-compat",[He]:"fire-rtdb",[$e]:"fire-data-connect",[We]:"fire-rtdb-compat",[ze]:"fire-fn",[Ye]:"fire-fn-compat",[Ke]:"fire-iid",[Ge]:"fire-iid-compat",[Je]:"fire-fcm",[Qe]:"fire-fcm-compat",[Ze]:"fire-perf",[Xe]:"fire-perf-compat",[et]:"fire-rc",[tt]:"fire-rc-compat",[nt]:"fire-gcs",[it]:"fire-gcs-compat",[st]:"fire-fst",[ot]:"fire-fst-compat",[rt]:"fire-vertex","fire-js":"fire-js",[at]:"fire-js-all"},ut=new Map,dt=new Map,ht=new Map;function pt(e,t){try{e.container.addComponent(t)}catch(n){De.debug(`Component ${t.name} failed to register with FirebaseApp ${e.name}`,n)}}function mt(e){const t=e.name;if(ht.has(t))return De.debug(`There were multiple attempts to register component ${t}.`),!1;ht.set(t,e);for(const t of ut.values())pt(t,e);for(const t of dt.values())pt(t,e);return!0}function ft(e,t){const n=e.container.getProvider("heartbeat").getImmediate({optional:!0});return n&&n.triggerHeartbeat(),e.container.getProvider(t)}function gt(e){return null!=e&&void 0!==e.settings}const wt=new U("app","Firebase",{"no-app":"No Firebase App '{$appName}' has been created - call initializeApp() first","bad-app-name":"Illegal App name: '{$appName}'","duplicate-app":"Firebase App named '{$appName}' already exists with different options or config","app-deleted":"Firebase App named '{$appName}' already deleted","server-app-deleted":"Firebase Server App has been deleted","no-options":"Need to provide options, when not being deployed to hosting via source.","invalid-app-argument":"firebase.{$appName}() takes either no argument or a Firebase App instance.","invalid-log-argument":"First argument to `onLog` must be null or a function.","idb-open":"Error thrown when opening IndexedDB. Original error: {$originalErrorMessage}.","idb-get":"Error thrown when reading from IndexedDB. Original error: {$originalErrorMessage}.","idb-set":"Error thrown when writing to IndexedDB. Original error: {$originalErrorMessage}.","idb-delete":"Error thrown when deleting from IndexedDB. Original error: {$originalErrorMessage}.","finalization-registry-not-supported":"FirebaseServerApp deleteOnDeref field defined but the JS runtime does not support FinalizationRegistry.","invalid-server-app-environment":"FirebaseServerApp is not for use in browser environments."});class _t{constructor(e,t,n){this._isDeleted=!1,this._options=Object.assign({},e),this._config=Object.assign({},t),this._name=t.name,this._automaticDataCollectionEnabled=t.automaticDataCollectionEnabled,this._container=n,this.container.addComponent(new re("app",(()=>this),"PUBLIC"))}get automaticDataCollectionEnabled(){return this.checkDestroyed(),this._automaticDataCollectionEnabled}set automaticDataCollectionEnabled(e){this.checkDestroyed(),this._automaticDataCollectionEnabled=e}get name(){return this.checkDestroyed(),this._name}get options(){return this.checkDestroyed(),this._options}get config(){return this.checkDestroyed(),this._config}get container(){return this._container}get isDeleted(){return this._isDeleted}set isDeleted(e){this._isDeleted=e}checkDestroyed(){if(this.isDeleted)throw wt.create("app-deleted",{appName:this._name})}}const vt="11.8.0";function yt(e,t={}){let n=e;"object"!=typeof t&&(t={name:t});const i=Object.assign({name:ct,automaticDataCollectionEnabled:!0},t),s=i.name;if("string"!=typeof s||!s)throw wt.create("bad-app-name",{appName:String(s)});if(n||(n=T()),!n)throw wt.create("no-options");const r=ut.get(s);if(r){if(K(n,r.options)&&K(i,r.config))return r;throw wt.create("duplicate-app",{appName:s})}const o=new ce(s);for(const e of ht.values())o.addComponent(e);const a=new _t(n,i,o);return ut.set(s,a),a}function bt(e=ct){const t=ut.get(e);if(!t&&e===ct&&T())return yt();if(!t)throw wt.create("no-app",{appName:e});return t}function Ct(e,t,n){var i;let s=null!==(i=lt[e])&&void 0!==i?i:e;n&&(s+=`-${n}`);const r=s.match(/\s|\//),o=t.match(/\s|\//);if(r||o){const e=[`Unable to register library "${s}" with version "${t}":`];return r&&e.push(`library name "${s}" contains illegal characters (whitespace or "/")`),r&&o&&e.push("and"),o&&e.push(`version name "${t}" contains illegal characters (whitespace or "/")`),void De.warn(e.join(" "))}mt(new re(`${s}-version`,(()=>({library:s,version:t})),"VERSION"))}const At="firebase-heartbeat-store";let kt=null;function Et(){return kt||(kt=function(e,t,{blocked:n,upgrade:i,blocking:s,terminated:r}={}){const o=indexedDB.open(e,t),a=Ee(o);return i&&o.addEventListener("upgradeneeded",(e=>{i(Ee(o.result),e.oldVersion,e.newVersion,Ee(o.transaction),e)})),n&&o.addEventListener("blocked",(e=>n(e.oldVersion,e.newVersion,e))),a.then((e=>{r&&e.addEventListener("close",(()=>r())),s&&e.addEventListener("versionchange",(e=>s(e.oldVersion,e.newVersion,e)))})).catch((()=>{})),a}("firebase-heartbeat-database",1,{upgrade:(e,t)=>{if(0===t)try{e.createObjectStore(At)}catch(e){console.warn(e)}}}).catch((e=>{throw wt.create("idb-open",{originalErrorMessage:e.message})}))),kt}async function It(e,t){try{const n=(await Et()).transaction(At,"readwrite"),i=n.objectStore(At);await i.put(t,Tt(e)),await n.done}catch(e){if(e instanceof F)De.warn(e.message);else{const t=wt.create("idb-set",{originalErrorMessage:null==e?void 0:e.message});De.warn(t.message)}}}function Tt(e){return`${e.name}!${e.options.appId}`}class St{constructor(e){this.container=e,this._heartbeatsCache=null;const t=this.container.getProvider("app").getImmediate();this._storage=new Pt(t),this._heartbeatsCachePromise=this._storage.read().then((e=>(this._heartbeatsCache=e,e)))}async triggerHeartbeat(){var e,t;try{const n=this.container.getProvider("platform-logger").getImmediate().getPlatformInfoString(),i=xt();if(null==(null===(e=this._heartbeatsCache)||void 0===e?void 0:e.heartbeats)&&(this._heartbeatsCache=await this._heartbeatsCachePromise,null==(null===(t=this._heartbeatsCache)||void 0===t?void 0:t.heartbeats)))return;if(this._heartbeatsCache.lastSentHeartbeatDate===i||this._heartbeatsCache.heartbeats.some((e=>e.date===i)))return;if(this._heartbeatsCache.heartbeats.push({date:i,agent:n}),this._heartbeatsCache.heartbeats.length>30){const e=function(e){if(0===e.length)return-1;let t=0,n=e[0].date;for(let i=1;i<e.length;i++)e[i].date<n&&(n=e[i].date,t=i);return t}(this._heartbeatsCache.heartbeats);this._heartbeatsCache.heartbeats.splice(e,1)}return this._storage.overwrite(this._heartbeatsCache)}catch(e){De.warn(e)}}async getHeartbeatsHeader(){var e;try{if(null===this._heartbeatsCache&&await this._heartbeatsCachePromise,null==(null===(e=this._heartbeatsCache)||void 0===e?void 0:e.heartbeats)||0===this._heartbeatsCache.heartbeats.length)return"";const t=xt(),{heartbeatsToSend:n,unsentEntries:i}=function(e,t=1024){const n=[];let i=e.slice();for(const s of e){const e=n.find((e=>e.agent===s.agent));if(e){if(e.dates.push(s.date),Rt(n)>t){e.dates.pop();break}}else if(n.push({agent:s.agent,dates:[s.date]}),Rt(n)>t){n.pop();break}i=i.slice(1)}return{heartbeatsToSend:n,unsentEntries:i}}(this._heartbeatsCache.heartbeats),s=b(JSON.stringify({version:2,heartbeats:n}));return this._heartbeatsCache.lastSentHeartbeatDate=t,i.length>0?(this._heartbeatsCache.heartbeats=i,await this._storage.overwrite(this._heartbeatsCache)):(this._heartbeatsCache.heartbeats=[],this._storage.overwrite(this._heartbeatsCache)),s}catch(e){return De.warn(e),""}}}function xt(){return(new Date).toISOString().substring(0,10)}class Pt{constructor(e){this.app=e,this._canUseIndexedDBPromise=this.runIndexedDBEnvironmentCheck()}async runIndexedDBEnvironmentCheck(){return!!function(){try{return"object"==typeof indexedDB}catch(e){return!1}}()&&new Promise(((e,t)=>{try{let n=!0;const i="validate-browser-context-for-indexeddb-analytics-module",s=self.indexedDB.open(i);s.onsuccess=()=>{s.result.close(),n||self.indexedDB.deleteDatabase(i),e(!0)},s.onupgradeneeded=()=>{n=!1},s.onerror=()=>{var e;t((null===(e=s.error)||void 0===e?void 0:e.message)||"")}}catch(e){t(e)}})).then((()=>!0)).catch((()=>!1))}async read(){if(await this._canUseIndexedDBPromise){const e=await async function(e){try{const t=(await Et()).transaction(At),n=await t.objectStore(At).get(Tt(e));return await t.done,n}catch(e){if(e instanceof F)De.warn(e.message);else{const t=wt.create("idb-get",{originalErrorMessage:null==e?void 0:e.message});De.warn(t.message)}}}(this.app);return(null==e?void 0:e.heartbeats)?e:{heartbeats:[]}}return{heartbeats:[]}}async overwrite(e){var t;if(await this._canUseIndexedDBPromise){const n=await this.read();return It(this.app,{lastSentHeartbeatDate:null!==(t=e.lastSentHeartbeatDate)&&void 0!==t?t:n.lastSentHeartbeatDate,heartbeats:e.heartbeats})}}async add(e){var t;if(await this._canUseIndexedDBPromise){const n=await this.read();return It(this.app,{lastSentHeartbeatDate:null!==(t=e.lastSentHeartbeatDate)&&void 0!==t?t:n.lastSentHeartbeatDate,heartbeats:[...n.heartbeats,...e.heartbeats]})}}}function Rt(e){return b(JSON.stringify({version:2,heartbeats:e})).length}mt(new re("platform-logger",(e=>new Ne(e)),"PRIVATE")),mt(new re("heartbeat",(e=>new St(e)),"PRIVATE")),Ct(Oe,Le,""),Ct(Oe,Le,"esm2017"),Ct("fire-js","");const Nt="@firebase/database",Ot="1.0.19";let Lt="";class Dt{constructor(e){this.domStorage_=e,this.prefix_="firebase:"}set(e,t){null==t?this.domStorage_.removeItem(this.prefixedName_(e)):this.domStorage_.setItem(this.prefixedName_(e),V(t))}get(e){const t=this.domStorage_.getItem(this.prefixedName_(e));return null==t?null:q(t)}remove(e){this.domStorage_.removeItem(this.prefixedName_(e))}prefixedName_(e){return this.prefix_+e}toString(){return this.domStorage_.toString()}}class Mt{constructor(){this.cache_={},this.isInMemoryStorage=!0}set(e,t){null==t?delete this.cache_[e]:this.cache_[e]=t}get(e){return $(this.cache_,e)?this.cache_[e]:null}remove(e){delete this.cache_[e]}}const Bt=function(e){try{if("undefined"!=typeof window&&void 0!==window[e]){const t=window[e];return t.setItem("firebase:sentinel","cache"),t.removeItem("firebase:sentinel"),new Dt(t)}}catch(e){}return new Mt},Ft=Bt("localStorage"),Ut=Bt("sessionStorage"),jt=new fe("@firebase/database"),qt=function(){let e=1;return function(){return e++}}(),Vt=function(e){const t=function(e){const t=[];let n=0;for(let i=0;i<e.length;i++){let s=e.charCodeAt(i);if(s>=55296&&s<=56319){const t=s-55296;i++,f(i<e.length,"Surrogate pair missing trail surrogate."),s=65536+(t<<10)+(e.charCodeAt(i)-56320)}s<128?t[n++]=s:s<2048?(t[n++]=s>>6|192,t[n++]=63&s|128):s<65536?(t[n++]=s>>12|224,t[n++]=s>>6&63|128,t[n++]=63&s|128):(t[n++]=s>>18|240,t[n++]=s>>12&63|128,t[n++]=s>>6&63|128,t[n++]=63&s|128)}return t}(e),n=new X;n.update(t);const i=n.digest();return _.encodeByteArray(i)},Ht=function(...e){let t="";for(let n=0;n<e.length;n++){const i=e[n];Array.isArray(i)||i&&"object"==typeof i&&"number"==typeof i.length?t+=Ht.apply(null,i):t+="object"==typeof i?V(i):i,t+=" "}return t};let $t=null,Wt=!0;const zt=function(e,t){f(!t||!0===e||!1===e,"Can't turn on custom loggers persistently."),!0===e?(jt.logLevel=ue.VERBOSE,$t=jt.log.bind(jt),t&&Ut.set("logging_enabled",!0)):"function"==typeof e?$t=e:($t=null,Ut.remove("logging_enabled"))},Yt=function(...e){if(!0===Wt&&(Wt=!1,null===$t&&!0===Ut.get("logging_enabled")&&zt(!0)),$t){const t=Ht.apply(null,e);$t(t)}},Kt=function(e){return function(...t){Yt(e,...t)}},Gt=function(...e){const t="FIREBASE INTERNAL ERROR: "+Ht(...e);jt.error(t)},Jt=function(...e){const t=`FIREBASE FATAL ERROR: ${Ht(...e)}`;throw jt.error(t),new Error(t)},Qt=function(...e){const t="FIREBASE WARNING: "+Ht(...e);jt.warn(t)},Zt=function(e){return"number"==typeof e&&(e!=e||e===Number.POSITIVE_INFINITY||e===Number.NEGATIVE_INFINITY)},Xt="[MIN_NAME]",en="[MAX_NAME]",tn=function(e,t){if(e===t)return 0;if(e===Xt||t===en)return-1;if(t===Xt||e===en)return 1;{const n=un(e),i=un(t);return null!==n?null!==i?n-i===0?e.length-t.length:n-i:-1:null!==i?1:e<t?-1:1}},nn=function(e,t){return e===t?0:e<t?-1:1},sn=function(e,t){if(t&&e in t)return t[e];throw new Error("Missing required key ("+e+") in object: "+V(t))},rn=function(e){if("object"!=typeof e||null===e)return V(e);const t=[];for(const n in e)t.push(n);t.sort();let n="{";for(let i=0;i<t.length;i++)0!==i&&(n+=","),n+=V(t[i]),n+=":",n+=rn(e[t[i]]);return n+="}",n},on=function(e,t){const n=e.length;if(n<=t)return[e];const i=[];for(let s=0;s<n;s+=t)s+t>n?i.push(e.substring(s,n)):i.push(e.substring(s,s+t));return i};function an(e,t){for(const n in e)e.hasOwnProperty(n)&&t(n,e[n])}const cn=function(e){f(!Zt(e),"Invalid JSON number");let t,n,i,s,r;0===e?(n=0,i=0,t=1/e==-1/0?1:0):(t=e<0,(e=Math.abs(e))>=Math.pow(2,-1022)?(s=Math.min(Math.floor(Math.log(e)/Math.LN2),1023),n=s+1023,i=Math.round(e*Math.pow(2,52-s)-Math.pow(2,52))):(n=0,i=Math.round(e/Math.pow(2,-1074))));const o=[];for(r=52;r;r-=1)o.push(i%2?1:0),i=Math.floor(i/2);for(r=11;r;r-=1)o.push(n%2?1:0),n=Math.floor(n/2);o.push(t?1:0),o.reverse();const a=o.join("");let c="";for(r=0;r<64;r+=8){let e=parseInt(a.substr(r,8),2).toString(16);1===e.length&&(e="0"+e),c+=e}return c.toLowerCase()},ln=new RegExp("^-?(0*)\\d{1,10}$"),un=function(e){if(ln.test(e)){const t=Number(e);if(t>=-2147483648&&t<=2147483647)return t}return null},dn=function(e){try{e()}catch(e){setTimeout((()=>{const t=e.stack||"";throw Qt("Exception was thrown by user callback.",t),e}),Math.floor(0))}},hn=function(e,t){const n=setTimeout(e,t);return"number"==typeof n&&"undefined"!=typeof Deno&&Deno.unrefTimer?Deno.unrefTimer(n):"object"==typeof n&&n.unref&&n.unref(),n};class pn{constructor(e,t){this.appCheckProvider=t,this.appName=e.name,gt(e)&&e.settings.appCheckToken&&(this.serverAppAppCheckToken=e.settings.appCheckToken),this.appCheck=null==t?void 0:t.getImmediate({optional:!0}),this.appCheck||null==t||t.get().then((e=>this.appCheck=e))}getToken(e){if(this.serverAppAppCheckToken){if(e)throw new Error("Attempted reuse of `FirebaseServerApp.appCheckToken` after previous usage failed.");return Promise.resolve({token:this.serverAppAppCheckToken})}return this.appCheck?this.appCheck.getToken(e):new Promise(((t,n)=>{setTimeout((()=>{this.appCheck?this.getToken(e).then(t,n):t(null)}),0)}))}addTokenChangeListener(e){var t;null===(t=this.appCheckProvider)||void 0===t||t.get().then((t=>t.addTokenListener(e)))}notifyForInvalidToken(){Qt(`Provided AppCheck credentials for the app named "${this.appName}" are invalid. This usually indicates your app was not initialized correctly.`)}}class mn{constructor(e,t,n){this.appName_=e,this.firebaseOptions_=t,this.authProvider_=n,this.auth_=null,this.auth_=n.getImmediate({optional:!0}),this.auth_||n.onInit((e=>this.auth_=e))}getToken(e){return this.auth_?this.auth_.getToken(e).catch((e=>e&&"auth/token-not-initialized"===e.code?(Yt("Got auth/token-not-initialized error.  Treating as null token."),null):Promise.reject(e))):new Promise(((t,n)=>{setTimeout((()=>{this.auth_?this.getToken(e).then(t,n):t(null)}),0)}))}addTokenChangeListener(e){this.auth_?this.auth_.addAuthTokenListener(e):this.authProvider_.get().then((t=>t.addAuthTokenListener(e)))}removeTokenChangeListener(e){this.authProvider_.get().then((t=>t.removeAuthTokenListener(e)))}notifyForInvalidToken(){let e='Provided authentication credentials for the app named "'+this.appName_+'" are invalid. This usually indicates your app was not initialized correctly. ';"credential"in this.firebaseOptions_?e+='Make sure the "credential" property provided to initializeApp() is authorized to access the specified "databaseURL" and is from the correct project.':"serviceAccount"in this.firebaseOptions_?e+='Make sure the "serviceAccount" property provided to initializeApp() is authorized to access the specified "databaseURL" and is from the correct project.':e+='Make sure the "apiKey" and "databaseURL" properties provided to initializeApp() match the values provided for your app at https://console.firebase.google.com/.',Qt(e)}}class fn{constructor(e){this.accessToken=e}getToken(e){return Promise.resolve({accessToken:this.accessToken})}addTokenChangeListener(e){e(this.accessToken)}removeTokenChangeListener(e){}notifyForInvalidToken(){}}fn.OWNER="owner";const gn="5",wn=/(console\.firebase|firebase-console-\w+\.corp|firebase\.corp)\.google\.com/,_n="ac",vn="websocket",yn="long_polling";class bn{constructor(e,t,n,i,s=!1,r="",o=!1,a=!1,c=null){this.secure=t,this.namespace=n,this.webSocketOnly=i,this.nodeAdmin=s,this.persistenceKey=r,this.includeNamespaceInQueryParams=o,this.isUsingEmulator=a,this.emulatorOptions=c,this._host=e.toLowerCase(),this._domain=this._host.substr(this._host.indexOf(".")+1),this.internalHost=Ft.get("host:"+e)||this._host}isCacheableHost(){return"s-"===this.internalHost.substr(0,2)}isCustomHost(){return"firebaseio.com"!==this._domain&&"firebaseio-demo.com"!==this._domain}get host(){return this._host}set host(e){e!==this.internalHost&&(this.internalHost=e,this.isCacheableHost()&&Ft.set("host:"+this._host,this.internalHost))}toString(){let e=this.toURLString();return this.persistenceKey&&(e+="<"+this.persistenceKey+">"),e}toURLString(){const e=this.secure?"https://":"http://",t=this.includeNamespaceInQueryParams?`?ns=${this.namespace}`:"";return`${e}${this.host}/${t}`}}function Cn(e,t,n){let i;if(f("string"==typeof t,"typeof type must == string"),f("object"==typeof n,"typeof params must == object"),t===vn)i=(e.secure?"wss://":"ws://")+e.internalHost+"/.ws?";else{if(t!==yn)throw new Error("Unknown connection type: "+t);i=(e.secure?"https://":"http://")+e.internalHost+"/.lp?"}(function(e){return e.host!==e.internalHost||e.isCustomHost()||e.includeNamespaceInQueryParams})(e)&&(n.ns=e.namespace);const s=[];return an(n,((e,t)=>{s.push(e+"="+t)})),i+s.join("&")}class An{constructor(){this.counters_={}}incrementCounter(e,t=1){$(this.counters_,e)||(this.counters_[e]=0),this.counters_[e]+=t}get(){return A(this.counters_)}}const kn={},En={};function In(e){const t=e.toString();return kn[t]||(kn[t]=new An),kn[t]}class Tn{constructor(e){this.onMessage_=e,this.pendingResponses=[],this.currentResponseNum=0,this.closeAfterResponse=-1,this.onClose=null}closeAfter(e,t){this.closeAfterResponse=e,this.onClose=t,this.closeAfterResponse<this.currentResponseNum&&(this.onClose(),this.onClose=null)}handleResponse(e,t){for(this.pendingResponses[e]=t;this.pendingResponses[this.currentResponseNum];){const e=this.pendingResponses[this.currentResponseNum];delete this.pendingResponses[this.currentResponseNum];for(let t=0;t<e.length;++t)e[t]&&dn((()=>{this.onMessage_(e[t])}));if(this.currentResponseNum===this.closeAfterResponse){this.onClose&&(this.onClose(),this.onClose=null);break}this.currentResponseNum++}}}const Sn="start";class xn{constructor(e,t,n,i,s,r,o){this.connId=e,this.repoInfo=t,this.applicationId=n,this.appCheckToken=i,this.authToken=s,this.transportSessionId=r,this.lastSessionId=o,this.bytesSent=0,this.bytesReceived=0,this.everConnected_=!1,this.log_=Kt(e),this.stats_=In(t),this.urlFn=e=>(this.appCheckToken&&(e[_n]=this.appCheckToken),Cn(t,yn,e))}open(e,t){this.curSegmentNum=0,this.onDisconnect_=t,this.myPacketOrderer=new Tn(e),this.isClosed_=!1,this.connectTimeoutTimer_=setTimeout((()=>{this.log_("Timed out trying to connect."),this.onClosed_(),this.connectTimeoutTimer_=null}),Math.floor(3e4)),function(e){if("complete"===document.readyState)e();else{let t=!1;const n=function(){document.body?t||(t=!0,e()):setTimeout(n,Math.floor(10))};document.addEventListener?(document.addEventListener("DOMContentLoaded",n,!1),window.addEventListener("load",n,!1)):document.attachEvent&&(document.attachEvent("onreadystatechange",(()=>{"complete"===document.readyState&&n()})),window.attachEvent("onload",n))}}((()=>{if(this.isClosed_)return;this.scriptTagHolder=new Pn(((...e)=>{const[t,n,i,s,r]=e;if(this.incrementIncomingBytes_(e),this.scriptTagHolder)if(this.connectTimeoutTimer_&&(clearTimeout(this.connectTimeoutTimer_),this.connectTimeoutTimer_=null),this.everConnected_=!0,t===Sn)this.id=n,this.password=i;else{if("close"!==t)throw new Error("Unrecognized command received: "+t);n?(this.scriptTagHolder.sendNewPolls=!1,this.myPacketOrderer.closeAfter(n,(()=>{this.onClosed_()}))):this.onClosed_()}}),((...e)=>{const[t,n]=e;this.incrementIncomingBytes_(e),this.myPacketOrderer.handleResponse(t,n)}),(()=>{this.onClosed_()}),this.urlFn);const e={};e[Sn]="t",e.ser=Math.floor(1e8*Math.random()),this.scriptTagHolder.uniqueCallbackIdentifier&&(e.cb=this.scriptTagHolder.uniqueCallbackIdentifier),e.v=gn,this.transportSessionId&&(e.s=this.transportSessionId),this.lastSessionId&&(e.ls=this.lastSessionId),this.applicationId&&(e.p=this.applicationId),this.appCheckToken&&(e[_n]=this.appCheckToken),"undefined"!=typeof location&&location.hostname&&wn.test(location.hostname)&&(e.r="f");const t=this.urlFn(e);this.log_("Connecting via long-poll to "+t),this.scriptTagHolder.addTag(t,(()=>{}))}))}start(){this.scriptTagHolder.startLongPoll(this.id,this.password),this.addDisconnectPingFrame(this.id,this.password)}static forceAllow(){xn.forceAllow_=!0}static forceDisallow(){xn.forceDisallow_=!0}static isAvailable(){return!(!xn.forceAllow_&&(xn.forceDisallow_||"undefined"==typeof document||null==document.createElement||"object"==typeof window&&window.chrome&&window.chrome.extension&&!/^chrome/.test(window.location.href)||"object"==typeof Windows&&"object"==typeof Windows.UI))}markConnectionHealthy(){}shutdown_(){this.isClosed_=!0,this.scriptTagHolder&&(this.scriptTagHolder.close(),this.scriptTagHolder=null),this.myDisconnFrame&&(document.body.removeChild(this.myDisconnFrame),this.myDisconnFrame=null),this.connectTimeoutTimer_&&(clearTimeout(this.connectTimeoutTimer_),this.connectTimeoutTimer_=null)}onClosed_(){this.isClosed_||(this.log_("Longpoll is closing itself"),this.shutdown_(),this.onDisconnect_&&(this.onDisconnect_(this.everConnected_),this.onDisconnect_=null))}close(){this.isClosed_||(this.log_("Longpoll is being closed."),this.shutdown_())}send(e){const t=V(e);this.bytesSent+=t.length,this.stats_.incrementCounter("bytes_sent",t.length);const n=y(t),i=on(n,1840);for(let e=0;e<i.length;e++)this.scriptTagHolder.enqueueSegment(this.curSegmentNum,i.length,i[e]),this.curSegmentNum++}addDisconnectPingFrame(e,t){this.myDisconnFrame=document.createElement("iframe");const n={dframe:"t"};n.id=e,n.pw=t,this.myDisconnFrame.src=this.urlFn(n),this.myDisconnFrame.style.display="none",document.body.appendChild(this.myDisconnFrame)}incrementIncomingBytes_(e){const t=V(e).length;this.bytesReceived+=t,this.stats_.incrementCounter("bytes_received",t)}}class Pn{constructor(e,t,n,i){this.onDisconnect=n,this.urlFn=i,this.outstandingRequests=new Set,this.pendingSegs=[],this.currentSerial=Math.floor(1e8*Math.random()),this.sendNewPolls=!0;{this.uniqueCallbackIdentifier=qt(),window["pLPCommand"+this.uniqueCallbackIdentifier]=e,window["pRTLPCB"+this.uniqueCallbackIdentifier]=t,this.myIFrame=Pn.createIFrame_();let n="";this.myIFrame.src&&"javascript:"===this.myIFrame.src.substr(0,11)&&(n='<script>document.domain="'+document.domain+'";<\/script>');const i="<html><body>"+n+"</body></html>";try{this.myIFrame.doc.open(),this.myIFrame.doc.write(i),this.myIFrame.doc.close()}catch(e){Yt("frame writing exception"),e.stack&&Yt(e.stack),Yt(e)}}}static createIFrame_(){const e=document.createElement("iframe");if(e.style.display="none",!document.body)throw"Document body has not initialized. Wait to initialize Firebase until after the document is ready.";document.body.appendChild(e);try{e.contentWindow.document||Yt("No IE domain setting required")}catch(t){const n=document.domain;e.src="javascript:void((function(){document.open();document.domain='"+n+"';document.close();})())"}return e.contentDocument?e.doc=e.contentDocument:e.contentWindow?e.doc=e.contentWindow.document:e.document&&(e.doc=e.document),e}close(){this.alive=!1,this.myIFrame&&(this.myIFrame.doc.body.textContent="",setTimeout((()=>{null!==this.myIFrame&&(document.body.removeChild(this.myIFrame),this.myIFrame=null)}),Math.floor(0)));const e=this.onDisconnect;e&&(this.onDisconnect=null,e())}startLongPoll(e,t){for(this.myID=e,this.myPW=t,this.alive=!0;this.newRequest_(););}newRequest_(){if(this.alive&&this.sendNewPolls&&this.outstandingRequests.size<(this.pendingSegs.length>0?2:1)){this.currentSerial++;const e={};e.id=this.myID,e.pw=this.myPW,e.ser=this.currentSerial;let t=this.urlFn(e),n="",i=0;for(;this.pendingSegs.length>0&&this.pendingSegs[0].d.length+30+n.length<=1870;){const e=this.pendingSegs.shift();n=n+"&seg"+i+"="+e.seg+"&ts"+i+"="+e.ts+"&d"+i+"="+e.d,i++}return t+=n,this.addLongPollTag_(t,this.currentSerial),!0}return!1}enqueueSegment(e,t,n){this.pendingSegs.push({seg:e,ts:t,d:n}),this.alive&&this.newRequest_()}addLongPollTag_(e,t){this.outstandingRequests.add(t);const n=()=>{this.outstandingRequests.delete(t),this.newRequest_()},i=setTimeout(n,Math.floor(25e3));this.addTag(e,(()=>{clearTimeout(i),n()}))}addTag(e,t){setTimeout((()=>{try{if(!this.sendNewPolls)return;const n=this.myIFrame.doc.createElement("script");n.type="text/javascript",n.async=!0,n.src=e,n.onload=n.onreadystatechange=function(){const e=n.readyState;e&&"loaded"!==e&&"complete"!==e||(n.onload=n.onreadystatechange=null,n.parentNode&&n.parentNode.removeChild(n),t())},n.onerror=()=>{Yt("Long-poll script failed to load: "+e),this.sendNewPolls=!1,this.close()},this.myIFrame.doc.body.appendChild(n)}catch(e){}}),Math.floor(1))}}let Rn=null;"undefined"!=typeof MozWebSocket?Rn=MozWebSocket:"undefined"!=typeof WebSocket&&(Rn=WebSocket);class Nn{constructor(e,t,n,i,s,r,o){this.connId=e,this.applicationId=n,this.appCheckToken=i,this.authToken=s,this.keepaliveTimer=null,this.frames=null,this.totalFrames=0,this.bytesSent=0,this.bytesReceived=0,this.log_=Kt(this.connId),this.stats_=In(t),this.connURL=Nn.connectionURL_(t,r,o,i,n),this.nodeAdmin=t.nodeAdmin}static connectionURL_(e,t,n,i,s){const r={};return r.v=gn,"undefined"!=typeof location&&location.hostname&&wn.test(location.hostname)&&(r.r="f"),t&&(r.s=t),n&&(r.ls=n),i&&(r[_n]=i),s&&(r.p=s),Cn(e,vn,r)}open(e,t){this.onDisconnect=t,this.onMessage=e,this.log_("Websocket connecting to "+this.connURL),this.everConnected_=!1,Ft.set("previous_websocket_failure",!0);try{let e;0,this.mySock=new Rn(this.connURL,[],e)}catch(e){this.log_("Error instantiating WebSocket.");const t=e.message||e.data;return t&&this.log_(t),void this.onClosed_()}this.mySock.onopen=()=>{this.log_("Websocket connected."),this.everConnected_=!0},this.mySock.onclose=()=>{this.log_("Websocket connection was disconnected."),this.mySock=null,this.onClosed_()},this.mySock.onmessage=e=>{this.handleIncomingFrame(e)},this.mySock.onerror=e=>{this.log_("WebSocket error.  Closing connection.");const t=e.message||e.data;t&&this.log_(t),this.onClosed_()}}start(){}static forceDisallow(){Nn.forceDisallow_=!0}static isAvailable(){let e=!1;if("undefined"!=typeof navigator&&navigator.userAgent){const t=/Android ([0-9]{0,}\.[0-9]{0,})/,n=navigator.userAgent.match(t);n&&n.length>1&&parseFloat(n[1])<4.4&&(e=!0)}return!e&&null!==Rn&&!Nn.forceDisallow_}static previouslyFailed(){return Ft.isInMemoryStorage||!0===Ft.get("previous_websocket_failure")}markConnectionHealthy(){Ft.remove("previous_websocket_failure")}appendFrame_(e){if(this.frames.push(e),this.frames.length===this.totalFrames){const e=this.frames.join("");this.frames=null;const t=q(e);this.onMessage(t)}}handleNewFrameCount_(e){this.totalFrames=e,this.frames=[]}extractFrameCount_(e){if(f(null===this.frames,"We already have a frame buffer"),e.length<=6){const t=Number(e);if(!isNaN(t))return this.handleNewFrameCount_(t),null}return this.handleNewFrameCount_(1),e}handleIncomingFrame(e){if(null===this.mySock)return;const t=e.data;if(this.bytesReceived+=t.length,this.stats_.incrementCounter("bytes_received",t.length),this.resetKeepAlive(),null!==this.frames)this.appendFrame_(t);else{const e=this.extractFrameCount_(t);null!==e&&this.appendFrame_(e)}}send(e){this.resetKeepAlive();const t=V(e);this.bytesSent+=t.length,this.stats_.incrementCounter("bytes_sent",t.length);const n=on(t,16384);n.length>1&&this.sendString_(String(n.length));for(let e=0;e<n.length;e++)this.sendString_(n[e])}shutdown_(){this.isClosed_=!0,this.keepaliveTimer&&(clearInterval(this.keepaliveTimer),this.keepaliveTimer=null),this.mySock&&(this.mySock.close(),this.mySock=null)}onClosed_(){this.isClosed_||(this.log_("WebSocket is closing itself"),this.shutdown_(),this.onDisconnect&&(this.onDisconnect(this.everConnected_),this.onDisconnect=null))}close(){this.isClosed_||(this.log_("WebSocket is being closed"),this.shutdown_())}resetKeepAlive(){clearInterval(this.keepaliveTimer),this.keepaliveTimer=setInterval((()=>{this.mySock&&this.sendString_("0"),this.resetKeepAlive()}),Math.floor(45e3))}sendString_(e){try{this.mySock.send(e)}catch(e){this.log_("Exception thrown from WebSocket.send():",e.message||e.data,"Closing connection."),setTimeout(this.onClosed_.bind(this),0)}}}Nn.responsesRequiredToBeHealthy=2,Nn.healthyTimeout=3e4;class On{static get ALL_TRANSPORTS(){return[xn,Nn]}static get IS_TRANSPORT_INITIALIZED(){return this.globalTransportInitialized_}constructor(e){this.initTransports_(e)}initTransports_(e){const t=Nn&&Nn.isAvailable();let n=t&&!Nn.previouslyFailed();if(e.webSocketOnly&&(t||Qt("wss:// URL used, but browser isn't known to support websockets.  Trying anyway."),n=!0),n)this.transports_=[Nn];else{const e=this.transports_=[];for(const t of On.ALL_TRANSPORTS)t&&t.isAvailable()&&e.push(t);On.globalTransportInitialized_=!0}}initialTransport(){if(this.transports_.length>0)return this.transports_[0];throw new Error("No transports available")}upgradeTransport(){return this.transports_.length>1?this.transports_[1]:null}}On.globalTransportInitialized_=!1;class Ln{constructor(e,t,n,i,s,r,o,a,c,l){this.id=e,this.repoInfo_=t,this.applicationId_=n,this.appCheckToken_=i,this.authToken_=s,this.onMessage_=r,this.onReady_=o,this.onDisconnect_=a,this.onKill_=c,this.lastSessionId=l,this.connectionCount=0,this.pendingDataMessages=[],this.state_=0,this.log_=Kt("c:"+this.id+":"),this.transportManager_=new On(t),this.log_("Connection created"),this.start_()}start_(){const e=this.transportManager_.initialTransport();this.conn_=new e(this.nextTransportId_(),this.repoInfo_,this.applicationId_,this.appCheckToken_,this.authToken_,null,this.lastSessionId),this.primaryResponsesRequired_=e.responsesRequiredToBeHealthy||0;const t=this.connReceiver_(this.conn_),n=this.disconnReceiver_(this.conn_);this.tx_=this.conn_,this.rx_=this.conn_,this.secondaryConn_=null,this.isHealthy_=!1,setTimeout((()=>{this.conn_&&this.conn_.open(t,n)}),Math.floor(0));const i=e.healthyTimeout||0;i>0&&(this.healthyTimeout_=hn((()=>{this.healthyTimeout_=null,this.isHealthy_||(this.conn_&&this.conn_.bytesReceived>102400?(this.log_("Connection exceeded healthy timeout but has received "+this.conn_.bytesReceived+" bytes.  Marking connection healthy."),this.isHealthy_=!0,this.conn_.markConnectionHealthy()):this.conn_&&this.conn_.bytesSent>10240?this.log_("Connection exceeded healthy timeout but has sent "+this.conn_.bytesSent+" bytes.  Leaving connection alive."):(this.log_("Closing unhealthy connection after timeout."),this.close()))}),Math.floor(i)))}nextTransportId_(){return"c:"+this.id+":"+this.connectionCount++}disconnReceiver_(e){return t=>{e===this.conn_?this.onConnectionLost_(t):e===this.secondaryConn_?(this.log_("Secondary connection lost."),this.onSecondaryConnectionLost_()):this.log_("closing an old connection")}}connReceiver_(e){return t=>{2!==this.state_&&(e===this.rx_?this.onPrimaryMessageReceived_(t):e===this.secondaryConn_?this.onSecondaryMessageReceived_(t):this.log_("message on old connection"))}}sendRequest(e){const t={t:"d",d:e};this.sendData_(t)}tryCleanupConnection(){this.tx_===this.secondaryConn_&&this.rx_===this.secondaryConn_&&(this.log_("cleaning up and promoting a connection: "+this.secondaryConn_.connId),this.conn_=this.secondaryConn_,this.secondaryConn_=null)}onSecondaryControl_(e){if("t"in e){const t=e.t;"a"===t?this.upgradeIfSecondaryHealthy_():"r"===t?(this.log_("Got a reset on secondary, closing it"),this.secondaryConn_.close(),this.tx_!==this.secondaryConn_&&this.rx_!==this.secondaryConn_||this.close()):"o"===t&&(this.log_("got pong on secondary."),this.secondaryResponsesRequired_--,this.upgradeIfSecondaryHealthy_())}}onSecondaryMessageReceived_(e){const t=sn("t",e),n=sn("d",e);if("c"===t)this.onSecondaryControl_(n);else{if("d"!==t)throw new Error("Unknown protocol layer: "+t);this.pendingDataMessages.push(n)}}upgradeIfSecondaryHealthy_(){this.secondaryResponsesRequired_<=0?(this.log_("Secondary connection is healthy."),this.isHealthy_=!0,this.secondaryConn_.markConnectionHealthy(),this.proceedWithUpgrade_()):(this.log_("sending ping on secondary."),this.secondaryConn_.send({t:"c",d:{t:"p",d:{}}}))}proceedWithUpgrade_(){this.secondaryConn_.start(),this.log_("sending client ack on secondary"),this.secondaryConn_.send({t:"c",d:{t:"a",d:{}}}),this.log_("Ending transmission on primary"),this.conn_.send({t:"c",d:{t:"n",d:{}}}),this.tx_=this.secondaryConn_,this.tryCleanupConnection()}onPrimaryMessageReceived_(e){const t=sn("t",e),n=sn("d",e);"c"===t?this.onControl_(n):"d"===t&&this.onDataMessage_(n)}onDataMessage_(e){this.onPrimaryResponse_(),this.onMessage_(e)}onPrimaryResponse_(){this.isHealthy_||(this.primaryResponsesRequired_--,this.primaryResponsesRequired_<=0&&(this.log_("Primary connection is healthy."),this.isHealthy_=!0,this.conn_.markConnectionHealthy()))}onControl_(e){const t=sn("t",e);if("d"in e){const n=e.d;if("h"===t){const e=Object.assign({},n);this.repoInfo_.isUsingEmulator&&(e.h=this.repoInfo_.host),this.onHandshake_(e)}else if("n"===t){this.log_("recvd end transmission on primary"),this.rx_=this.secondaryConn_;for(let e=0;e<this.pendingDataMessages.length;++e)this.onDataMessage_(this.pendingDataMessages[e]);this.pendingDataMessages=[],this.tryCleanupConnection()}else"s"===t?this.onConnectionShutdown_(n):"r"===t?this.onReset_(n):"e"===t?Gt("Server Error: "+n):"o"===t?(this.log_("got pong on primary."),this.onPrimaryResponse_(),this.sendPingOnPrimaryIfNecessary_()):Gt("Unknown control packet command: "+t)}}onHandshake_(e){const t=e.ts,n=e.v,i=e.h;this.sessionId=e.s,this.repoInfo_.host=i,0===this.state_&&(this.conn_.start(),this.onConnectionEstablished_(this.conn_,t),gn!==n&&Qt("Protocol version mismatch detected"),this.tryStartUpgrade_())}tryStartUpgrade_(){const e=this.transportManager_.upgradeTransport();e&&this.startUpgrade_(e)}startUpgrade_(e){this.secondaryConn_=new e(this.nextTransportId_(),this.repoInfo_,this.applicationId_,this.appCheckToken_,this.authToken_,this.sessionId),this.secondaryResponsesRequired_=e.responsesRequiredToBeHealthy||0;const t=this.connReceiver_(this.secondaryConn_),n=this.disconnReceiver_(this.secondaryConn_);this.secondaryConn_.open(t,n),hn((()=>{this.secondaryConn_&&(this.log_("Timed out trying to upgrade."),this.secondaryConn_.close())}),Math.floor(6e4))}onReset_(e){this.log_("Reset packet received.  New host: "+e),this.repoInfo_.host=e,1===this.state_?this.close():(this.closeConnections_(),this.start_())}onConnectionEstablished_(e,t){this.log_("Realtime connection established."),this.conn_=e,this.state_=1,this.onReady_&&(this.onReady_(t,this.sessionId),this.onReady_=null),0===this.primaryResponsesRequired_?(this.log_("Primary connection is healthy."),this.isHealthy_=!0):hn((()=>{this.sendPingOnPrimaryIfNecessary_()}),Math.floor(5e3))}sendPingOnPrimaryIfNecessary_(){this.isHealthy_||1!==this.state_||(this.log_("sending ping on primary."),this.sendData_({t:"c",d:{t:"p",d:{}}}))}onSecondaryConnectionLost_(){const e=this.secondaryConn_;this.secondaryConn_=null,this.tx_!==e&&this.rx_!==e||this.close()}onConnectionLost_(e){this.conn_=null,e||0!==this.state_?1===this.state_&&this.log_("Realtime connection lost."):(this.log_("Realtime connection failed."),this.repoInfo_.isCacheableHost()&&(Ft.remove("host:"+this.repoInfo_.host),this.repoInfo_.internalHost=this.repoInfo_.host)),this.close()}onConnectionShutdown_(e){this.log_("Connection shutdown command received. Shutting down..."),this.onKill_&&(this.onKill_(e),this.onKill_=null),this.onDisconnect_=null,this.close()}sendData_(e){if(1!==this.state_)throw"Connection is not connected";this.tx_.send(e)}close(){2!==this.state_&&(this.log_("Closing realtime connection."),this.state_=2,this.closeConnections_(),this.onDisconnect_&&(this.onDisconnect_(),this.onDisconnect_=null))}closeConnections_(){this.log_("Shutting down all connections"),this.conn_&&(this.conn_.close(),this.conn_=null),this.secondaryConn_&&(this.secondaryConn_.close(),this.secondaryConn_=null),this.healthyTimeout_&&(clearTimeout(this.healthyTimeout_),this.healthyTimeout_=null)}}class Dn{put(e,t,n,i){}merge(e,t,n,i){}refreshAuthToken(e){}refreshAppCheckToken(e){}onDisconnectPut(e,t,n){}onDisconnectMerge(e,t,n){}onDisconnectCancel(e,t){}reportStats(e){}}class Mn{constructor(e){this.allowedEvents_=e,this.listeners_={},f(Array.isArray(e)&&e.length>0,"Requires a non-empty array")}trigger(e,...t){if(Array.isArray(this.listeners_[e])){const n=[...this.listeners_[e]];for(let e=0;e<n.length;e++)n[e].callback.apply(n[e].context,t)}}on(e,t,n){this.validateEventType_(e),this.listeners_[e]=this.listeners_[e]||[],this.listeners_[e].push({callback:t,context:n});const i=this.getInitialEvent(e);i&&t.apply(n,i)}off(e,t,n){this.validateEventType_(e);const i=this.listeners_[e]||[];for(let e=0;e<i.length;e++)if(i[e].callback===t&&(!n||n===i[e].context))return void i.splice(e,1)}validateEventType_(e){f(this.allowedEvents_.find((t=>t===e)),"Unknown event: "+e)}}class Bn extends Mn{static getInstance(){return new Bn}constructor(){super(["online"]),this.online_=!0,"undefined"==typeof window||void 0===window.addEventListener||M()||(window.addEventListener("online",(()=>{this.online_||(this.online_=!0,this.trigger("online",!0))}),!1),window.addEventListener("offline",(()=>{this.online_&&(this.online_=!1,this.trigger("online",!1))}),!1))}getInitialEvent(e){return f("online"===e,"Unknown event type: "+e),[this.online_]}currentlyOnline(){return this.online_}}class Fn{constructor(e,t){if(void 0===t){this.pieces_=e.split("/");let t=0;for(let e=0;e<this.pieces_.length;e++)this.pieces_[e].length>0&&(this.pieces_[t]=this.pieces_[e],t++);this.pieces_.length=t,this.pieceNum_=0}else this.pieces_=e,this.pieceNum_=t}toString(){let e="";for(let t=this.pieceNum_;t<this.pieces_.length;t++)""!==this.pieces_[t]&&(e+="/"+this.pieces_[t]);return e||"/"}}function Un(){return new Fn("")}function jn(e){return e.pieceNum_>=e.pieces_.length?null:e.pieces_[e.pieceNum_]}function qn(e){return e.pieces_.length-e.pieceNum_}function Vn(e){let t=e.pieceNum_;return t<e.pieces_.length&&t++,new Fn(e.pieces_,t)}function Hn(e){return e.pieceNum_<e.pieces_.length?e.pieces_[e.pieces_.length-1]:null}function $n(e,t=0){return e.pieces_.slice(e.pieceNum_+t)}function Wn(e){if(e.pieceNum_>=e.pieces_.length)return null;const t=[];for(let n=e.pieceNum_;n<e.pieces_.length-1;n++)t.push(e.pieces_[n]);return new Fn(t,0)}function zn(e,t){const n=[];for(let t=e.pieceNum_;t<e.pieces_.length;t++)n.push(e.pieces_[t]);if(t instanceof Fn)for(let e=t.pieceNum_;e<t.pieces_.length;e++)n.push(t.pieces_[e]);else{const e=t.split("/");for(let t=0;t<e.length;t++)e[t].length>0&&n.push(e[t])}return new Fn(n,0)}function Yn(e){return e.pieceNum_>=e.pieces_.length}function Kn(e,t){const n=jn(e),i=jn(t);if(null===n)return t;if(n===i)return Kn(Vn(e),Vn(t));throw new Error("INTERNAL ERROR: innerPath ("+t+") is not within outerPath ("+e+")")}function Gn(e,t){if(qn(e)!==qn(t))return!1;for(let n=e.pieceNum_,i=t.pieceNum_;n<=e.pieces_.length;n++,i++)if(e.pieces_[n]!==t.pieces_[i])return!1;return!0}function Jn(e,t){let n=e.pieceNum_,i=t.pieceNum_;if(qn(e)>qn(t))return!1;for(;n<e.pieces_.length;){if(e.pieces_[n]!==t.pieces_[i])return!1;++n,++i}return!0}class Qn{constructor(e,t){this.errorPrefix_=t,this.parts_=$n(e,0),this.byteLength_=Math.max(1,this.parts_.length);for(let e=0;e<this.parts_.length;e++)this.byteLength_+=ie(this.parts_[e]);Zn(this)}}function Zn(e){if(e.byteLength_>768)throw new Error(e.errorPrefix_+"has a key path longer than 768 bytes ("+e.byteLength_+").");if(e.parts_.length>32)throw new Error(e.errorPrefix_+"path specified exceeds the maximum depth that can be written (32) or object contains a cycle "+Xn(e))}function Xn(e){return 0===e.parts_.length?"":"in property '"+e.parts_.join(".")+"'"}class ei extends Mn{static getInstance(){return new ei}constructor(){let e,t;super(["visible"]),"undefined"!=typeof document&&void 0!==document.addEventListener&&(void 0!==document.hidden?(t="visibilitychange",e="hidden"):void 0!==document.mozHidden?(t="mozvisibilitychange",e="mozHidden"):void 0!==document.msHidden?(t="msvisibilitychange",e="msHidden"):void 0!==document.webkitHidden&&(t="webkitvisibilitychange",e="webkitHidden")),this.visible_=!0,t&&document.addEventListener(t,(()=>{const t=!document[e];t!==this.visible_&&(this.visible_=t,this.trigger("visible",t))}),!1)}getInitialEvent(e){return f("visible"===e,"Unknown event type: "+e),[this.visible_]}}const ti=1e3;class ni extends Dn{constructor(e,t,n,i,s,r,o,a){if(super(),this.repoInfo_=e,this.applicationId_=t,this.onDataUpdate_=n,this.onConnectStatus_=i,this.onServerInfoUpdate_=s,this.authTokenProvider_=r,this.appCheckTokenProvider_=o,this.authOverride_=a,this.id=ni.nextPersistentConnectionId_++,this.log_=Kt("p:"+this.id+":"),this.interruptReasons_={},this.listens=new Map,this.outstandingPuts_=[],this.outstandingGets_=[],this.outstandingPutCount_=0,this.outstandingGetCount_=0,this.onDisconnectRequestQueue_=[],this.connected_=!1,this.reconnectDelay_=ti,this.maxReconnectDelay_=3e5,this.securityDebugCallback_=null,this.lastSessionId=null,this.establishConnectionTimer_=null,this.visible_=!1,this.requestCBHash_={},this.requestNumber_=0,this.realtime_=null,this.authToken_=null,this.appCheckToken_=null,this.forceTokenRefresh_=!1,this.invalidAuthTokenCount_=0,this.invalidAppCheckTokenCount_=0,this.firstConnection_=!0,this.lastConnectionAttemptTime_=null,this.lastConnectionEstablishedTime_=null,a)throw new Error("Auth override specified in options, but not supported on non Node.js platforms");ei.getInstance().on("visible",this.onVisible_,this),-1===e.host.indexOf("fblocal")&&Bn.getInstance().on("online",this.onOnline_,this)}sendRequest(e,t,n){const i=++this.requestNumber_,s={r:i,a:e,b:t};this.log_(V(s)),f(this.connected_,"sendRequest call when we're not connected not allowed."),this.realtime_.sendRequest(s),n&&(this.requestCBHash_[i]=n)}get(e){this.initConnection_();const t=new x,n={action:"g",request:{p:e._path.toString(),q:e._queryObject},onComplete:e=>{const n=e.d;"ok"===e.s?t.resolve(n):t.reject(n)}};this.outstandingGets_.push(n),this.outstandingGetCount_++;const i=this.outstandingGets_.length-1;return this.connected_&&this.sendGet_(i),t.promise}listen(e,t,n,i){this.initConnection_();const s=e._queryIdentifier,r=e._path.toString();this.log_("Listen called for "+r+" "+s),this.listens.has(r)||this.listens.set(r,new Map),f(e._queryParams.isDefault()||!e._queryParams.loadsAllData(),"listen() called for non-default but complete query"),f(!this.listens.get(r).has(s),"listen() called twice for same path/queryId.");const o={onComplete:i,hashFn:t,query:e,tag:n};this.listens.get(r).set(s,o),this.connected_&&this.sendListen_(o)}sendGet_(e){const t=this.outstandingGets_[e];this.sendRequest("g",t.request,(n=>{delete this.outstandingGets_[e],this.outstandingGetCount_--,0===this.outstandingGetCount_&&(this.outstandingGets_=[]),t.onComplete&&t.onComplete(n)}))}sendListen_(e){const t=e.query,n=t._path.toString(),i=t._queryIdentifier;this.log_("Listen on "+n+" for "+i);const s={p:n};e.tag&&(s.q=t._queryObject,s.t=e.tag),s.h=e.hashFn(),this.sendRequest("q",s,(s=>{const r=s.d,o=s.s;ni.warnOnListenWarnings_(r,t),(this.listens.get(n)&&this.listens.get(n).get(i))===e&&(this.log_("listen response",s),"ok"!==o&&this.removeListen_(n,i),e.onComplete&&e.onComplete(o,r))}))}static warnOnListenWarnings_(e,t){if(e&&"object"==typeof e&&$(e,"w")){const n=W(e,"w");if(Array.isArray(n)&&~n.indexOf("no_index")){const e='".indexOn": "'+t._queryParams.getIndex().toString()+'"',n=t._path.toString();Qt(`Using an unspecified index. Your data will be downloaded and filtered on the client. Consider adding ${e} at ${n} to your security rules for better performance.`)}}}refreshAuthToken(e){this.authToken_=e,this.log_("Auth token refreshed"),this.authToken_?this.tryAuth():this.connected_&&this.sendRequest("unauth",{},(()=>{})),this.reduceReconnectDelayIfAdminCredential_(e)}reduceReconnectDelayIfAdminCredential_(e){(e&&40===e.length||function(e){const t=H(e).claims;return"object"==typeof t&&!0===t.admin}(e))&&(this.log_("Admin auth credential detected.  Reducing max reconnect time."),this.maxReconnectDelay_=3e4)}refreshAppCheckToken(e){this.appCheckToken_=e,this.log_("App check token refreshed"),this.appCheckToken_?this.tryAppCheck():this.connected_&&this.sendRequest("unappeck",{},(()=>{}))}tryAuth(){if(this.connected_&&this.authToken_){const e=this.authToken_,t=function(e){const t=H(e).claims;return!!t&&"object"==typeof t&&t.hasOwnProperty("iat")}(e)?"auth":"gauth",n={cred:e};null===this.authOverride_?n.noauth=!0:"object"==typeof this.authOverride_&&(n.authvar=this.authOverride_),this.sendRequest(t,n,(t=>{const n=t.s,i=t.d||"error";this.authToken_===e&&("ok"===n?this.invalidAuthTokenCount_=0:this.onAuthRevoked_(n,i))}))}}tryAppCheck(){this.connected_&&this.appCheckToken_&&this.sendRequest("appcheck",{token:this.appCheckToken_},(e=>{const t=e.s,n=e.d||"error";"ok"===t?this.invalidAppCheckTokenCount_=0:this.onAppCheckRevoked_(t,n)}))}unlisten(e,t){const n=e._path.toString(),i=e._queryIdentifier;this.log_("Unlisten called for "+n+" "+i),f(e._queryParams.isDefault()||!e._queryParams.loadsAllData(),"unlisten() called for non-default but complete query"),this.removeListen_(n,i)&&this.connected_&&this.sendUnlisten_(n,i,e._queryObject,t)}sendUnlisten_(e,t,n,i){this.log_("Unlisten on "+e+" for "+t);const s={p:e};i&&(s.q=n,s.t=i),this.sendRequest("n",s)}onDisconnectPut(e,t,n){this.initConnection_(),this.connected_?this.sendOnDisconnect_("o",e,t,n):this.onDisconnectRequestQueue_.push({pathString:e,action:"o",data:t,onComplete:n})}onDisconnectMerge(e,t,n){this.initConnection_(),this.connected_?this.sendOnDisconnect_("om",e,t,n):this.onDisconnectRequestQueue_.push({pathString:e,action:"om",data:t,onComplete:n})}onDisconnectCancel(e,t){this.initConnection_(),this.connected_?this.sendOnDisconnect_("oc",e,null,t):this.onDisconnectRequestQueue_.push({pathString:e,action:"oc",data:null,onComplete:t})}sendOnDisconnect_(e,t,n,i){const s={p:t,d:n};this.log_("onDisconnect "+e,s),this.sendRequest(e,s,(e=>{i&&setTimeout((()=>{i(e.s,e.d)}),Math.floor(0))}))}put(e,t,n,i){this.putInternal("p",e,t,n,i)}merge(e,t,n,i){this.putInternal("m",e,t,n,i)}putInternal(e,t,n,i,s){this.initConnection_();const r={p:t,d:n};void 0!==s&&(r.h=s),this.outstandingPuts_.push({action:e,request:r,onComplete:i}),this.outstandingPutCount_++;const o=this.outstandingPuts_.length-1;this.connected_?this.sendPut_(o):this.log_("Buffering put: "+t)}sendPut_(e){const t=this.outstandingPuts_[e].action,n=this.outstandingPuts_[e].request,i=this.outstandingPuts_[e].onComplete;this.outstandingPuts_[e].queued=this.connected_,this.sendRequest(t,n,(n=>{this.log_(t+" response",n),delete this.outstandingPuts_[e],this.outstandingPutCount_--,0===this.outstandingPutCount_&&(this.outstandingPuts_=[]),i&&i(n.s,n.d)}))}reportStats(e){if(this.connected_){const t={c:e};this.log_("reportStats",t),this.sendRequest("s",t,(e=>{if("ok"!==e.s){const t=e.d;this.log_("reportStats","Error sending stats: "+t)}}))}}onDataMessage_(e){if("r"in e){this.log_("from server: "+V(e));const t=e.r,n=this.requestCBHash_[t];n&&(delete this.requestCBHash_[t],n(e.b))}else{if("error"in e)throw"A server-side error has occurred: "+e.error;"a"in e&&this.onDataPush_(e.a,e.b)}}onDataPush_(e,t){this.log_("handleServerMessage",e,t),"d"===e?this.onDataUpdate_(t.p,t.d,!1,t.t):"m"===e?this.onDataUpdate_(t.p,t.d,!0,t.t):"c"===e?this.onListenRevoked_(t.p,t.q):"ac"===e?this.onAuthRevoked_(t.s,t.d):"apc"===e?this.onAppCheckRevoked_(t.s,t.d):"sd"===e?this.onSecurityDebugPacket_(t):Gt("Unrecognized action received from server: "+V(e)+"\nAre you using the latest client?")}onReady_(e,t){this.log_("connection ready"),this.connected_=!0,this.lastConnectionEstablishedTime_=(new Date).getTime(),this.handleTimestamp_(e),this.lastSessionId=t,this.firstConnection_&&this.sendConnectStats_(),this.restoreState_(),this.firstConnection_=!1,this.onConnectStatus_(!0)}scheduleConnect_(e){f(!this.realtime_,"Scheduling a connect when we're already connected/ing?"),this.establishConnectionTimer_&&clearTimeout(this.establishConnectionTimer_),this.establishConnectionTimer_=setTimeout((()=>{this.establishConnectionTimer_=null,this.establishConnection_()}),Math.floor(e))}initConnection_(){!this.realtime_&&this.firstConnection_&&this.scheduleConnect_(0)}onVisible_(e){e&&!this.visible_&&this.reconnectDelay_===this.maxReconnectDelay_&&(this.log_("Window became visible.  Reducing delay."),this.reconnectDelay_=ti,this.realtime_||this.scheduleConnect_(0)),this.visible_=e}onOnline_(e){e?(this.log_("Browser went online."),this.reconnectDelay_=ti,this.realtime_||this.scheduleConnect_(0)):(this.log_("Browser went offline.  Killing connection."),this.realtime_&&this.realtime_.close())}onRealtimeDisconnect_(){if(this.log_("data client disconnected"),this.connected_=!1,this.realtime_=null,this.cancelSentTransactions_(),this.requestCBHash_={},this.shouldReconnect_()){this.visible_?this.lastConnectionEstablishedTime_&&((new Date).getTime()-this.lastConnectionEstablishedTime_>3e4&&(this.reconnectDelay_=ti),this.lastConnectionEstablishedTime_=null):(this.log_("Window isn't visible.  Delaying reconnect."),this.reconnectDelay_=this.maxReconnectDelay_,this.lastConnectionAttemptTime_=(new Date).getTime());const e=Math.max(0,(new Date).getTime()-this.lastConnectionAttemptTime_);let t=Math.max(0,this.reconnectDelay_-e);t=Math.random()*t,this.log_("Trying to reconnect in "+t+"ms"),this.scheduleConnect_(t),this.reconnectDelay_=Math.min(this.maxReconnectDelay_,1.3*this.reconnectDelay_)}this.onConnectStatus_(!1)}async establishConnection_(){if(this.shouldReconnect_()){this.log_("Making a connection attempt"),this.lastConnectionAttemptTime_=(new Date).getTime(),this.lastConnectionEstablishedTime_=null;const e=this.onDataMessage_.bind(this),t=this.onReady_.bind(this),n=this.onRealtimeDisconnect_.bind(this),i=this.id+":"+ni.nextConnectionId_++,s=this.lastSessionId;let r=!1,o=null;const a=function(){o?o.close():(r=!0,n())},c=function(e){f(o,"sendRequest call when we're not connected not allowed."),o.sendRequest(e)};this.realtime_={close:a,sendRequest:c};const l=this.forceTokenRefresh_;this.forceTokenRefresh_=!1;try{const[a,c]=await Promise.all([this.authTokenProvider_.getToken(l),this.appCheckTokenProvider_.getToken(l)]);r?Yt("getToken() completed but was canceled"):(Yt("getToken() completed. Creating connection."),this.authToken_=a&&a.accessToken,this.appCheckToken_=c&&c.token,o=new Ln(i,this.repoInfo_,this.applicationId_,this.appCheckToken_,this.authToken_,e,t,n,(e=>{Qt(e+" ("+this.repoInfo_.toString()+")"),this.interrupt("server_kill")}),s))}catch(e){this.log_("Failed to get token: "+e),r||(this.repoInfo_.nodeAdmin&&Qt(e),a())}}}interrupt(e){Yt("Interrupting connection for reason: "+e),this.interruptReasons_[e]=!0,this.realtime_?this.realtime_.close():(this.establishConnectionTimer_&&(clearTimeout(this.establishConnectionTimer_),this.establishConnectionTimer_=null),this.connected_&&this.onRealtimeDisconnect_())}resume(e){Yt("Resuming connection for reason: "+e),delete this.interruptReasons_[e],z(this.interruptReasons_)&&(this.reconnectDelay_=ti,this.realtime_||this.scheduleConnect_(0))}handleTimestamp_(e){const t=e-(new Date).getTime();this.onServerInfoUpdate_({serverTimeOffset:t})}cancelSentTransactions_(){for(let e=0;e<this.outstandingPuts_.length;e++){const t=this.outstandingPuts_[e];t&&"h"in t.request&&t.queued&&(t.onComplete&&t.onComplete("disconnect"),delete this.outstandingPuts_[e],this.outstandingPutCount_--)}0===this.outstandingPutCount_&&(this.outstandingPuts_=[])}onListenRevoked_(e,t){let n;n=t?t.map((e=>rn(e))).join("$"):"default";const i=this.removeListen_(e,n);i&&i.onComplete&&i.onComplete("permission_denied")}removeListen_(e,t){const n=new Fn(e).toString();let i;if(this.listens.has(n)){const e=this.listens.get(n);i=e.get(t),e.delete(t),0===e.size&&this.listens.delete(n)}else i=void 0;return i}onAuthRevoked_(e,t){Yt("Auth token revoked: "+e+"/"+t),this.authToken_=null,this.forceTokenRefresh_=!0,this.realtime_.close(),"invalid_token"!==e&&"permission_denied"!==e||(this.invalidAuthTokenCount_++,this.invalidAuthTokenCount_>=3&&(this.reconnectDelay_=3e4,this.authTokenProvider_.notifyForInvalidToken()))}onAppCheckRevoked_(e,t){Yt("App check token revoked: "+e+"/"+t),this.appCheckToken_=null,this.forceTokenRefresh_=!0,"invalid_token"!==e&&"permission_denied"!==e||(this.invalidAppCheckTokenCount_++,this.invalidAppCheckTokenCount_>=3&&this.appCheckTokenProvider_.notifyForInvalidToken())}onSecurityDebugPacket_(e){this.securityDebugCallback_?this.securityDebugCallback_(e):"msg"in e&&console.log("FIREBASE: "+e.msg.replace("\n","\nFIREBASE: "))}restoreState_(){this.tryAuth(),this.tryAppCheck();for(const e of this.listens.values())for(const t of e.values())this.sendListen_(t);for(let e=0;e<this.outstandingPuts_.length;e++)this.outstandingPuts_[e]&&this.sendPut_(e);for(;this.onDisconnectRequestQueue_.length;){const e=this.onDisconnectRequestQueue_.shift();this.sendOnDisconnect_(e.action,e.pathString,e.data,e.onComplete)}for(let e=0;e<this.outstandingGets_.length;e++)this.outstandingGets_[e]&&this.sendGet_(e)}sendConnectStats_(){const e={};let t="js";e["sdk."+t+"."+Lt.replace(/\./g,"-")]=1,M()?e["framework.cordova"]=1:B()&&(e["framework.reactnative"]=1),this.reportStats(e)}shouldReconnect_(){const e=Bn.getInstance().currentlyOnline();return z(this.interruptReasons_)&&e}}ni.nextPersistentConnectionId_=0,ni.nextConnectionId_=0;class ii{constructor(e,t){this.name=e,this.node=t}static Wrap(e,t){return new ii(e,t)}}class si{getCompare(){return this.compare.bind(this)}indexedValueChanged(e,t){const n=new ii(Xt,e),i=new ii(Xt,t);return 0!==this.compare(n,i)}minPost(){return ii.MIN}}let ri;class oi extends si{static get __EMPTY_NODE(){return ri}static set __EMPTY_NODE(e){ri=e}compare(e,t){return tn(e.name,t.name)}isDefinedOn(e){throw g("KeyIndex.isDefinedOn not expected to be called.")}indexedValueChanged(e,t){return!1}minPost(){return ii.MIN}maxPost(){return new ii(en,ri)}makePost(e,t){return f("string"==typeof e,"KeyIndex indexValue must always be a string."),new ii(e,ri)}toString(){return".key"}}const ai=new oi;class ci{constructor(e,t,n,i,s=null){this.isReverse_=i,this.resultGenerator_=s,this.nodeStack_=[];let r=1;for(;!e.isEmpty();)if(r=t?n(e.key,t):1,i&&(r*=-1),r<0)e=this.isReverse_?e.left:e.right;else{if(0===r){this.nodeStack_.push(e);break}this.nodeStack_.push(e),e=this.isReverse_?e.right:e.left}}getNext(){if(0===this.nodeStack_.length)return null;let e,t=this.nodeStack_.pop();if(e=this.resultGenerator_?this.resultGenerator_(t.key,t.value):{key:t.key,value:t.value},this.isReverse_)for(t=t.left;!t.isEmpty();)this.nodeStack_.push(t),t=t.right;else for(t=t.right;!t.isEmpty();)this.nodeStack_.push(t),t=t.left;return e}hasNext(){return this.nodeStack_.length>0}peek(){if(0===this.nodeStack_.length)return null;const e=this.nodeStack_[this.nodeStack_.length-1];return this.resultGenerator_?this.resultGenerator_(e.key,e.value):{key:e.key,value:e.value}}}class li{constructor(e,t,n,i,s){this.key=e,this.value=t,this.color=null!=n?n:li.RED,this.left=null!=i?i:ui.EMPTY_NODE,this.right=null!=s?s:ui.EMPTY_NODE}copy(e,t,n,i,s){return new li(null!=e?e:this.key,null!=t?t:this.value,null!=n?n:this.color,null!=i?i:this.left,null!=s?s:this.right)}count(){return this.left.count()+1+this.right.count()}isEmpty(){return!1}inorderTraversal(e){return this.left.inorderTraversal(e)||!!e(this.key,this.value)||this.right.inorderTraversal(e)}reverseTraversal(e){return this.right.reverseTraversal(e)||e(this.key,this.value)||this.left.reverseTraversal(e)}min_(){return this.left.isEmpty()?this:this.left.min_()}minKey(){return this.min_().key}maxKey(){return this.right.isEmpty()?this.key:this.right.maxKey()}insert(e,t,n){let i=this;const s=n(e,i.key);return i=s<0?i.copy(null,null,null,i.left.insert(e,t,n),null):0===s?i.copy(null,t,null,null,null):i.copy(null,null,null,null,i.right.insert(e,t,n)),i.fixUp_()}removeMin_(){if(this.left.isEmpty())return ui.EMPTY_NODE;let e=this;return e.left.isRed_()||e.left.left.isRed_()||(e=e.moveRedLeft_()),e=e.copy(null,null,null,e.left.removeMin_(),null),e.fixUp_()}remove(e,t){let n,i;if(n=this,t(e,n.key)<0)n.left.isEmpty()||n.left.isRed_()||n.left.left.isRed_()||(n=n.moveRedLeft_()),n=n.copy(null,null,null,n.left.remove(e,t),null);else{if(n.left.isRed_()&&(n=n.rotateRight_()),n.right.isEmpty()||n.right.isRed_()||n.right.left.isRed_()||(n=n.moveRedRight_()),0===t(e,n.key)){if(n.right.isEmpty())return ui.EMPTY_NODE;i=n.right.min_(),n=n.copy(i.key,i.value,null,null,n.right.removeMin_())}n=n.copy(null,null,null,null,n.right.remove(e,t))}return n.fixUp_()}isRed_(){return this.color}fixUp_(){let e=this;return e.right.isRed_()&&!e.left.isRed_()&&(e=e.rotateLeft_()),e.left.isRed_()&&e.left.left.isRed_()&&(e=e.rotateRight_()),e.left.isRed_()&&e.right.isRed_()&&(e=e.colorFlip_()),e}moveRedLeft_(){let e=this.colorFlip_();return e.right.left.isRed_()&&(e=e.copy(null,null,null,null,e.right.rotateRight_()),e=e.rotateLeft_(),e=e.colorFlip_()),e}moveRedRight_(){let e=this.colorFlip_();return e.left.left.isRed_()&&(e=e.rotateRight_(),e=e.colorFlip_()),e}rotateLeft_(){const e=this.copy(null,null,li.RED,null,this.right.left);return this.right.copy(null,null,this.color,e,null)}rotateRight_(){const e=this.copy(null,null,li.RED,this.left.right,null);return this.left.copy(null,null,this.color,null,e)}colorFlip_(){const e=this.left.copy(null,null,!this.left.color,null,null),t=this.right.copy(null,null,!this.right.color,null,null);return this.copy(null,null,!this.color,e,t)}checkMaxDepth_(){const e=this.check_();return Math.pow(2,e)<=this.count()+1}check_(){if(this.isRed_()&&this.left.isRed_())throw new Error("Red node has red child("+this.key+","+this.value+")");if(this.right.isRed_())throw new Error("Right child of ("+this.key+","+this.value+") is red");const e=this.left.check_();if(e!==this.right.check_())throw new Error("Black depths differ");return e+(this.isRed_()?0:1)}}li.RED=!0,li.BLACK=!1;class ui{constructor(e,t=ui.EMPTY_NODE){this.comparator_=e,this.root_=t}insert(e,t){return new ui(this.comparator_,this.root_.insert(e,t,this.comparator_).copy(null,null,li.BLACK,null,null))}remove(e){return new ui(this.comparator_,this.root_.remove(e,this.comparator_).copy(null,null,li.BLACK,null,null))}get(e){let t,n=this.root_;for(;!n.isEmpty();){if(t=this.comparator_(e,n.key),0===t)return n.value;t<0?n=n.left:t>0&&(n=n.right)}return null}getPredecessorKey(e){let t,n=this.root_,i=null;for(;!n.isEmpty();){if(t=this.comparator_(e,n.key),0===t){if(n.left.isEmpty())return i?i.key:null;for(n=n.left;!n.right.isEmpty();)n=n.right;return n.key}t<0?n=n.left:t>0&&(i=n,n=n.right)}throw new Error("Attempted to find predecessor key for a nonexistent key.  What gives?")}isEmpty(){return this.root_.isEmpty()}count(){return this.root_.count()}minKey(){return this.root_.minKey()}maxKey(){return this.root_.maxKey()}inorderTraversal(e){return this.root_.inorderTraversal(e)}reverseTraversal(e){return this.root_.reverseTraversal(e)}getIterator(e){return new ci(this.root_,null,this.comparator_,!1,e)}getIteratorFrom(e,t){return new ci(this.root_,e,this.comparator_,!1,t)}getReverseIteratorFrom(e,t){return new ci(this.root_,e,this.comparator_,!0,t)}getReverseIterator(e){return new ci(this.root_,null,this.comparator_,!0,e)}}function di(e,t){return tn(e.name,t.name)}function hi(e,t){return tn(e,t)}let pi;ui.EMPTY_NODE=new class{copy(e,t,n,i,s){return this}insert(e,t,n){return new li(e,t,null)}remove(e,t){return this}count(){return 0}isEmpty(){return!0}inorderTraversal(e){return!1}reverseTraversal(e){return!1}minKey(){return null}maxKey(){return null}check_(){return 0}isRed_(){return!1}};const mi=function(e){return"number"==typeof e?"number:"+cn(e):"string:"+e},fi=function(e){if(e.isLeafNode()){const t=e.val();f("string"==typeof t||"number"==typeof t||"object"==typeof t&&$(t,".sv"),"Priority must be a string or number.")}else f(e===pi||e.isEmpty(),"priority of unexpected type.");f(e===pi||e.getPriority().isEmpty(),"Priority nodes can't have a priority of their own.")};let gi,wi,_i;class vi{static set __childrenNodeConstructor(e){gi=e}static get __childrenNodeConstructor(){return gi}constructor(e,t=vi.__childrenNodeConstructor.EMPTY_NODE){this.value_=e,this.priorityNode_=t,this.lazyHash_=null,f(void 0!==this.value_&&null!==this.value_,"LeafNode shouldn't be created with null/undefined value."),fi(this.priorityNode_)}isLeafNode(){return!0}getPriority(){return this.priorityNode_}updatePriority(e){return new vi(this.value_,e)}getImmediateChild(e){return".priority"===e?this.priorityNode_:vi.__childrenNodeConstructor.EMPTY_NODE}getChild(e){return Yn(e)?this:".priority"===jn(e)?this.priorityNode_:vi.__childrenNodeConstructor.EMPTY_NODE}hasChild(){return!1}getPredecessorChildName(e,t){return null}updateImmediateChild(e,t){return".priority"===e?this.updatePriority(t):t.isEmpty()&&".priority"!==e?this:vi.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(e,t).updatePriority(this.priorityNode_)}updateChild(e,t){const n=jn(e);return null===n?t:t.isEmpty()&&".priority"!==n?this:(f(".priority"!==n||1===qn(e),".priority must be the last token in a path"),this.updateImmediateChild(n,vi.__childrenNodeConstructor.EMPTY_NODE.updateChild(Vn(e),t)))}isEmpty(){return!1}numChildren(){return 0}forEachChild(e,t){return!1}val(e){return e&&!this.getPriority().isEmpty()?{".value":this.getValue(),".priority":this.getPriority().val()}:this.getValue()}hash(){if(null===this.lazyHash_){let e="";this.priorityNode_.isEmpty()||(e+="priority:"+mi(this.priorityNode_.val())+":");const t=typeof this.value_;e+=t+":",e+="number"===t?cn(this.value_):this.value_,this.lazyHash_=Vt(e)}return this.lazyHash_}getValue(){return this.value_}compareTo(e){return e===vi.__childrenNodeConstructor.EMPTY_NODE?1:e instanceof vi.__childrenNodeConstructor?-1:(f(e.isLeafNode(),"Unknown node type"),this.compareToLeafNode_(e))}compareToLeafNode_(e){const t=typeof e.value_,n=typeof this.value_,i=vi.VALUE_TYPE_ORDER.indexOf(t),s=vi.VALUE_TYPE_ORDER.indexOf(n);return f(i>=0,"Unknown leaf type: "+t),f(s>=0,"Unknown leaf type: "+n),i===s?"object"===n?0:this.value_<e.value_?-1:this.value_===e.value_?0:1:s-i}withIndex(){return this}isIndexed(){return!0}equals(e){if(e===this)return!0;if(e.isLeafNode()){const t=e;return this.value_===t.value_&&this.priorityNode_.equals(t.priorityNode_)}return!1}}vi.VALUE_TYPE_ORDER=["object","boolean","number","string"];const yi=new class extends si{compare(e,t){const n=e.node.getPriority(),i=t.node.getPriority(),s=n.compareTo(i);return 0===s?tn(e.name,t.name):s}isDefinedOn(e){return!e.getPriority().isEmpty()}indexedValueChanged(e,t){return!e.getPriority().equals(t.getPriority())}minPost(){return ii.MIN}maxPost(){return new ii(en,new vi("[PRIORITY-POST]",_i))}makePost(e,t){const n=wi(e);return new ii(t,new vi("[PRIORITY-POST]",n))}toString(){return".priority"}},bi=Math.log(2);class Ci{constructor(e){var t;this.count=(t=e+1,parseInt(Math.log(t)/bi,10)),this.current_=this.count-1;const n=(i=this.count,parseInt(Array(i+1).join("1"),2));var i;this.bits_=e+1&n}nextBitIsOne(){const e=!(this.bits_&1<<this.current_);return this.current_--,e}}const Ai=function(e,t,n,i){e.sort(t);const s=function(t,i){const r=i-t;let o,a;if(0===r)return null;if(1===r)return o=e[t],a=n?n(o):o,new li(a,o.node,li.BLACK,null,null);{const c=parseInt(r/2,10)+t,l=s(t,c),u=s(c+1,i);return o=e[c],a=n?n(o):o,new li(a,o.node,li.BLACK,l,u)}},r=function(t){let i=null,r=null,o=e.length;const a=function(t,i){const r=o-t,a=o;o-=t;const l=s(r+1,a),u=e[r],d=n?n(u):u;c(new li(d,u.node,i,null,l))},c=function(e){i?(i.left=e,i=e):(r=e,i=e)};for(let e=0;e<t.count;++e){const n=t.nextBitIsOne(),i=Math.pow(2,t.count-(e+1));n?a(i,li.BLACK):(a(i,li.BLACK),a(i,li.RED))}return r}(new Ci(e.length));return new ui(i||t,r)};let ki;const Ei={};class Ii{static get Default(){return f(Ei&&yi,"ChildrenNode.ts has not been loaded"),ki=ki||new Ii({".priority":Ei},{".priority":yi}),ki}constructor(e,t){this.indexes_=e,this.indexSet_=t}get(e){const t=W(this.indexes_,e);if(!t)throw new Error("No index defined for "+e);return t instanceof ui?t:null}hasIndex(e){return $(this.indexSet_,e.toString())}addIndex(e,t){f(e!==ai,"KeyIndex always exists and isn't meant to be added to the IndexMap.");const n=[];let i=!1;const s=t.getIterator(ii.Wrap);let r,o=s.getNext();for(;o;)i=i||e.isDefinedOn(o.node),n.push(o),o=s.getNext();r=i?Ai(n,e.getCompare()):Ei;const a=e.toString(),c=Object.assign({},this.indexSet_);c[a]=e;const l=Object.assign({},this.indexes_);return l[a]=r,new Ii(l,c)}addToIndexes(e,t){const n=Y(this.indexes_,((n,i)=>{const s=W(this.indexSet_,i);if(f(s,"Missing index implementation for "+i),n===Ei){if(s.isDefinedOn(e.node)){const n=[],i=t.getIterator(ii.Wrap);let r=i.getNext();for(;r;)r.name!==e.name&&n.push(r),r=i.getNext();return n.push(e),Ai(n,s.getCompare())}return Ei}{const i=t.get(e.name);let s=n;return i&&(s=s.remove(new ii(e.name,i))),s.insert(e,e.node)}}));return new Ii(n,this.indexSet_)}removeFromIndexes(e,t){const n=Y(this.indexes_,(n=>{if(n===Ei)return n;{const i=t.get(e.name);return i?n.remove(new ii(e.name,i)):n}}));return new Ii(n,this.indexSet_)}}let Ti;class Si{static get EMPTY_NODE(){return Ti||(Ti=new Si(new ui(hi),null,Ii.Default))}constructor(e,t,n){this.children_=e,this.priorityNode_=t,this.indexMap_=n,this.lazyHash_=null,this.priorityNode_&&fi(this.priorityNode_),this.children_.isEmpty()&&f(!this.priorityNode_||this.priorityNode_.isEmpty(),"An empty node cannot have a priority")}isLeafNode(){return!1}getPriority(){return this.priorityNode_||Ti}updatePriority(e){return this.children_.isEmpty()?this:new Si(this.children_,e,this.indexMap_)}getImmediateChild(e){if(".priority"===e)return this.getPriority();{const t=this.children_.get(e);return null===t?Ti:t}}getChild(e){const t=jn(e);return null===t?this:this.getImmediateChild(t).getChild(Vn(e))}hasChild(e){return null!==this.children_.get(e)}updateImmediateChild(e,t){if(f(t,"We should always be passing snapshot nodes"),".priority"===e)return this.updatePriority(t);{const n=new ii(e,t);let i,s;t.isEmpty()?(i=this.children_.remove(e),s=this.indexMap_.removeFromIndexes(n,this.children_)):(i=this.children_.insert(e,t),s=this.indexMap_.addToIndexes(n,this.children_));const r=i.isEmpty()?Ti:this.priorityNode_;return new Si(i,r,s)}}updateChild(e,t){const n=jn(e);if(null===n)return t;{f(".priority"!==jn(e)||1===qn(e),".priority must be the last token in a path");const i=this.getImmediateChild(n).updateChild(Vn(e),t);return this.updateImmediateChild(n,i)}}isEmpty(){return this.children_.isEmpty()}numChildren(){return this.children_.count()}val(e){if(this.isEmpty())return null;const t={};let n=0,i=0,s=!0;if(this.forEachChild(yi,((r,o)=>{t[r]=o.val(e),n++,s&&Si.INTEGER_REGEXP_.test(r)?i=Math.max(i,Number(r)):s=!1})),!e&&s&&i<2*n){const e=[];for(const n in t)e[n]=t[n];return e}return e&&!this.getPriority().isEmpty()&&(t[".priority"]=this.getPriority().val()),t}hash(){if(null===this.lazyHash_){let e="";this.getPriority().isEmpty()||(e+="priority:"+mi(this.getPriority().val())+":"),this.forEachChild(yi,((t,n)=>{const i=n.hash();""!==i&&(e+=":"+t+":"+i)})),this.lazyHash_=""===e?"":Vt(e)}return this.lazyHash_}getPredecessorChildName(e,t,n){const i=this.resolveIndex_(n);if(i){const n=i.getPredecessorKey(new ii(e,t));return n?n.name:null}return this.children_.getPredecessorKey(e)}getFirstChildName(e){const t=this.resolveIndex_(e);if(t){const e=t.minKey();return e&&e.name}return this.children_.minKey()}getFirstChild(e){const t=this.getFirstChildName(e);return t?new ii(t,this.children_.get(t)):null}getLastChildName(e){const t=this.resolveIndex_(e);if(t){const e=t.maxKey();return e&&e.name}return this.children_.maxKey()}getLastChild(e){const t=this.getLastChildName(e);return t?new ii(t,this.children_.get(t)):null}forEachChild(e,t){const n=this.resolveIndex_(e);return n?n.inorderTraversal((e=>t(e.name,e.node))):this.children_.inorderTraversal(t)}getIterator(e){return this.getIteratorFrom(e.minPost(),e)}getIteratorFrom(e,t){const n=this.resolveIndex_(t);if(n)return n.getIteratorFrom(e,(e=>e));{const n=this.children_.getIteratorFrom(e.name,ii.Wrap);let i=n.peek();for(;null!=i&&t.compare(i,e)<0;)n.getNext(),i=n.peek();return n}}getReverseIterator(e){return this.getReverseIteratorFrom(e.maxPost(),e)}getReverseIteratorFrom(e,t){const n=this.resolveIndex_(t);if(n)return n.getReverseIteratorFrom(e,(e=>e));{const n=this.children_.getReverseIteratorFrom(e.name,ii.Wrap);let i=n.peek();for(;null!=i&&t.compare(i,e)>0;)n.getNext(),i=n.peek();return n}}compareTo(e){return this.isEmpty()?e.isEmpty()?0:-1:e.isLeafNode()||e.isEmpty()?1:e===xi?-1:0}withIndex(e){if(e===ai||this.indexMap_.hasIndex(e))return this;{const t=this.indexMap_.addIndex(e,this.children_);return new Si(this.children_,this.priorityNode_,t)}}isIndexed(e){return e===ai||this.indexMap_.hasIndex(e)}equals(e){if(e===this)return!0;if(e.isLeafNode())return!1;{const t=e;if(this.getPriority().equals(t.getPriority())){if(this.children_.count()===t.children_.count()){const e=this.getIterator(yi),n=t.getIterator(yi);let i=e.getNext(),s=n.getNext();for(;i&&s;){if(i.name!==s.name||!i.node.equals(s.node))return!1;i=e.getNext(),s=n.getNext()}return null===i&&null===s}return!1}return!1}}resolveIndex_(e){return e===ai?null:this.indexMap_.get(e.toString())}}Si.INTEGER_REGEXP_=/^(0|[1-9]\d*)$/;const xi=new class extends Si{constructor(){super(new ui(hi),Si.EMPTY_NODE,Ii.Default)}compareTo(e){return e===this?0:1}equals(e){return e===this}getPriority(){return this}getImmediateChild(e){return Si.EMPTY_NODE}isEmpty(){return!1}};function Pi(e,t=null){if(null===e)return Si.EMPTY_NODE;if("object"==typeof e&&".priority"in e&&(t=e[".priority"]),f(null===t||"string"==typeof t||"number"==typeof t||"object"==typeof t&&".sv"in t,"Invalid priority type found: "+typeof t),"object"==typeof e&&".value"in e&&null!==e[".value"]&&(e=e[".value"]),"object"!=typeof e||".sv"in e)return new vi(e,Pi(t));if(e instanceof Array){let n=Si.EMPTY_NODE;return an(e,((t,i)=>{if($(e,t)&&"."!==t.substring(0,1)){const e=Pi(i);!e.isLeafNode()&&e.isEmpty()||(n=n.updateImmediateChild(t,e))}})),n.updatePriority(Pi(t))}{const n=[];let i=!1;if(an(e,((e,t)=>{if("."!==e.substring(0,1)){const s=Pi(t);s.isEmpty()||(i=i||!s.getPriority().isEmpty(),n.push(new ii(e,s)))}})),0===n.length)return Si.EMPTY_NODE;const s=Ai(n,di,(e=>e.name),hi);if(i){const e=Ai(n,yi.getCompare());return new Si(s,Pi(t),new Ii({".priority":e},{".priority":yi}))}return new Si(s,Pi(t),Ii.Default)}}Object.defineProperties(ii,{MIN:{value:new ii(Xt,Si.EMPTY_NODE)},MAX:{value:new ii(en,xi)}}),oi.__EMPTY_NODE=Si.EMPTY_NODE,vi.__childrenNodeConstructor=Si,pi=xi,_i=xi,function(e){wi=e}(Pi);class Ri extends si{constructor(e){super(),this.indexPath_=e,f(!Yn(e)&&".priority"!==jn(e),"Can't create PathIndex with empty path or .priority key")}extractChild(e){return e.getChild(this.indexPath_)}isDefinedOn(e){return!e.getChild(this.indexPath_).isEmpty()}compare(e,t){const n=this.extractChild(e.node),i=this.extractChild(t.node),s=n.compareTo(i);return 0===s?tn(e.name,t.name):s}makePost(e,t){const n=Pi(e),i=Si.EMPTY_NODE.updateChild(this.indexPath_,n);return new ii(t,i)}maxPost(){const e=Si.EMPTY_NODE.updateChild(this.indexPath_,xi);return new ii(en,e)}toString(){return $n(this.indexPath_,0).join("/")}}const Ni=new class extends si{compare(e,t){const n=e.node.compareTo(t.node);return 0===n?tn(e.name,t.name):n}isDefinedOn(e){return!0}indexedValueChanged(e,t){return!e.equals(t)}minPost(){return ii.MIN}maxPost(){return ii.MAX}makePost(e,t){const n=Pi(e);return new ii(t,n)}toString(){return".value"}};function Oi(e){return{type:"value",snapshotNode:e}}function Li(e,t){return{type:"child_added",snapshotNode:t,childName:e}}function Di(e,t){return{type:"child_removed",snapshotNode:t,childName:e}}function Mi(e,t,n){return{type:"child_changed",snapshotNode:t,childName:e,oldSnap:n}}class Bi{constructor(e){this.index_=e}updateChild(e,t,n,i,s,r){f(e.isIndexed(this.index_),"A node must be indexed if only a child is updated");const o=e.getImmediateChild(t);return o.getChild(i).equals(n.getChild(i))&&o.isEmpty()===n.isEmpty()?e:(null!=r&&(n.isEmpty()?e.hasChild(t)?r.trackChildChange(Di(t,o)):f(e.isLeafNode(),"A child remove without an old child only makes sense on a leaf node"):o.isEmpty()?r.trackChildChange(Li(t,n)):r.trackChildChange(Mi(t,n,o))),e.isLeafNode()&&n.isEmpty()?e:e.updateImmediateChild(t,n).withIndex(this.index_))}updateFullNode(e,t,n){return null!=n&&(e.isLeafNode()||e.forEachChild(yi,((e,i)=>{t.hasChild(e)||n.trackChildChange(Di(e,i))})),t.isLeafNode()||t.forEachChild(yi,((t,i)=>{if(e.hasChild(t)){const s=e.getImmediateChild(t);s.equals(i)||n.trackChildChange(Mi(t,i,s))}else n.trackChildChange(Li(t,i))}))),t.withIndex(this.index_)}updatePriority(e,t){return e.isEmpty()?Si.EMPTY_NODE:e.updatePriority(t)}filtersNodes(){return!1}getIndexedFilter(){return this}getIndex(){return this.index_}}class Fi{constructor(e){this.indexedFilter_=new Bi(e.getIndex()),this.index_=e.getIndex(),this.startPost_=Fi.getStartPost_(e),this.endPost_=Fi.getEndPost_(e),this.startIsInclusive_=!e.startAfterSet_,this.endIsInclusive_=!e.endBeforeSet_}getStartPost(){return this.startPost_}getEndPost(){return this.endPost_}matches(e){const t=this.startIsInclusive_?this.index_.compare(this.getStartPost(),e)<=0:this.index_.compare(this.getStartPost(),e)<0,n=this.endIsInclusive_?this.index_.compare(e,this.getEndPost())<=0:this.index_.compare(e,this.getEndPost())<0;return t&&n}updateChild(e,t,n,i,s,r){return this.matches(new ii(t,n))||(n=Si.EMPTY_NODE),this.indexedFilter_.updateChild(e,t,n,i,s,r)}updateFullNode(e,t,n){t.isLeafNode()&&(t=Si.EMPTY_NODE);let i=t.withIndex(this.index_);i=i.updatePriority(Si.EMPTY_NODE);const s=this;return t.forEachChild(yi,((e,t)=>{s.matches(new ii(e,t))||(i=i.updateImmediateChild(e,Si.EMPTY_NODE))})),this.indexedFilter_.updateFullNode(e,i,n)}updatePriority(e,t){return e}filtersNodes(){return!0}getIndexedFilter(){return this.indexedFilter_}getIndex(){return this.index_}static getStartPost_(e){if(e.hasStart()){const t=e.getIndexStartName();return e.getIndex().makePost(e.getIndexStartValue(),t)}return e.getIndex().minPost()}static getEndPost_(e){if(e.hasEnd()){const t=e.getIndexEndName();return e.getIndex().makePost(e.getIndexEndValue(),t)}return e.getIndex().maxPost()}}class Ui{constructor(e){this.withinDirectionalStart=e=>this.reverse_?this.withinEndPost(e):this.withinStartPost(e),this.withinDirectionalEnd=e=>this.reverse_?this.withinStartPost(e):this.withinEndPost(e),this.withinStartPost=e=>{const t=this.index_.compare(this.rangedFilter_.getStartPost(),e);return this.startIsInclusive_?t<=0:t<0},this.withinEndPost=e=>{const t=this.index_.compare(e,this.rangedFilter_.getEndPost());return this.endIsInclusive_?t<=0:t<0},this.rangedFilter_=new Fi(e),this.index_=e.getIndex(),this.limit_=e.getLimit(),this.reverse_=!e.isViewFromLeft(),this.startIsInclusive_=!e.startAfterSet_,this.endIsInclusive_=!e.endBeforeSet_}updateChild(e,t,n,i,s,r){return this.rangedFilter_.matches(new ii(t,n))||(n=Si.EMPTY_NODE),e.getImmediateChild(t).equals(n)?e:e.numChildren()<this.limit_?this.rangedFilter_.getIndexedFilter().updateChild(e,t,n,i,s,r):this.fullLimitUpdateChild_(e,t,n,s,r)}updateFullNode(e,t,n){let i;if(t.isLeafNode()||t.isEmpty())i=Si.EMPTY_NODE.withIndex(this.index_);else if(2*this.limit_<t.numChildren()&&t.isIndexed(this.index_)){let e;i=Si.EMPTY_NODE.withIndex(this.index_),e=this.reverse_?t.getReverseIteratorFrom(this.rangedFilter_.getEndPost(),this.index_):t.getIteratorFrom(this.rangedFilter_.getStartPost(),this.index_);let n=0;for(;e.hasNext()&&n<this.limit_;){const t=e.getNext();if(this.withinDirectionalStart(t)){if(!this.withinDirectionalEnd(t))break;i=i.updateImmediateChild(t.name,t.node),n++}}}else{let e;i=t.withIndex(this.index_),i=i.updatePriority(Si.EMPTY_NODE),e=this.reverse_?i.getReverseIterator(this.index_):i.getIterator(this.index_);let n=0;for(;e.hasNext();){const t=e.getNext();n<this.limit_&&this.withinDirectionalStart(t)&&this.withinDirectionalEnd(t)?n++:i=i.updateImmediateChild(t.name,Si.EMPTY_NODE)}}return this.rangedFilter_.getIndexedFilter().updateFullNode(e,i,n)}updatePriority(e,t){return e}filtersNodes(){return!0}getIndexedFilter(){return this.rangedFilter_.getIndexedFilter()}getIndex(){return this.index_}fullLimitUpdateChild_(e,t,n,i,s){let r;if(this.reverse_){const e=this.index_.getCompare();r=(t,n)=>e(n,t)}else r=this.index_.getCompare();const o=e;f(o.numChildren()===this.limit_,"");const a=new ii(t,n),c=this.reverse_?o.getFirstChild(this.index_):o.getLastChild(this.index_),l=this.rangedFilter_.matches(a);if(o.hasChild(t)){const e=o.getImmediateChild(t);let u=i.getChildAfterChild(this.index_,c,this.reverse_);for(;null!=u&&(u.name===t||o.hasChild(u.name));)u=i.getChildAfterChild(this.index_,u,this.reverse_);const d=null==u?1:r(u,a);if(l&&!n.isEmpty()&&d>=0)return null!=s&&s.trackChildChange(Mi(t,n,e)),o.updateImmediateChild(t,n);{null!=s&&s.trackChildChange(Di(t,e));const n=o.updateImmediateChild(t,Si.EMPTY_NODE);return null!=u&&this.rangedFilter_.matches(u)?(null!=s&&s.trackChildChange(Li(u.name,u.node)),n.updateImmediateChild(u.name,u.node)):n}}return n.isEmpty()?e:l&&r(c,a)>=0?(null!=s&&(s.trackChildChange(Di(c.name,c.node)),s.trackChildChange(Li(t,n))),o.updateImmediateChild(t,n).updateImmediateChild(c.name,Si.EMPTY_NODE)):e}}class ji{constructor(){this.limitSet_=!1,this.startSet_=!1,this.startNameSet_=!1,this.startAfterSet_=!1,this.endSet_=!1,this.endNameSet_=!1,this.endBeforeSet_=!1,this.limit_=0,this.viewFrom_="",this.indexStartValue_=null,this.indexStartName_="",this.indexEndValue_=null,this.indexEndName_="",this.index_=yi}hasStart(){return this.startSet_}isViewFromLeft(){return""===this.viewFrom_?this.startSet_:"l"===this.viewFrom_}getIndexStartValue(){return f(this.startSet_,"Only valid if start has been set"),this.indexStartValue_}getIndexStartName(){return f(this.startSet_,"Only valid if start has been set"),this.startNameSet_?this.indexStartName_:Xt}hasEnd(){return this.endSet_}getIndexEndValue(){return f(this.endSet_,"Only valid if end has been set"),this.indexEndValue_}getIndexEndName(){return f(this.endSet_,"Only valid if end has been set"),this.endNameSet_?this.indexEndName_:en}hasLimit(){return this.limitSet_}hasAnchoredLimit(){return this.limitSet_&&""!==this.viewFrom_}getLimit(){return f(this.limitSet_,"Only valid if limit has been set"),this.limit_}getIndex(){return this.index_}loadsAllData(){return!(this.startSet_||this.endSet_||this.limitSet_)}isDefault(){return this.loadsAllData()&&this.index_===yi}copy(){const e=new ji;return e.limitSet_=this.limitSet_,e.limit_=this.limit_,e.startSet_=this.startSet_,e.startAfterSet_=this.startAfterSet_,e.indexStartValue_=this.indexStartValue_,e.startNameSet_=this.startNameSet_,e.indexStartName_=this.indexStartName_,e.endSet_=this.endSet_,e.endBeforeSet_=this.endBeforeSet_,e.indexEndValue_=this.indexEndValue_,e.endNameSet_=this.endNameSet_,e.indexEndName_=this.indexEndName_,e.index_=this.index_,e.viewFrom_=this.viewFrom_,e}}function qi(e){const t={};if(e.isDefault())return t;let n;if(e.index_===yi?n="$priority":e.index_===Ni?n="$value":e.index_===ai?n="$key":(f(e.index_ instanceof Ri,"Unrecognized index type!"),n=e.index_.toString()),t.orderBy=V(n),e.startSet_){const n=e.startAfterSet_?"startAfter":"startAt";t[n]=V(e.indexStartValue_),e.startNameSet_&&(t[n]+=","+V(e.indexStartName_))}if(e.endSet_){const n=e.endBeforeSet_?"endBefore":"endAt";t[n]=V(e.indexEndValue_),e.endNameSet_&&(t[n]+=","+V(e.indexEndName_))}return e.limitSet_&&(e.isViewFromLeft()?t.limitToFirst=e.limit_:t.limitToLast=e.limit_),t}function Vi(e){const t={};if(e.startSet_&&(t.sp=e.indexStartValue_,e.startNameSet_&&(t.sn=e.indexStartName_),t.sin=!e.startAfterSet_),e.endSet_&&(t.ep=e.indexEndValue_,e.endNameSet_&&(t.en=e.indexEndName_),t.ein=!e.endBeforeSet_),e.limitSet_){t.l=e.limit_;let n=e.viewFrom_;""===n&&(n=e.isViewFromLeft()?"l":"r"),t.vf=n}return e.index_!==yi&&(t.i=e.index_.toString()),t}class Hi extends Dn{reportStats(e){throw new Error("Method not implemented.")}static getListenId_(e,t){return void 0!==t?"tag$"+t:(f(e._queryParams.isDefault(),"should have a tag if it's not a default query."),e._path.toString())}constructor(e,t,n,i){super(),this.repoInfo_=e,this.onDataUpdate_=t,this.authTokenProvider_=n,this.appCheckTokenProvider_=i,this.log_=Kt("p:rest:"),this.listens_={}}listen(e,t,n,i){const s=e._path.toString();this.log_("Listen called for "+s+" "+e._queryIdentifier);const r=Hi.getListenId_(e,n),o={};this.listens_[r]=o;const a=qi(e._queryParams);this.restRequest_(s+".json",a,((e,t)=>{let a=t;if(404===e&&(a=null,e=null),null===e&&this.onDataUpdate_(s,a,!1,n),W(this.listens_,r)===o){let t;t=e?401===e?"permission_denied":"rest_error:"+e:"ok",i(t,null)}}))}unlisten(e,t){const n=Hi.getListenId_(e,t);delete this.listens_[n]}get(e){const t=qi(e._queryParams),n=e._path.toString(),i=new x;return this.restRequest_(n+".json",t,((e,t)=>{let s=t;404===e&&(s=null,e=null),null===e?(this.onDataUpdate_(n,s,!1,null),i.resolve(s)):i.reject(new Error(s))})),i.promise}refreshAuthToken(e){}restRequest_(e,t={},n){return t.format="export",Promise.all([this.authTokenProvider_.getToken(!1),this.appCheckTokenProvider_.getToken(!1)]).then((([i,s])=>{i&&i.accessToken&&(t.auth=i.accessToken),s&&s.token&&(t.ac=s.token);const r=(this.repoInfo_.secure?"https://":"http://")+this.repoInfo_.host+e+"?ns="+this.repoInfo_.namespace+J(t);this.log_("Sending REST request for "+r);const o=new XMLHttpRequest;o.onreadystatechange=()=>{if(n&&4===o.readyState){this.log_("REST Response for "+r+" received. status:",o.status,"response:",o.responseText);let e=null;if(o.status>=200&&o.status<300){try{e=q(o.responseText)}catch(e){Qt("Failed to parse JSON response for "+r+": "+o.responseText)}n(null,e)}else 401!==o.status&&404!==o.status&&Qt("Got unsuccessful REST response for "+r+" Status: "+o.status),n(o.status);n=null}},o.open("GET",r,!0),o.send()}))}}class $i{constructor(){this.rootNode_=Si.EMPTY_NODE}getNode(e){return this.rootNode_.getChild(e)}updateSnapshot(e,t){this.rootNode_=this.rootNode_.updateChild(e,t)}}function Wi(){return{value:null,children:new Map}}function zi(e,t,n){if(Yn(t))e.value=n,e.children.clear();else if(null!==e.value)e.value=e.value.updateChild(t,n);else{const i=jn(t);e.children.has(i)||e.children.set(i,Wi()),zi(e.children.get(i),t=Vn(t),n)}}function Yi(e,t,n){null!==e.value?n(t,e.value):function(e,t){e.children.forEach(((e,n)=>{t(n,e)}))}(e,((e,i)=>{Yi(i,new Fn(t.toString()+"/"+e),n)}))}class Ki{constructor(e){this.collection_=e,this.last_=null}get(){const e=this.collection_.get(),t=Object.assign({},e);return this.last_&&an(this.last_,((e,n)=>{t[e]=t[e]-n})),this.last_=e,t}}class Gi{constructor(e,t){this.server_=t,this.statsToReport_={},this.statsListener_=new Ki(e);const n=1e4+2e4*Math.random();hn(this.reportStats_.bind(this),Math.floor(n))}reportStats_(){const e=this.statsListener_.get(),t={};let n=!1;an(e,((e,i)=>{i>0&&$(this.statsToReport_,e)&&(t[e]=i,n=!0)})),n&&this.server_.reportStats(t),hn(this.reportStats_.bind(this),Math.floor(2*Math.random()*3e5))}}var Ji;function Qi(e){return{fromUser:!1,fromServer:!0,queryId:e,tagged:!0}}!function(e){e[e.OVERWRITE=0]="OVERWRITE",e[e.MERGE=1]="MERGE",e[e.ACK_USER_WRITE=2]="ACK_USER_WRITE",e[e.LISTEN_COMPLETE=3]="LISTEN_COMPLETE"}(Ji||(Ji={}));class Zi{constructor(e,t,n){this.path=e,this.affectedTree=t,this.revert=n,this.type=Ji.ACK_USER_WRITE,this.source={fromUser:!0,fromServer:!1,queryId:null,tagged:!1}}operationForChild(e){if(Yn(this.path)){if(null!=this.affectedTree.value)return f(this.affectedTree.children.isEmpty(),"affectedTree should not have overlapping affected paths."),this;{const t=this.affectedTree.subtree(new Fn(e));return new Zi(Un(),t,this.revert)}}return f(jn(this.path)===e,"operationForChild called for unrelated child."),new Zi(Vn(this.path),this.affectedTree,this.revert)}}class Xi{constructor(e,t){this.source=e,this.path=t,this.type=Ji.LISTEN_COMPLETE}operationForChild(e){return Yn(this.path)?new Xi(this.source,Un()):new Xi(this.source,Vn(this.path))}}class es{constructor(e,t,n){this.source=e,this.path=t,this.snap=n,this.type=Ji.OVERWRITE}operationForChild(e){return Yn(this.path)?new es(this.source,Un(),this.snap.getImmediateChild(e)):new es(this.source,Vn(this.path),this.snap)}}class ts{constructor(e,t,n){this.source=e,this.path=t,this.children=n,this.type=Ji.MERGE}operationForChild(e){if(Yn(this.path)){const t=this.children.subtree(new Fn(e));return t.isEmpty()?null:t.value?new es(this.source,Un(),t.value):new ts(this.source,Un(),t)}return f(jn(this.path)===e,"Can't get a merge for a child not on the path of the operation"),new ts(this.source,Vn(this.path),this.children)}toString(){return"Operation("+this.path+": "+this.source.toString()+" merge: "+this.children.toString()+")"}}class ns{constructor(e,t,n){this.node_=e,this.fullyInitialized_=t,this.filtered_=n}isFullyInitialized(){return this.fullyInitialized_}isFiltered(){return this.filtered_}isCompleteForPath(e){if(Yn(e))return this.isFullyInitialized()&&!this.filtered_;const t=jn(e);return this.isCompleteForChild(t)}isCompleteForChild(e){return this.isFullyInitialized()&&!this.filtered_||this.node_.hasChild(e)}getNode(){return this.node_}}class is{constructor(e){this.query_=e,this.index_=this.query_._queryParams.getIndex()}}function ss(e,t,n,i,s,r){const o=i.filter((e=>e.type===n));o.sort(((t,n)=>function(e,t,n){if(null==t.childName||null==n.childName)throw g("Should only compare child_ events.");const i=new ii(t.childName,t.snapshotNode),s=new ii(n.childName,n.snapshotNode);return e.index_.compare(i,s)}(e,t,n))),o.forEach((n=>{const i=function(e,t,n){return"value"===t.type||"child_removed"===t.type||(t.prevName=n.getPredecessorChildName(t.childName,t.snapshotNode,e.index_)),t}(e,n,r);s.forEach((s=>{s.respondsTo(n.type)&&t.push(s.createEvent(i,e.query_))}))}))}function rs(e,t){return{eventCache:e,serverCache:t}}function os(e,t,n,i){return rs(new ns(t,n,i),e.serverCache)}function as(e,t,n,i){return rs(e.eventCache,new ns(t,n,i))}function cs(e){return e.eventCache.isFullyInitialized()?e.eventCache.getNode():null}function ls(e){return e.serverCache.isFullyInitialized()?e.serverCache.getNode():null}let us;class ds{static fromObject(e){let t=new ds(null);return an(e,((e,n)=>{t=t.set(new Fn(e),n)})),t}constructor(e,t=(()=>(us||(us=new ui(nn)),us))()){this.value=e,this.children=t}isEmpty(){return null===this.value&&this.children.isEmpty()}findRootMostMatchingPathAndValue(e,t){if(null!=this.value&&t(this.value))return{path:Un(),value:this.value};if(Yn(e))return null;{const n=jn(e),i=this.children.get(n);if(null!==i){const s=i.findRootMostMatchingPathAndValue(Vn(e),t);return null!=s?{path:zn(new Fn(n),s.path),value:s.value}:null}return null}}findRootMostValueAndPath(e){return this.findRootMostMatchingPathAndValue(e,(()=>!0))}subtree(e){if(Yn(e))return this;{const t=jn(e),n=this.children.get(t);return null!==n?n.subtree(Vn(e)):new ds(null)}}set(e,t){if(Yn(e))return new ds(t,this.children);{const n=jn(e),i=(this.children.get(n)||new ds(null)).set(Vn(e),t),s=this.children.insert(n,i);return new ds(this.value,s)}}remove(e){if(Yn(e))return this.children.isEmpty()?new ds(null):new ds(null,this.children);{const t=jn(e),n=this.children.get(t);if(n){const i=n.remove(Vn(e));let s;return s=i.isEmpty()?this.children.remove(t):this.children.insert(t,i),null===this.value&&s.isEmpty()?new ds(null):new ds(this.value,s)}return this}}get(e){if(Yn(e))return this.value;{const t=jn(e),n=this.children.get(t);return n?n.get(Vn(e)):null}}setTree(e,t){if(Yn(e))return t;{const n=jn(e),i=(this.children.get(n)||new ds(null)).setTree(Vn(e),t);let s;return s=i.isEmpty()?this.children.remove(n):this.children.insert(n,i),new ds(this.value,s)}}fold(e){return this.fold_(Un(),e)}fold_(e,t){const n={};return this.children.inorderTraversal(((i,s)=>{n[i]=s.fold_(zn(e,i),t)})),t(e,this.value,n)}findOnPath(e,t){return this.findOnPath_(e,Un(),t)}findOnPath_(e,t,n){const i=!!this.value&&n(t,this.value);if(i)return i;if(Yn(e))return null;{const i=jn(e),s=this.children.get(i);return s?s.findOnPath_(Vn(e),zn(t,i),n):null}}foreachOnPath(e,t){return this.foreachOnPath_(e,Un(),t)}foreachOnPath_(e,t,n){if(Yn(e))return this;{this.value&&n(t,this.value);const i=jn(e),s=this.children.get(i);return s?s.foreachOnPath_(Vn(e),zn(t,i),n):new ds(null)}}foreach(e){this.foreach_(Un(),e)}foreach_(e,t){this.children.inorderTraversal(((n,i)=>{i.foreach_(zn(e,n),t)})),this.value&&t(e,this.value)}foreachChild(e){this.children.inorderTraversal(((t,n)=>{n.value&&e(t,n.value)}))}}class hs{constructor(e){this.writeTree_=e}static empty(){return new hs(new ds(null))}}function ps(e,t,n){if(Yn(t))return new hs(new ds(n));{const i=e.writeTree_.findRootMostValueAndPath(t);if(null!=i){const s=i.path;let r=i.value;const o=Kn(s,t);return r=r.updateChild(o,n),new hs(e.writeTree_.set(s,r))}{const i=new ds(n),s=e.writeTree_.setTree(t,i);return new hs(s)}}}function ms(e,t,n){let i=e;return an(n,((e,n)=>{i=ps(i,zn(t,e),n)})),i}function fs(e,t){if(Yn(t))return hs.empty();{const n=e.writeTree_.setTree(t,new ds(null));return new hs(n)}}function gs(e,t){return null!=ws(e,t)}function ws(e,t){const n=e.writeTree_.findRootMostValueAndPath(t);return null!=n?e.writeTree_.get(n.path).getChild(Kn(n.path,t)):null}function _s(e){const t=[],n=e.writeTree_.value;return null!=n?n.isLeafNode()||n.forEachChild(yi,((e,n)=>{t.push(new ii(e,n))})):e.writeTree_.children.inorderTraversal(((e,n)=>{null!=n.value&&t.push(new ii(e,n.value))})),t}function vs(e,t){if(Yn(t))return e;{const n=ws(e,t);return new hs(null!=n?new ds(n):e.writeTree_.subtree(t))}}function ys(e){return e.writeTree_.isEmpty()}function bs(e,t){return Cs(Un(),e.writeTree_,t)}function Cs(e,t,n){if(null!=t.value)return n.updateChild(e,t.value);{let i=null;return t.children.inorderTraversal(((t,s)=>{".priority"===t?(f(null!==s.value,"Priority writes must always be leaf nodes"),i=s.value):n=Cs(zn(e,t),s,n)})),n.getChild(e).isEmpty()||null===i||(n=n.updateChild(zn(e,".priority"),i)),n}}function As(e,t){return Ls(t,e)}function ks(e,t){if(e.snap)return Jn(e.path,t);for(const n in e.children)if(e.children.hasOwnProperty(n)&&Jn(zn(e.path,n),t))return!0;return!1}function Es(e){return e.visible}function Is(e,t,n){let i=hs.empty();for(let s=0;s<e.length;++s){const r=e[s];if(t(r)){const e=r.path;let t;if(r.snap)Jn(n,e)?(t=Kn(n,e),i=ps(i,t,r.snap)):Jn(e,n)&&(t=Kn(e,n),i=ps(i,Un(),r.snap.getChild(t)));else{if(!r.children)throw g("WriteRecord should have .snap or .children");if(Jn(n,e))t=Kn(n,e),i=ms(i,t,r.children);else if(Jn(e,n))if(t=Kn(e,n),Yn(t))i=ms(i,Un(),r.children);else{const e=W(r.children,jn(t));if(e){const n=e.getChild(Vn(t));i=ps(i,Un(),n)}}}}}return i}function Ts(e,t,n,i,s){if(i||s){const r=vs(e.visibleWrites,t);if(!s&&ys(r))return n;if(s||null!=n||gs(r,Un())){const r=function(e){return(e.visible||s)&&(!i||!~i.indexOf(e.writeId))&&(Jn(e.path,t)||Jn(t,e.path))};return bs(Is(e.allWrites,r,t),n||Si.EMPTY_NODE)}return null}{const i=ws(e.visibleWrites,t);if(null!=i)return i;{const i=vs(e.visibleWrites,t);return ys(i)?n:null!=n||gs(i,Un())?bs(i,n||Si.EMPTY_NODE):null}}}function Ss(e,t,n,i){return Ts(e.writeTree,e.treePath,t,n,i)}function xs(e,t){return function(e,t,n){let i=Si.EMPTY_NODE;const s=ws(e.visibleWrites,t);if(s)return s.isLeafNode()||s.forEachChild(yi,((e,t)=>{i=i.updateImmediateChild(e,t)})),i;if(n){const s=vs(e.visibleWrites,t);return n.forEachChild(yi,((e,t)=>{const n=bs(vs(s,new Fn(e)),t);i=i.updateImmediateChild(e,n)})),_s(s).forEach((e=>{i=i.updateImmediateChild(e.name,e.node)})),i}return _s(vs(e.visibleWrites,t)).forEach((e=>{i=i.updateImmediateChild(e.name,e.node)})),i}(e.writeTree,e.treePath,t)}function Ps(e,t,n,i){return function(e,t,n,i,s){f(i||s,"Either existingEventSnap or existingServerSnap must exist");const r=zn(t,n);if(gs(e.visibleWrites,r))return null;{const t=vs(e.visibleWrites,r);return ys(t)?s.getChild(n):bs(t,s.getChild(n))}}(e.writeTree,e.treePath,t,n,i)}function Rs(e,t){return function(e,t){return ws(e.visibleWrites,t)}(e.writeTree,zn(e.treePath,t))}function Ns(e,t,n){return function(e,t,n,i){const s=zn(t,n),r=ws(e.visibleWrites,s);return null!=r?r:i.isCompleteForChild(n)?bs(vs(e.visibleWrites,s),i.getNode().getImmediateChild(n)):null}(e.writeTree,e.treePath,t,n)}function Os(e,t){return Ls(zn(e.treePath,t),e.writeTree)}function Ls(e,t){return{treePath:e,writeTree:t}}class Ds{constructor(){this.changeMap=new Map}trackChildChange(e){const t=e.type,n=e.childName;f("child_added"===t||"child_changed"===t||"child_removed"===t,"Only child changes supported for tracking"),f(".priority"!==n,"Only non-priority child changes can be tracked.");const i=this.changeMap.get(n);if(i){const s=i.type;if("child_added"===t&&"child_removed"===s)this.changeMap.set(n,Mi(n,e.snapshotNode,i.snapshotNode));else if("child_removed"===t&&"child_added"===s)this.changeMap.delete(n);else if("child_removed"===t&&"child_changed"===s)this.changeMap.set(n,Di(n,i.oldSnap));else if("child_changed"===t&&"child_added"===s)this.changeMap.set(n,Li(n,e.snapshotNode));else{if("child_changed"!==t||"child_changed"!==s)throw g("Illegal combination of changes: "+e+" occurred after "+i);this.changeMap.set(n,Mi(n,e.snapshotNode,i.oldSnap))}}else this.changeMap.set(n,e)}getChanges(){return Array.from(this.changeMap.values())}}const Ms=new class{getCompleteChild(e){return null}getChildAfterChild(e,t,n){return null}};class Bs{constructor(e,t,n=null){this.writes_=e,this.viewCache_=t,this.optCompleteServerCache_=n}getCompleteChild(e){const t=this.viewCache_.eventCache;if(t.isCompleteForChild(e))return t.getNode().getImmediateChild(e);{const t=null!=this.optCompleteServerCache_?new ns(this.optCompleteServerCache_,!0,!1):this.viewCache_.serverCache;return Ns(this.writes_,e,t)}}getChildAfterChild(e,t,n){const i=null!=this.optCompleteServerCache_?this.optCompleteServerCache_:ls(this.viewCache_),s=function(e,t,n,i,s,r){return function(e,t,n,i,s,r,o){let a;const c=vs(e.visibleWrites,t),l=ws(c,Un());if(null!=l)a=l;else{if(null==n)return[];a=bs(c,n)}if(a=a.withIndex(o),a.isEmpty()||a.isLeafNode())return[];{const e=[],t=o.getCompare(),n=r?a.getReverseIteratorFrom(i,o):a.getIteratorFrom(i,o);let c=n.getNext();for(;c&&e.length<s;)0!==t(c,i)&&e.push(c),c=n.getNext();return e}}(e.writeTree,e.treePath,t,n,i,s,r)}(this.writes_,i,t,1,n,e);return 0===s.length?null:s[0]}}function Fs(e,t,n,i,s,r){const o=t.eventCache;if(null!=Rs(i,n))return t;{let a,c;if(Yn(n))if(f(t.serverCache.isFullyInitialized(),"If change path is empty, we must have complete server data"),t.serverCache.isFiltered()){const n=ls(t),s=xs(i,n instanceof Si?n:Si.EMPTY_NODE);a=e.filter.updateFullNode(t.eventCache.getNode(),s,r)}else{const n=Ss(i,ls(t));a=e.filter.updateFullNode(t.eventCache.getNode(),n,r)}else{const l=jn(n);if(".priority"===l){f(1===qn(n),"Can't have a priority with additional path components");const s=o.getNode();c=t.serverCache.getNode();const r=Ps(i,n,s,c);a=null!=r?e.filter.updatePriority(s,r):o.getNode()}else{const u=Vn(n);let d;if(o.isCompleteForChild(l)){c=t.serverCache.getNode();const e=Ps(i,n,o.getNode(),c);d=null!=e?o.getNode().getImmediateChild(l).updateChild(u,e):o.getNode().getImmediateChild(l)}else d=Ns(i,l,t.serverCache);a=null!=d?e.filter.updateChild(o.getNode(),l,d,u,s,r):o.getNode()}}return os(t,a,o.isFullyInitialized()||Yn(n),e.filter.filtersNodes())}}function Us(e,t,n,i,s,r,o,a){const c=t.serverCache;let l;const u=o?e.filter:e.filter.getIndexedFilter();if(Yn(n))l=u.updateFullNode(c.getNode(),i,null);else if(u.filtersNodes()&&!c.isFiltered()){const e=c.getNode().updateChild(n,i);l=u.updateFullNode(c.getNode(),e,null)}else{const e=jn(n);if(!c.isCompleteForPath(n)&&qn(n)>1)return t;const s=Vn(n),r=c.getNode().getImmediateChild(e).updateChild(s,i);l=".priority"===e?u.updatePriority(c.getNode(),r):u.updateChild(c.getNode(),e,r,s,Ms,null)}const d=as(t,l,c.isFullyInitialized()||Yn(n),u.filtersNodes());return Fs(e,d,n,s,new Bs(s,d,r),a)}function js(e,t,n,i,s,r,o){const a=t.eventCache;let c,l;const u=new Bs(s,t,r);if(Yn(n))l=e.filter.updateFullNode(t.eventCache.getNode(),i,o),c=os(t,l,!0,e.filter.filtersNodes());else{const s=jn(n);if(".priority"===s)l=e.filter.updatePriority(t.eventCache.getNode(),i),c=os(t,l,a.isFullyInitialized(),a.isFiltered());else{const r=Vn(n),l=a.getNode().getImmediateChild(s);let d;if(Yn(r))d=i;else{const e=u.getCompleteChild(s);d=null!=e?".priority"===Hn(r)&&e.getChild(Wn(r)).isEmpty()?e:e.updateChild(r,i):Si.EMPTY_NODE}c=l.equals(d)?t:os(t,e.filter.updateChild(a.getNode(),s,d,r,u,o),a.isFullyInitialized(),e.filter.filtersNodes())}}return c}function qs(e,t){return e.eventCache.isCompleteForChild(t)}function Vs(e,t,n){return n.foreach(((e,n)=>{t=t.updateChild(e,n)})),t}function Hs(e,t,n,i,s,r,o,a){if(t.serverCache.getNode().isEmpty()&&!t.serverCache.isFullyInitialized())return t;let c,l=t;c=Yn(n)?i:new ds(null).setTree(n,i);const u=t.serverCache.getNode();return c.children.inorderTraversal(((n,i)=>{if(u.hasChild(n)){const c=Vs(0,t.serverCache.getNode().getImmediateChild(n),i);l=Us(e,l,new Fn(n),c,s,r,o,a)}})),c.children.inorderTraversal(((n,i)=>{const c=!t.serverCache.isCompleteForChild(n)&&null===i.value;if(!u.hasChild(n)&&!c){const c=Vs(0,t.serverCache.getNode().getImmediateChild(n),i);l=Us(e,l,new Fn(n),c,s,r,o,a)}})),l}class $s{constructor(e,t){this.query_=e,this.eventRegistrations_=[];const n=this.query_._queryParams,i=new Bi(n.getIndex()),s=(r=n).loadsAllData()?new Bi(r.getIndex()):r.hasLimit()?new Ui(r):new Fi(r);var r;this.processor_=function(e){return{filter:e}}(s);const o=t.serverCache,a=t.eventCache,c=i.updateFullNode(Si.EMPTY_NODE,o.getNode(),null),l=s.updateFullNode(Si.EMPTY_NODE,a.getNode(),null),u=new ns(c,o.isFullyInitialized(),i.filtersNodes()),d=new ns(l,a.isFullyInitialized(),s.filtersNodes());this.viewCache_=rs(d,u),this.eventGenerator_=new is(this.query_)}get query(){return this.query_}}function Ws(e,t){const n=ls(e.viewCache_);return n&&(e.query._queryParams.loadsAllData()||!Yn(t)&&!n.getImmediateChild(jn(t)).isEmpty())?n.getChild(t):null}function zs(e){return 0===e.eventRegistrations_.length}function Ys(e,t,n){const i=[];if(n){f(null==t,"A cancel should cancel all event registrations.");const s=e.query._path;e.eventRegistrations_.forEach((e=>{const t=e.createCancelEvent(n,s);t&&i.push(t)}))}if(t){let n=[];for(let i=0;i<e.eventRegistrations_.length;++i){const s=e.eventRegistrations_[i];if(s.matches(t)){if(t.hasAnyCallback()){n=n.concat(e.eventRegistrations_.slice(i+1));break}}else n.push(s)}e.eventRegistrations_=n}else e.eventRegistrations_=[];return i}function Ks(e,t,n,i){t.type===Ji.MERGE&&null!==t.source.queryId&&(f(ls(e.viewCache_),"We should always have a full cache before handling merges"),f(cs(e.viewCache_),"Missing event cache, even though we have a server cache"));const s=e.viewCache_,r=function(e,t,n,i,s){const r=new Ds;let o,a;if(n.type===Ji.OVERWRITE){const c=n;c.source.fromUser?o=js(e,t,c.path,c.snap,i,s,r):(f(c.source.fromServer,"Unknown source."),a=c.source.tagged||t.serverCache.isFiltered()&&!Yn(c.path),o=Us(e,t,c.path,c.snap,i,s,a,r))}else if(n.type===Ji.MERGE){const c=n;c.source.fromUser?o=function(e,t,n,i,s,r,o){let a=t;return i.foreach(((i,c)=>{const l=zn(n,i);qs(t,jn(l))&&(a=js(e,a,l,c,s,r,o))})),i.foreach(((i,c)=>{const l=zn(n,i);qs(t,jn(l))||(a=js(e,a,l,c,s,r,o))})),a}(e,t,c.path,c.children,i,s,r):(f(c.source.fromServer,"Unknown source."),a=c.source.tagged||t.serverCache.isFiltered(),o=Hs(e,t,c.path,c.children,i,s,a,r))}else if(n.type===Ji.ACK_USER_WRITE){const a=n;o=a.revert?function(e,t,n,i,s,r){let o;if(null!=Rs(i,n))return t;{const a=new Bs(i,t,s),c=t.eventCache.getNode();let l;if(Yn(n)||".priority"===jn(n)){let n;if(t.serverCache.isFullyInitialized())n=Ss(i,ls(t));else{const e=t.serverCache.getNode();f(e instanceof Si,"serverChildren would be complete if leaf node"),n=xs(i,e)}l=e.filter.updateFullNode(c,n,r)}else{const s=jn(n);let u=Ns(i,s,t.serverCache);null==u&&t.serverCache.isCompleteForChild(s)&&(u=c.getImmediateChild(s)),l=null!=u?e.filter.updateChild(c,s,u,Vn(n),a,r):t.eventCache.getNode().hasChild(s)?e.filter.updateChild(c,s,Si.EMPTY_NODE,Vn(n),a,r):c,l.isEmpty()&&t.serverCache.isFullyInitialized()&&(o=Ss(i,ls(t)),o.isLeafNode()&&(l=e.filter.updateFullNode(l,o,r)))}return o=t.serverCache.isFullyInitialized()||null!=Rs(i,Un()),os(t,l,o,e.filter.filtersNodes())}}(e,t,a.path,i,s,r):function(e,t,n,i,s,r,o){if(null!=Rs(s,n))return t;const a=t.serverCache.isFiltered(),c=t.serverCache;if(null!=i.value){if(Yn(n)&&c.isFullyInitialized()||c.isCompleteForPath(n))return Us(e,t,n,c.getNode().getChild(n),s,r,a,o);if(Yn(n)){let i=new ds(null);return c.getNode().forEachChild(ai,((e,t)=>{i=i.set(new Fn(e),t)})),Hs(e,t,n,i,s,r,a,o)}return t}{let l=new ds(null);return i.foreach(((e,t)=>{const i=zn(n,e);c.isCompleteForPath(i)&&(l=l.set(e,c.getNode().getChild(i)))})),Hs(e,t,n,l,s,r,a,o)}}(e,t,a.path,a.affectedTree,i,s,r)}else{if(n.type!==Ji.LISTEN_COMPLETE)throw g("Unknown operation type: "+n.type);o=function(e,t,n,i,s){const r=t.serverCache;return Fs(e,as(t,r.getNode(),r.isFullyInitialized()||Yn(n),r.isFiltered()),n,i,Ms,s)}(e,t,n.path,i,r)}const c=r.getChanges();return function(e,t,n){const i=t.eventCache;if(i.isFullyInitialized()){const s=i.getNode().isLeafNode()||i.getNode().isEmpty(),r=cs(e);(n.length>0||!e.eventCache.isFullyInitialized()||s&&!i.getNode().equals(r)||!i.getNode().getPriority().equals(r.getPriority()))&&n.push(Oi(cs(t)))}}(t,o,c),{viewCache:o,changes:c}}(e.processor_,s,t,n,i);var o,a;return o=e.processor_,a=r.viewCache,f(a.eventCache.getNode().isIndexed(o.filter.getIndex()),"Event snap not indexed"),f(a.serverCache.getNode().isIndexed(o.filter.getIndex()),"Server snap not indexed"),f(r.viewCache.serverCache.isFullyInitialized()||!s.serverCache.isFullyInitialized(),"Once a server snap is complete, it should never go back"),e.viewCache_=r.viewCache,Gs(e,r.changes,r.viewCache.eventCache.getNode(),null)}function Gs(e,t,n,i){const s=i?[i]:e.eventRegistrations_;return function(e,t,n,i){const s=[],r=[];return t.forEach((t=>{var n;"child_changed"===t.type&&e.index_.indexedValueChanged(t.oldSnap,t.snapshotNode)&&r.push((n=t.childName,{type:"child_moved",snapshotNode:t.snapshotNode,childName:n}))})),ss(e,s,"child_removed",t,i,n),ss(e,s,"child_added",t,i,n),ss(e,s,"child_moved",r,i,n),ss(e,s,"child_changed",t,i,n),ss(e,s,"value",t,i,n),s}(e.eventGenerator_,t,n,s)}let Js,Qs;class Zs{constructor(){this.views=new Map}}function Xs(e,t,n,i){const s=t.source.queryId;if(null!==s){const r=e.views.get(s);return f(null!=r,"SyncTree gave us an op for an invalid query."),Ks(r,t,n,i)}{let s=[];for(const r of e.views.values())s=s.concat(Ks(r,t,n,i));return s}}function er(e,t,n,i,s,r){const o=function(e,t,n,i,s){const r=t._queryIdentifier,o=e.views.get(r);if(!o){let e=Ss(n,s?i:null),r=!1;e?r=!0:i instanceof Si?(e=xs(n,i),r=!1):(e=Si.EMPTY_NODE,r=!1);const o=rs(new ns(e,r,!1),new ns(i,s,!1));return new $s(t,o)}return o}(e,t,i,s,r);return e.views.has(t._queryIdentifier)||e.views.set(t._queryIdentifier,o),function(e,t){e.eventRegistrations_.push(t)}(o,n),function(e,t){const n=e.viewCache_.eventCache,i=[];return n.getNode().isLeafNode()||n.getNode().forEachChild(yi,((e,t)=>{i.push(Li(e,t))})),n.isFullyInitialized()&&i.push(Oi(n.getNode())),Gs(e,i,n.getNode(),t)}(o,n)}function tr(e){const t=[];for(const n of e.views.values())n.query._queryParams.loadsAllData()||t.push(n);return t}function nr(e,t){let n=null;for(const i of e.views.values())n=n||Ws(i,t);return n}function ir(e,t){if(t._queryParams.loadsAllData())return or(e);{const n=t._queryIdentifier;return e.views.get(n)}}function sr(e,t){return null!=ir(e,t)}function rr(e){return null!=or(e)}function or(e){for(const t of e.views.values())if(t.query._queryParams.loadsAllData())return t;return null}let ar=1;class cr{constructor(e){this.listenProvider_=e,this.syncPointTree_=new ds(null),this.pendingWriteTree_={visibleWrites:hs.empty(),allWrites:[],lastWriteId:-1},this.tagToQueryMap=new Map,this.queryToTagMap=new Map}}function lr(e,t,n,i,s){return function(e,t,n,i,s){f(i>e.lastWriteId,"Stacking an older write on top of newer ones"),void 0===s&&(s=!0),e.allWrites.push({path:t,snap:n,writeId:i,visible:s}),s&&(e.visibleWrites=ps(e.visibleWrites,t,n)),e.lastWriteId=i}(e.pendingWriteTree_,t,n,i,s),s?fr(e,new es({fromUser:!0,fromServer:!1,queryId:null,tagged:!1},t,n)):[]}function ur(e,t,n=!1){const i=function(e,t){for(let n=0;n<e.allWrites.length;n++){const i=e.allWrites[n];if(i.writeId===t)return i}return null}(e.pendingWriteTree_,t);if(function(e,t){const n=e.allWrites.findIndex((e=>e.writeId===t));f(n>=0,"removeWrite called with nonexistent writeId.");const i=e.allWrites[n];e.allWrites.splice(n,1);let s=i.visible,r=!1,o=e.allWrites.length-1;for(;s&&o>=0;){const t=e.allWrites[o];t.visible&&(o>=n&&ks(t,i.path)?s=!1:Jn(i.path,t.path)&&(r=!0)),o--}return!!s&&(r?(function(e){e.visibleWrites=Is(e.allWrites,Es,Un()),e.allWrites.length>0?e.lastWriteId=e.allWrites[e.allWrites.length-1].writeId:e.lastWriteId=-1}(e),!0):(i.snap?e.visibleWrites=fs(e.visibleWrites,i.path):an(i.children,(t=>{e.visibleWrites=fs(e.visibleWrites,zn(i.path,t))})),!0))}(e.pendingWriteTree_,t)){let t=new ds(null);return null!=i.snap?t=t.set(Un(),!0):an(i.children,(e=>{t=t.set(new Fn(e),!0)})),fr(e,new Zi(i.path,t,n))}return[]}function dr(e,t,n){return fr(e,new es({fromUser:!1,fromServer:!0,queryId:null,tagged:!1},t,n))}function hr(e,t,n,i,s=!1){const r=t._path,o=e.syncPointTree_.get(r);let a=[];if(o&&("default"===t._queryIdentifier||sr(o,t))){const c=function(e,t,n,i){const s=t._queryIdentifier,r=[];let o=[];const a=rr(e);if("default"===s)for(const[t,s]of e.views.entries())o=o.concat(Ys(s,n,i)),zs(s)&&(e.views.delete(t),s.query._queryParams.loadsAllData()||r.push(s.query));else{const t=e.views.get(s);t&&(o=o.concat(Ys(t,n,i)),zs(t)&&(e.views.delete(s),t.query._queryParams.loadsAllData()||r.push(t.query)))}return a&&!rr(e)&&r.push(new(f(Js,"Reference.ts has not been loaded"),Js)(t._repo,t._path)),{removed:r,events:o}}(o,t,n,i);0===o.views.size&&(e.syncPointTree_=e.syncPointTree_.remove(r));const l=c.removed;if(a=c.events,!s){const n=-1!==l.findIndex((e=>e._queryParams.loadsAllData())),s=e.syncPointTree_.findOnPath(r,((e,t)=>rr(t)));if(n&&!s){const t=e.syncPointTree_.subtree(r);if(!t.isEmpty()){const n=function(e){return e.fold(((e,t,n)=>{if(t&&rr(t))return[or(t)];{let e=[];return t&&(e=tr(t)),an(n,((t,n)=>{e=e.concat(n)})),e}}))}(t);for(let t=0;t<n.length;++t){const i=n[t],s=i.query,r=_r(e,i);e.listenProvider_.startListening(kr(s),vr(e,s),r.hashFn,r.onComplete)}}}if(!s&&l.length>0&&!i)if(n){const n=null;e.listenProvider_.stopListening(kr(t),n)}else l.forEach((t=>{const n=e.queryToTagMap.get(yr(t));e.listenProvider_.stopListening(kr(t),n)}))}!function(e,t){for(let n=0;n<t.length;++n){const i=t[n];if(!i._queryParams.loadsAllData()){const t=yr(i),n=e.queryToTagMap.get(t);e.queryToTagMap.delete(t),e.tagToQueryMap.delete(n)}}}(e,l)}return a}function pr(e,t,n,i=!1){const s=t._path;let r=null,o=!1;e.syncPointTree_.foreachOnPath(s,((e,t)=>{const n=Kn(e,s);r=r||nr(t,n),o=o||rr(t)}));let a,c=e.syncPointTree_.get(s);c?(o=o||rr(c),r=r||nr(c,Un())):(c=new Zs,e.syncPointTree_=e.syncPointTree_.set(s,c)),null!=r?a=!0:(a=!1,r=Si.EMPTY_NODE,e.syncPointTree_.subtree(s).foreachChild(((e,t)=>{const n=nr(t,Un());n&&(r=r.updateImmediateChild(e,n))})));const l=sr(c,t);if(!l&&!t._queryParams.loadsAllData()){const n=yr(t);f(!e.queryToTagMap.has(n),"View does not exist, but we have a tag");const i=ar++;e.queryToTagMap.set(n,i),e.tagToQueryMap.set(i,n)}let u=er(c,t,n,As(e.pendingWriteTree_,s),r,a);if(!l&&!o&&!i){const n=ir(c,t);u=u.concat(function(e,t,n){const i=t._path,s=vr(e,t),r=_r(e,n),o=e.listenProvider_.startListening(kr(t),s,r.hashFn,r.onComplete),a=e.syncPointTree_.subtree(i);if(s)f(!rr(a.value),"If we're adding a query, it shouldn't be shadowed");else{const t=a.fold(((e,t,n)=>{if(!Yn(e)&&t&&rr(t))return[or(t).query];{let e=[];return t&&(e=e.concat(tr(t).map((e=>e.query)))),an(n,((t,n)=>{e=e.concat(n)})),e}}));for(let n=0;n<t.length;++n){const i=t[n];e.listenProvider_.stopListening(kr(i),vr(e,i))}}return o}(e,t,n))}return u}function mr(e,t,n){const i=e.pendingWriteTree_,s=e.syncPointTree_.findOnPath(t,((e,n)=>{const i=nr(n,Kn(e,t));if(i)return i}));return Ts(i,t,s,n,!0)}function fr(e,t){return gr(t,e.syncPointTree_,null,As(e.pendingWriteTree_,Un()))}function gr(e,t,n,i){if(Yn(e.path))return wr(e,t,n,i);{const s=t.get(Un());null==n&&null!=s&&(n=nr(s,Un()));let r=[];const o=jn(e.path),a=e.operationForChild(o),c=t.children.get(o);if(c&&a){const e=n?n.getImmediateChild(o):null,t=Os(i,o);r=r.concat(gr(a,c,e,t))}return s&&(r=r.concat(Xs(s,e,i,n))),r}}function wr(e,t,n,i){const s=t.get(Un());null==n&&null!=s&&(n=nr(s,Un()));let r=[];return t.children.inorderTraversal(((t,s)=>{const o=n?n.getImmediateChild(t):null,a=Os(i,t),c=e.operationForChild(t);c&&(r=r.concat(wr(c,s,o,a)))})),s&&(r=r.concat(Xs(s,e,i,n))),r}function _r(e,t){const n=t.query,i=vr(e,n);return{hashFn:()=>{const e=function(e){return e.viewCache_.serverCache.getNode()}(t)||Si.EMPTY_NODE;return e.hash()},onComplete:t=>{if("ok"===t)return i?function(e,t,n){const i=br(e,n);if(i){const n=Cr(i),s=n.path,r=n.queryId,o=Kn(s,t);return Ar(e,s,new Xi(Qi(r),o))}return[]}(e,n._path,i):function(e,t){return fr(e,new Xi({fromUser:!1,fromServer:!0,queryId:null,tagged:!1},t))}(e,n._path);{const i=function(e,t){let n="Unknown Error";"too_big"===e?n="The data requested exceeds the maximum size that can be accessed with a single request.":"permission_denied"===e?n="Client doesn't have permission to access the desired data.":"unavailable"===e&&(n="The service is unavailable");const i=new Error(e+" at "+t._path.toString()+": "+n);return i.code=e.toUpperCase(),i}(t,n);return hr(e,n,null,i)}}}}function vr(e,t){const n=yr(t);return e.queryToTagMap.get(n)}function yr(e){return e._path.toString()+"$"+e._queryIdentifier}function br(e,t){return e.tagToQueryMap.get(t)}function Cr(e){const t=e.indexOf("$");return f(-1!==t&&t<e.length-1,"Bad queryKey."),{queryId:e.substr(t+1),path:new Fn(e.substr(0,t))}}function Ar(e,t,n){const i=e.syncPointTree_.get(t);return f(i,"Missing sync point for query tag that we're tracking"),Xs(i,n,As(e.pendingWriteTree_,t),null)}function kr(e){return e._queryParams.loadsAllData()&&!e._queryParams.isDefault()?new(f(Qs,"Reference.ts has not been loaded"),Qs)(e._repo,e._path):e}class Er{constructor(e){this.node_=e}getImmediateChild(e){const t=this.node_.getImmediateChild(e);return new Er(t)}node(){return this.node_}}class Ir{constructor(e,t){this.syncTree_=e,this.path_=t}getImmediateChild(e){const t=zn(this.path_,e);return new Ir(this.syncTree_,t)}node(){return mr(this.syncTree_,this.path_)}}const Tr=function(e,t,n){return e&&"object"==typeof e?(f(".sv"in e,"Unexpected leaf node or priority contents"),"string"==typeof e[".sv"]?Sr(e[".sv"],t,n):"object"==typeof e[".sv"]?xr(e[".sv"],t):void f(!1,"Unexpected server value: "+JSON.stringify(e,null,2))):e},Sr=function(e,t,n){if("timestamp"===e)return n.timestamp;f(!1,"Unexpected server value: "+e)},xr=function(e,t,n){e.hasOwnProperty("increment")||f(!1,"Unexpected server value: "+JSON.stringify(e,null,2));const i=e.increment;"number"!=typeof i&&f(!1,"Unexpected increment value: "+i);const s=t.node();if(f(null!=s,"Expected ChildrenNode.EMPTY_NODE for nulls"),!s.isLeafNode())return i;const r=s.getValue();return"number"!=typeof r?i:r+i},Pr=function(e,t,n){return Rr(e,new Er(t),n)};function Rr(e,t,n){const i=e.getPriority().val(),s=Tr(i,t.getImmediateChild(".priority"),n);let r;if(e.isLeafNode()){const i=e,r=Tr(i.getValue(),t,n);return r!==i.getValue()||s!==i.getPriority().val()?new vi(r,Pi(s)):e}{const i=e;return r=i,s!==i.getPriority().val()&&(r=r.updatePriority(new vi(s))),i.forEachChild(yi,((e,i)=>{const s=Rr(i,t.getImmediateChild(e),n);s!==i&&(r=r.updateImmediateChild(e,s))})),r}}class Nr{constructor(e="",t=null,n={children:{},childCount:0}){this.name=e,this.parent=t,this.node=n}}function Or(e,t){let n=t instanceof Fn?t:new Fn(t),i=e,s=jn(n);for(;null!==s;){const e=W(i.node.children,s)||{children:{},childCount:0};i=new Nr(s,i,e),n=Vn(n),s=jn(n)}return i}function Lr(e){return e.node.value}function Dr(e,t){e.node.value=t,jr(e)}function Mr(e){return e.node.childCount>0}function Br(e,t){an(e.node.children,((n,i)=>{t(new Nr(n,e,i))}))}function Fr(e,t,n,i){n&&!i&&t(e),Br(e,(e=>{Fr(e,t,!0,i)})),n&&i&&t(e)}function Ur(e){return new Fn(null===e.parent?e.name:Ur(e.parent)+"/"+e.name)}function jr(e){null!==e.parent&&function(e,t,n){const i=function(e){return void 0===Lr(e)&&!Mr(e)}(n),s=$(e.node.children,t);i&&s?(delete e.node.children[t],e.node.childCount--,jr(e)):i||s||(e.node.children[t]=n.node,e.node.childCount++,jr(e))}(e.parent,e.name,e)}const qr=/[\[\].#$\/\u0000-\u001F\u007F]/,Vr=/[\[\].#$\u0000-\u001F\u007F]/,Hr=10485760,$r=function(e){return"string"==typeof e&&0!==e.length&&!qr.test(e)},Wr=function(e){return"string"==typeof e&&0!==e.length&&!Vr.test(e)},zr=function(e,t,n,i){i&&void 0===t||Yr(ne(e,"value"),t,n)},Yr=function(e,t,n){const i=n instanceof Fn?new Qn(n,e):n;if(void 0===t)throw new Error(e+"contains undefined "+Xn(i));if("function"==typeof t)throw new Error(e+"contains a function "+Xn(i)+" with contents = "+t.toString());if(Zt(t))throw new Error(e+"contains "+t.toString()+" "+Xn(i));if("string"==typeof t&&t.length>Hr/3&&ie(t)>Hr)throw new Error(e+"contains a string greater than "+Hr+" utf8 bytes "+Xn(i)+" ('"+t.substring(0,50)+"...')");if(t&&"object"==typeof t){let n=!1,s=!1;if(an(t,((t,r)=>{if(".value"===t)n=!0;else if(".priority"!==t&&".sv"!==t&&(s=!0,!$r(t)))throw new Error(e+" contains an invalid key ("+t+") "+Xn(i)+'.  Keys must be non-empty strings and can\'t contain ".", "#", "$", "/", "[", or "]"');!function(e,t){e.parts_.length>0&&(e.byteLength_+=1),e.parts_.push(t),e.byteLength_+=ie(t),Zn(e)}(i,t),Yr(e,r,i),function(e){const t=e.parts_.pop();e.byteLength_-=ie(t),e.parts_.length>0&&(e.byteLength_-=1)}(i)})),n&&s)throw new Error(e+' contains ".value" child '+Xn(i)+" in addition to actual children.")}},Kr=function(e,t,n,i){if(!(i&&void 0===n||Wr(n)))throw new Error(ne(e,t)+'was an invalid path = "'+n+'". Paths must be non-empty strings and can\'t contain ".", "#", "$", "[", or "]"')},Gr=function(e,t){if(".info"===jn(t))throw new Error(e+" failed = Can't modify data under /.info/")};class Jr{constructor(){this.eventLists_=[],this.recursionDepth_=0}}function Qr(e,t){let n=null;for(let i=0;i<t.length;i++){const s=t[i],r=s.getPath();null===n||Gn(r,n.path)||(e.eventLists_.push(n),n=null),null===n&&(n={events:[],path:r}),n.events.push(s)}n&&e.eventLists_.push(n)}function Zr(e,t,n){Qr(e,n),eo(e,(e=>Gn(e,t)))}function Xr(e,t,n){Qr(e,n),eo(e,(e=>Jn(e,t)||Jn(t,e)))}function eo(e,t){e.recursionDepth_++;let n=!0;for(let i=0;i<e.eventLists_.length;i++){const s=e.eventLists_[i];s&&(t(s.path)?(to(e.eventLists_[i]),e.eventLists_[i]=null):n=!1)}n&&(e.eventLists_=[]),e.recursionDepth_--}function to(e){for(let t=0;t<e.events.length;t++){const n=e.events[t];if(null!==n){e.events[t]=null;const i=n.getEventRunner();$t&&Yt("event: "+n.toString()),dn(i)}}}class no{constructor(e,t,n,i){this.repoInfo_=e,this.forceRestClient_=t,this.authTokenProvider_=n,this.appCheckProvider_=i,this.dataUpdateCount=0,this.statsListener_=null,this.eventQueue_=new Jr,this.nextWriteId_=1,this.interceptServerDataCallback_=null,this.onDisconnect_=Wi(),this.transactionQueueTree_=new Nr,this.persistentConnection_=null,this.key=this.repoInfo_.toURLString()}toString(){return(this.repoInfo_.secure?"https://":"http://")+this.repoInfo_.host}}function io(e,t,n){if(e.stats_=In(e.repoInfo_),e.forceRestClient_||("object"==typeof window&&window.navigator&&window.navigator.userAgent||"").search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i)>=0)e.server_=new Hi(e.repoInfo_,((t,n,i,s)=>{oo(e,t,n,i,s)}),e.authTokenProvider_,e.appCheckProvider_),setTimeout((()=>ao(e,!0)),0);else{if(null!=n){if("object"!=typeof n)throw new Error("Only objects are supported for option databaseAuthVariableOverride");try{V(n)}catch(e){throw new Error("Invalid authOverride provided: "+e)}}e.persistentConnection_=new ni(e.repoInfo_,t,((t,n,i,s)=>{oo(e,t,n,i,s)}),(t=>{ao(e,t)}),(t=>{!function(e,t){an(t,((t,n)=>{co(e,t,n)}))}(e,t)}),e.authTokenProvider_,e.appCheckProvider_,n),e.server_=e.persistentConnection_}e.authTokenProvider_.addTokenChangeListener((t=>{e.server_.refreshAuthToken(t)})),e.appCheckProvider_.addTokenChangeListener((t=>{e.server_.refreshAppCheckToken(t.token)})),e.statsReporter_=function(t){const n=t.toString();return En[n]||(En[n]=new Gi(e.stats_,e.server_)),En[n]}(e.repoInfo_),e.infoData_=new $i,e.infoSyncTree_=new cr({startListening:(t,n,i,s)=>{let r=[];const o=e.infoData_.getNode(t._path);return o.isEmpty()||(r=dr(e.infoSyncTree_,t._path,o),setTimeout((()=>{s("ok")}),0)),r},stopListening:()=>{}}),co(e,"connected",!1),e.serverSyncTree_=new cr({startListening:(t,n,i,s)=>(e.server_.listen(t,i,n,((n,i)=>{const r=s(n,i);Xr(e.eventQueue_,t._path,r)})),[]),stopListening:(t,n)=>{e.server_.unlisten(t,n)}})}function so(e){const t=e.infoData_.getNode(new Fn(".info/serverTimeOffset")).val()||0;return(new Date).getTime()+t}function ro(e){return(t=(t={timestamp:so(e)})||{}).timestamp=t.timestamp||(new Date).getTime(),t;var t}function oo(e,t,n,i,s){e.dataUpdateCount++;const r=new Fn(t);n=e.interceptServerDataCallback_?e.interceptServerDataCallback_(t,n):n;let o=[];if(s)if(i){const t=Y(n,(e=>Pi(e)));o=function(e,t,n,i){const s=br(e,i);if(s){const i=Cr(s),r=i.path,o=i.queryId,a=Kn(r,t),c=ds.fromObject(n);return Ar(e,r,new ts(Qi(o),a,c))}return[]}(e.serverSyncTree_,r,t,s)}else{const t=Pi(n);o=function(e,t,n,i){const s=br(e,i);if(null!=s){const i=Cr(s),r=i.path,o=i.queryId,a=Kn(r,t);return Ar(e,r,new es(Qi(o),a,n))}return[]}(e.serverSyncTree_,r,t,s)}else if(i){const t=Y(n,(e=>Pi(e)));o=function(e,t,n){const i=ds.fromObject(n);return fr(e,new ts({fromUser:!1,fromServer:!0,queryId:null,tagged:!1},t,i))}(e.serverSyncTree_,r,t)}else{const t=Pi(n);o=dr(e.serverSyncTree_,r,t)}let a=r;o.length>0&&(a=go(e,r)),Xr(e.eventQueue_,a,o)}function ao(e,t){co(e,"connected",t),!1===t&&function(e){po(e,"onDisconnectEvents");const t=ro(e),n=Wi();Yi(e.onDisconnect_,Un(),((i,s)=>{const r=function(e,t,n,i){return Rr(t,new Ir(n,e),i)}(i,s,e.serverSyncTree_,t);zi(n,i,r)}));let i=[];Yi(n,Un(),((t,n)=>{i=i.concat(dr(e.serverSyncTree_,t,n));const s=bo(e,t);go(e,s)})),e.onDisconnect_=Wi(),Xr(e.eventQueue_,Un(),i)}(e)}function co(e,t,n){const i=new Fn("/.info/"+t),s=Pi(n);e.infoData_.updateSnapshot(i,s);const r=dr(e.infoSyncTree_,i,s);Xr(e.eventQueue_,i,r)}function lo(e){return e.nextWriteId_++}function uo(e,t,n,i,s){po(e,"set",{path:t.toString(),value:n,priority:i});const r=ro(e),o=Pi(n,i),a=mr(e.serverSyncTree_,t),c=Pr(o,a,r),l=lo(e),u=lr(e.serverSyncTree_,t,c,l,!0);Qr(e.eventQueue_,u),e.server_.put(t.toString(),o.val(!0),((n,i)=>{const r="ok"===n;r||Qt("set at "+t+" failed: "+n);const o=ur(e.serverSyncTree_,l,!r);Xr(e.eventQueue_,t,o),function(e,t,n,i){t&&dn((()=>{if("ok"===n)t(null);else{const e=(n||"error").toUpperCase();let s=e;i&&(s+=": "+i);const r=new Error(s);r.code=e,t(r)}}))}(0,s,n,i)}));const d=bo(e,t);go(e,d),Xr(e.eventQueue_,d,[])}function ho(e,t,n){let i;i=".info"===jn(t._path)?hr(e.infoSyncTree_,t,n):hr(e.serverSyncTree_,t,n),Zr(e.eventQueue_,t._path,i)}function po(e,...t){let n="";e.persistentConnection_&&(n=e.persistentConnection_.id+":"),Yt(n,...t)}function mo(e,t,n){return mr(e.serverSyncTree_,t,n)||Si.EMPTY_NODE}function fo(e,t=e.transactionQueueTree_){if(t||yo(e,t),Lr(t)){const n=_o(e,t);f(n.length>0,"Sending zero length transaction queue"),n.every((e=>0===e.status))&&function(e,t,n){const i=n.map((e=>e.currentWriteId)),s=mo(e,t,i);let r=s;const o=s.hash();for(let e=0;e<n.length;e++){const i=n[e];f(0===i.status,"tryToSendTransactionQueue_: items in queue should all be run."),i.status=1,i.retryCount++;const s=Kn(t,i.path);r=r.updateChild(s,i.currentOutputSnapshotRaw)}const a=r.val(!0),c=t;e.server_.put(c.toString(),a,(i=>{po(e,"transaction put response",{path:c.toString(),status:i});let s=[];if("ok"===i){const i=[];for(let t=0;t<n.length;t++)n[t].status=2,s=s.concat(ur(e.serverSyncTree_,n[t].currentWriteId)),n[t].onComplete&&i.push((()=>n[t].onComplete(null,!0,n[t].currentOutputSnapshotResolved))),n[t].unwatcher();yo(e,Or(e.transactionQueueTree_,t)),fo(e,e.transactionQueueTree_),Xr(e.eventQueue_,t,s);for(let e=0;e<i.length;e++)dn(i[e])}else{if("datastale"===i)for(let e=0;e<n.length;e++)3===n[e].status?n[e].status=4:n[e].status=0;else{Qt("transaction at "+c.toString()+" failed: "+i);for(let e=0;e<n.length;e++)n[e].status=4,n[e].abortReason=i}go(e,t)}}),o)}(e,Ur(t),n)}else Mr(t)&&Br(t,(t=>{fo(e,t)}))}function go(e,t){const n=wo(e,t),i=Ur(n);return function(e,t,n){if(0===t.length)return;const i=[];let s=[];const r=t.filter((e=>0===e.status)).map((e=>e.currentWriteId));for(let a=0;a<t.length;a++){const c=t[a],l=Kn(n,c.path);let u,d=!1;if(f(null!==l,"rerunTransactionsUnderNode_: relativePath should not be null."),4===c.status)d=!0,u=c.abortReason,s=s.concat(ur(e.serverSyncTree_,c.currentWriteId,!0));else if(0===c.status)if(c.retryCount>=25)d=!0,u="maxretry",s=s.concat(ur(e.serverSyncTree_,c.currentWriteId,!0));else{const n=mo(e,c.path,r);c.currentInputSnapshot=n;const i=t[a].update(n.val());if(void 0!==i){Yr("transaction failed: Data returned ",i,c.path);let t=Pi(i);"object"==typeof i&&null!=i&&$(i,".priority")||(t=t.updatePriority(n.getPriority()));const o=c.currentWriteId,a=ro(e),l=Pr(t,n,a);c.currentOutputSnapshotRaw=t,c.currentOutputSnapshotResolved=l,c.currentWriteId=lo(e),r.splice(r.indexOf(o),1),s=s.concat(lr(e.serverSyncTree_,c.path,l,c.currentWriteId,c.applyLocally)),s=s.concat(ur(e.serverSyncTree_,o,!0))}else d=!0,u="nodata",s=s.concat(ur(e.serverSyncTree_,c.currentWriteId,!0))}Xr(e.eventQueue_,n,s),s=[],d&&(t[a].status=2,o=t[a].unwatcher,setTimeout(o,Math.floor(0)),t[a].onComplete&&("nodata"===u?i.push((()=>t[a].onComplete(null,!1,t[a].currentInputSnapshot))):i.push((()=>t[a].onComplete(new Error(u),!1,null)))))}var o;yo(e,e.transactionQueueTree_);for(let e=0;e<i.length;e++)dn(i[e]);fo(e,e.transactionQueueTree_)}(e,_o(e,n),i),i}function wo(e,t){let n,i=e.transactionQueueTree_;for(n=jn(t);null!==n&&void 0===Lr(i);)i=Or(i,n),n=jn(t=Vn(t));return i}function _o(e,t){const n=[];return vo(e,t,n),n.sort(((e,t)=>e.order-t.order)),n}function vo(e,t,n){const i=Lr(t);if(i)for(let e=0;e<i.length;e++)n.push(i[e]);Br(t,(t=>{vo(e,t,n)}))}function yo(e,t){const n=Lr(t);if(n){let e=0;for(let t=0;t<n.length;t++)2!==n[t].status&&(n[e]=n[t],e++);n.length=e,Dr(t,n.length>0?n:void 0)}Br(t,(t=>{yo(e,t)}))}function bo(e,t){const n=Ur(wo(e,t)),i=Or(e.transactionQueueTree_,t);return function(e,t){let n=e.parent;for(;null!==n;){if(t(n))return!0;n=n.parent}}(i,(t=>{Co(e,t)})),Co(e,i),Fr(i,(t=>{Co(e,t)})),n}function Co(e,t){const n=Lr(t);if(n){const i=[];let s=[],r=-1;for(let t=0;t<n.length;t++)3===n[t].status||(1===n[t].status?(f(r===t-1,"All SENT items should be at beginning of queue."),r=t,n[t].status=3,n[t].abortReason="set"):(f(0===n[t].status,"Unexpected transaction status in abort"),n[t].unwatcher(),s=s.concat(ur(e.serverSyncTree_,n[t].currentWriteId,!0)),n[t].onComplete&&i.push(n[t].onComplete.bind(null,new Error("set"),!1,null))));-1===r?Dr(t,void 0):n.length=r+1,Xr(e.eventQueue_,Ur(t),s);for(let e=0;e<i.length;e++)dn(i[e])}}const Ao=function(e,t){const n=ko(e),i=n.namespace;"firebase.com"===n.domain&&Jt(n.host+" is no longer supported. Please use <YOUR FIREBASE>.firebaseio.com instead"),i&&"undefined"!==i||"localhost"===n.domain||Jt("Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com"),n.secure||"undefined"!=typeof window&&window.location&&window.location.protocol&&-1!==window.location.protocol.indexOf("https:")&&Qt("Insecure Firebase access from a secure page. Please use https in calls to new Firebase().");const s="ws"===n.scheme||"wss"===n.scheme;return{repoInfo:new bn(n.host,n.secure,i,s,t,"",i!==n.subdomain),path:new Fn(n.pathString)}},ko=function(e){let t="",n="",i="",s="",r="",o=!0,a="https",c=443;if("string"==typeof e){let l=e.indexOf("//");l>=0&&(a=e.substring(0,l-1),e=e.substring(l+2));let u=e.indexOf("/");-1===u&&(u=e.length);let d=e.indexOf("?");-1===d&&(d=e.length),t=e.substring(0,Math.min(u,d)),u<d&&(s=function(e){let t="";const n=e.split("/");for(let e=0;e<n.length;e++)if(n[e].length>0){let i=n[e];try{i=decodeURIComponent(i.replace(/\+/g," "))}catch(e){}t+="/"+i}return t}(e.substring(u,d)));const h=function(e){const t={};"?"===e.charAt(0)&&(e=e.substring(1));for(const n of e.split("&")){if(0===n.length)continue;const i=n.split("=");2===i.length?t[decodeURIComponent(i[0])]=decodeURIComponent(i[1]):Qt(`Invalid query segment '${n}' in query '${e}'`)}return t}(e.substring(Math.min(e.length,d)));l=t.indexOf(":"),l>=0?(o="https"===a||"wss"===a,c=parseInt(t.substring(l+1),10)):l=t.length;const p=t.slice(0,l);if("localhost"===p.toLowerCase())n="localhost";else if(p.split(".").length<=2)n=p;else{const e=t.indexOf(".");i=t.substring(0,e).toLowerCase(),n=t.substring(e+1),r=i}"ns"in h&&(r=h.ns)}return{host:t,port:c,domain:n,subdomain:i,secure:o,scheme:a,pathString:s,namespace:r}},Eo="-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz",Io=function(){let e=0;const t=[];return function(n){const i=n===e;let s;e=n;const r=new Array(8);for(s=7;s>=0;s--)r[s]=Eo.charAt(n%64),n=Math.floor(n/64);f(0===n,"Cannot push at time == 0");let o=r.join("");if(i){for(s=11;s>=0&&63===t[s];s--)t[s]=0;t[s]++}else for(s=0;s<12;s++)t[s]=Math.floor(64*Math.random());for(s=0;s<12;s++)o+=Eo.charAt(t[s]);return f(20===o.length,"nextPushId: Length should be 20."),o}}();class To{constructor(e,t,n,i){this.eventType=e,this.eventRegistration=t,this.snapshot=n,this.prevName=i}getPath(){const e=this.snapshot.ref;return"value"===this.eventType?e._path:e.parent._path}getEventType(){return this.eventType}getEventRunner(){return this.eventRegistration.getEventRunner(this)}toString(){return this.getPath().toString()+":"+this.eventType+":"+V(this.snapshot.exportVal())}}class So{constructor(e,t,n){this.eventRegistration=e,this.error=t,this.path=n}getPath(){return this.path}getEventType(){return"cancel"}getEventRunner(){return this.eventRegistration.getEventRunner(this)}toString(){return this.path.toString()+":cancel"}}class xo{constructor(e,t){this.snapshotCallback=e,this.cancelCallback=t}onValue(e,t){this.snapshotCallback.call(null,e,t)}onCancel(e){return f(this.hasCancelCallback,"Raising a cancel event on a listener with no cancel callback"),this.cancelCallback.call(null,e)}get hasCancelCallback(){return!!this.cancelCallback}matches(e){return this.snapshotCallback===e.snapshotCallback||void 0!==this.snapshotCallback.userCallback&&this.snapshotCallback.userCallback===e.snapshotCallback.userCallback&&this.snapshotCallback.context===e.snapshotCallback.context}}class Po{constructor(e,t,n,i){this._repo=e,this._path=t,this._queryParams=n,this._orderByCalled=i}get key(){return Yn(this._path)?null:Hn(this._path)}get ref(){return new Ro(this._repo,this._path)}get _queryIdentifier(){const e=Vi(this._queryParams),t=rn(e);return"{}"===t?"default":t}get _queryObject(){return Vi(this._queryParams)}isEqual(e){if(!((e=se(e))instanceof Po))return!1;const t=this._repo===e._repo,n=Gn(this._path,e._path),i=this._queryIdentifier===e._queryIdentifier;return t&&n&&i}toJSON(){return this.toString()}toString(){return this._repo.toString()+function(e){let t="";for(let n=e.pieceNum_;n<e.pieces_.length;n++)""!==e.pieces_[n]&&(t+="/"+encodeURIComponent(String(e.pieces_[n])));return t||"/"}(this._path)}}class Ro extends Po{constructor(e,t){super(e,t,new ji,!1)}get parent(){const e=Wn(this._path);return null===e?null:new Ro(this._repo,e)}get root(){let e=this;for(;null!==e.parent;)e=e.parent;return e}}class No{constructor(e,t,n){this._node=e,this.ref=t,this._index=n}get priority(){return this._node.getPriority().val()}get key(){return this.ref.key}get size(){return this._node.numChildren()}child(e){const t=new Fn(e),n=Lo(this.ref,e);return new No(this._node.getChild(t),n,yi)}exists(){return!this._node.isEmpty()}exportVal(){return this._node.val(!0)}forEach(e){return!this._node.isLeafNode()&&!!this._node.forEachChild(this._index,((t,n)=>e(new No(n,Lo(this.ref,t),yi))))}hasChild(e){const t=new Fn(e);return!this._node.getChild(t).isEmpty()}hasChildren(){return!this._node.isLeafNode()&&!this._node.isEmpty()}toJSON(){return this.exportVal()}val(){return this._node.val()}}function Oo(e,t){return(e=se(e))._checkNotDeleted("ref"),void 0!==t?Lo(e._root,t):e._root}function Lo(e,t){var n;return null===jn((e=se(e))._path)?((n=t)&&(n=n.replace(/^\/*\.info(\/|$)/,"/")),Kr("child","path",n,false)):Kr("child","path",t,!1),new Ro(e._repo,zn(e._path,t))}function Do(e,t){e=se(e),Gr("set",e._path),zr("set",t,e._path,!1);const n=new x;return uo(e._repo,e._path,t,null,n.wrapCallback((()=>{}))),n.promise}class Mo{constructor(e){this.callbackContext=e}respondsTo(e){return"value"===e}createEvent(e,t){const n=t._queryParams.getIndex();return new To("value",this,new No(e.snapshotNode,new Ro(t._repo,t._path),n))}getEventRunner(e){return"cancel"===e.getEventType()?()=>this.callbackContext.onCancel(e.error):()=>this.callbackContext.onValue(e.snapshot,null)}createCancelEvent(e,t){return this.callbackContext.hasCancelCallback?new So(this,e,t):null}matches(e){return e instanceof Mo&&(!e.callbackContext||!this.callbackContext||e.callbackContext.matches(this.callbackContext))}hasAnyCallback(){return null!==this.callbackContext}}class Bo{constructor(e,t){this.eventType=e,this.callbackContext=t}respondsTo(e){let t="children_added"===e?"child_added":e;return t="children_removed"===t?"child_removed":t,this.eventType===t}createCancelEvent(e,t){return this.callbackContext.hasCancelCallback?new So(this,e,t):null}createEvent(e,t){f(null!=e.childName,"Child events should have a childName.");const n=Lo(new Ro(t._repo,t._path),e.childName),i=t._queryParams.getIndex();return new To(e.type,this,new No(e.snapshotNode,n,i),e.prevName)}getEventRunner(e){return"cancel"===e.getEventType()?()=>this.callbackContext.onCancel(e.error):()=>this.callbackContext.onValue(e.snapshot,e.prevName)}matches(e){return e instanceof Bo&&this.eventType===e.eventType&&(!this.callbackContext||!e.callbackContext||this.callbackContext.matches(e.callbackContext))}hasAnyCallback(){return!!this.callbackContext}}function Fo(e,t,n,i){return function(e,t,n,i,s){let r;if("object"==typeof i&&(r=void 0,s=i),"function"==typeof i&&(r=i),s&&s.onlyOnce){const t=n,i=(n,i)=>{ho(e._repo,e,a),t(n,i)};i.userCallback=n.userCallback,i.context=n.context,n=i}const o=new xo(n,r||void 0),a="value"===t?new Mo(o):new Bo(t,o);return function(e,t,n){let i;i=".info"===jn(t._path)?pr(e.infoSyncTree_,t,n):pr(e.serverSyncTree_,t,n),Zr(e.eventQueue_,t._path,i)}(e._repo,e,a),()=>ho(e._repo,e,a)}(e,"value",t,n,i)}!function(e){f(!Js,"__referenceConstructor has already been defined"),Js=e}(Ro),function(e){f(!Qs,"__referenceConstructor has already been defined"),Qs=e}(Ro);const Uo={};function jo(e,t,n,i,s){let r=i||e.options.databaseURL;void 0===r&&(e.options.projectId||Jt("Can't determine Firebase Database URL. Be sure to include  a Project ID when calling firebase.initializeApp()."),Yt("Using default host for project ",e.options.projectId),r=`${e.options.projectId}-default-rtdb.firebaseio.com`);let o,a,c=Ao(r,s),l=c.repoInfo;"undefined"!=typeof process&&process.env&&(a=process.env.FIREBASE_DATABASE_EMULATOR_HOST),a?(o=!0,r=`http://${a}?ns=${l.namespace}`,c=Ao(r,s),l=c.repoInfo):o=!c.repoInfo.secure;const u=s&&o?new fn(fn.OWNER):new mn(e.name,e.options,t);(function(e,t){const n=t.path.toString();if("string"!=typeof t.repoInfo.host||0===t.repoInfo.host.length||!$r(t.repoInfo.namespace)&&"localhost"!==t.repoInfo.host.split(":")[0]||0!==n.length&&!function(e){return e&&(e=e.replace(/^\/*\.info(\/|$)/,"/")),Wr(e)}(n))throw new Error(ne(e,"url")+'must be a valid firebase URL and the path can\'t contain ".", "#", "$", "[", or "]".')})("Invalid Firebase Database URL",c),Yn(c.path)||Jt("Database URL must point to the root of a Firebase Database (not including a child path).");const d=function(e,t,n,i){let s=Uo[t.name];s||(s={},Uo[t.name]=s);let r=s[e.toURLString()];return r&&Jt("Database initialized multiple times. Please make sure the format of the database URL matches with each database() call."),r=new no(e,false,n,i),s[e.toURLString()]=r,r}(l,e,u,new pn(e,n));return new qo(d,e)}class qo{constructor(e,t){this._repoInternal=e,this.app=t,this.type="database",this._instanceStarted=!1}get _repo(){return this._instanceStarted||(io(this._repoInternal,this.app.options.appId,this.app.options.databaseAuthVariableOverride),this._instanceStarted=!0),this._repoInternal}get _root(){return this._rootInternal||(this._rootInternal=new Ro(this._repo,Un())),this._rootInternal}_delete(){return null!==this._rootInternal&&(function(e,t){const n=Uo[t];n&&n[e.key]===e||Jt(`Database ${t}(${e.repoInfo_}) has already been deleted.`),function(e){e.persistentConnection_&&e.persistentConnection_.interrupt("repo_interrupt")}(e),delete n[e.key]}(this._repo,this.app.name),this._repoInternal=null,this._rootInternal=null),Promise.resolve()}_checkNotDeleted(e){null===this._rootInternal&&Jt("Cannot call "+e+" on a deleted database.")}}function Vo(e,t){var n={};for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&t.indexOf(i)<0&&(n[i]=e[i]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var s=0;for(i=Object.getOwnPropertySymbols(e);s<i.length;s++)t.indexOf(i[s])<0&&Object.prototype.propertyIsEnumerable.call(e,i[s])&&(n[i[s]]=e[i[s]])}return n}ni.prototype.simpleListen=function(e,t){this.sendRequest("q",{p:e},t)},ni.prototype.echo=function(e,t){this.sendRequest("echo",{d:e},t)},Lt=vt,mt(new re("database",((e,{instanceIdentifier:t})=>jo(e.getProvider("app").getImmediate(),e.getProvider("auth-internal"),e.getProvider("app-check-internal"),t)),"PUBLIC").setMultipleInstances(!0)),Ct(Nt,Ot,void 0),Ct(Nt,Ot,"esm2017"),Ct("firebase","11.8.1","app"),Object.create,Object.create,"function"==typeof SuppressedError&&SuppressedError;const Ho=function(){return{"dependent-sdk-initialized-before-auth":"Another Firebase SDK was initialized and is trying to use Auth before Auth is initialized. Please be sure to call `initializeAuth` or `getAuth` before starting any other Firebase SDK."}},$o=new U("auth","Firebase",{"dependent-sdk-initialized-before-auth":"Another Firebase SDK was initialized and is trying to use Auth before Auth is initialized. Please be sure to call `initializeAuth` or `getAuth` before starting any other Firebase SDK."}),Wo=new fe("@firebase/auth");function zo(e,...t){Wo.logLevel<=ue.ERROR&&Wo.error(`Auth (${vt}): ${e}`,...t)}function Yo(e,...t){throw Qo(e,...t)}function Ko(e,...t){return Qo(e,...t)}function Go(e,t,n){const i=Object.assign(Object.assign({},Ho()),{[t]:n});return new U("auth","Firebase",i).create(t,{appName:e.name})}function Jo(e){return Go(e,"operation-not-supported-in-this-environment","Operations that alter the current user are not supported in conjunction with FirebaseServerApp")}function Qo(e,...t){if("string"!=typeof e){const n=t[0],i=[...t.slice(1)];return i[0]&&(i[0].appName=e.name),e._errorFactory.create(n,...i)}return $o.create(e,...t)}function Zo(e,t,...n){if(!e)throw Qo(t,...n)}function Xo(e){const t="INTERNAL ASSERTION FAILED: "+e;throw zo(t),new Error(t)}function ea(e,t){e||Xo(t)}function ta(){var e;return"undefined"!=typeof self&&(null===(e=self.location)||void 0===e?void 0:e.href)||""}function na(){var e;return"undefined"!=typeof self&&(null===(e=self.location)||void 0===e?void 0:e.protocol)||null}function ia(){return!("undefined"!=typeof navigator&&navigator&&"onLine"in navigator&&"boolean"==typeof navigator.onLine&&("http:"===na()||"https:"===na()||function(){const e="object"==typeof chrome?chrome.runtime:"object"==typeof browser?browser.runtime:void 0;return"object"==typeof e&&void 0!==e.id}()||"connection"in navigator))||navigator.onLine}class sa{constructor(e,t){this.shortDelay=e,this.longDelay=t,ea(t>e,"Short delay should be less than long delay!"),this.isMobile=M()||B()}get(){return ia()?this.isMobile?this.longDelay:this.shortDelay:Math.min(5e3,this.shortDelay)}}function ra(e,t){ea(e.emulator,"Emulator should always be set here");const{url:n}=e.emulator;return t?`${n}${t.startsWith("/")?t.slice(1):t}`:n}class oa{static initialize(e,t,n){this.fetchImpl=e,t&&(this.headersImpl=t),n&&(this.responseImpl=n)}static fetch(){return this.fetchImpl?this.fetchImpl:"undefined"!=typeof self&&"fetch"in self?self.fetch:"undefined"!=typeof globalThis&&globalThis.fetch?globalThis.fetch:"undefined"!=typeof fetch?fetch:void Xo("Could not find fetch implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill")}static headers(){return this.headersImpl?this.headersImpl:"undefined"!=typeof self&&"Headers"in self?self.Headers:"undefined"!=typeof globalThis&&globalThis.Headers?globalThis.Headers:"undefined"!=typeof Headers?Headers:void Xo("Could not find Headers implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill")}static response(){return this.responseImpl?this.responseImpl:"undefined"!=typeof self&&"Response"in self?self.Response:"undefined"!=typeof globalThis&&globalThis.Response?globalThis.Response:"undefined"!=typeof Response?Response:void Xo("Could not find Response implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill")}}const aa={CREDENTIAL_MISMATCH:"custom-token-mismatch",MISSING_CUSTOM_TOKEN:"internal-error",INVALID_IDENTIFIER:"invalid-email",MISSING_CONTINUE_URI:"internal-error",INVALID_PASSWORD:"wrong-password",MISSING_PASSWORD:"missing-password",INVALID_LOGIN_CREDENTIALS:"invalid-credential",EMAIL_EXISTS:"email-already-in-use",PASSWORD_LOGIN_DISABLED:"operation-not-allowed",INVALID_IDP_RESPONSE:"invalid-credential",INVALID_PENDING_TOKEN:"invalid-credential",FEDERATED_USER_ID_ALREADY_LINKED:"credential-already-in-use",MISSING_REQ_TYPE:"internal-error",EMAIL_NOT_FOUND:"user-not-found",RESET_PASSWORD_EXCEED_LIMIT:"too-many-requests",EXPIRED_OOB_CODE:"expired-action-code",INVALID_OOB_CODE:"invalid-action-code",MISSING_OOB_CODE:"internal-error",CREDENTIAL_TOO_OLD_LOGIN_AGAIN:"requires-recent-login",INVALID_ID_TOKEN:"invalid-user-token",TOKEN_EXPIRED:"user-token-expired",USER_NOT_FOUND:"user-token-expired",TOO_MANY_ATTEMPTS_TRY_LATER:"too-many-requests",PASSWORD_DOES_NOT_MEET_REQUIREMENTS:"password-does-not-meet-requirements",INVALID_CODE:"invalid-verification-code",INVALID_SESSION_INFO:"invalid-verification-id",INVALID_TEMPORARY_PROOF:"invalid-credential",MISSING_SESSION_INFO:"missing-verification-id",SESSION_EXPIRED:"code-expired",MISSING_ANDROID_PACKAGE_NAME:"missing-android-pkg-name",UNAUTHORIZED_DOMAIN:"unauthorized-continue-uri",INVALID_OAUTH_CLIENT_ID:"invalid-oauth-client-id",ADMIN_ONLY_OPERATION:"admin-restricted-operation",INVALID_MFA_PENDING_CREDENTIAL:"invalid-multi-factor-session",MFA_ENROLLMENT_NOT_FOUND:"multi-factor-info-not-found",MISSING_MFA_ENROLLMENT_ID:"missing-multi-factor-info",MISSING_MFA_PENDING_CREDENTIAL:"missing-multi-factor-session",SECOND_FACTOR_EXISTS:"second-factor-already-in-use",SECOND_FACTOR_LIMIT_EXCEEDED:"maximum-second-factor-count-exceeded",BLOCKING_FUNCTION_ERROR_RESPONSE:"internal-error",RECAPTCHA_NOT_ENABLED:"recaptcha-not-enabled",MISSING_RECAPTCHA_TOKEN:"missing-recaptcha-token",INVALID_RECAPTCHA_TOKEN:"invalid-recaptcha-token",INVALID_RECAPTCHA_ACTION:"invalid-recaptcha-action",MISSING_CLIENT_TYPE:"missing-client-type",MISSING_RECAPTCHA_VERSION:"missing-recaptcha-version",INVALID_RECAPTCHA_VERSION:"invalid-recaptcha-version",INVALID_REQ_TYPE:"invalid-req-type"},ca=["/v1/accounts:signInWithCustomToken","/v1/accounts:signInWithEmailLink","/v1/accounts:signInWithIdp","/v1/accounts:signInWithPassword","/v1/accounts:signInWithPhoneNumber","/v1/token"],la=new sa(3e4,6e4);function ua(e,t){return e.tenantId&&!t.tenantId?Object.assign(Object.assign({},t),{tenantId:e.tenantId}):t}async function da(e,t,n,i,s={}){return ha(e,s,(async()=>{let s={},r={};i&&("GET"===t?r=i:s={body:JSON.stringify(i)});const o=J(Object.assign({key:e.config.apiKey},r)).slice(1),a=await e._getAdditionalHeaders();a["Content-Type"]="application/json",e.languageCode&&(a["X-Firebase-Locale"]=e.languageCode);const c=Object.assign({method:t,headers:a},s);return"undefined"!=typeof navigator&&"Cloudflare-Workers"===navigator.userAgent||(c.referrerPolicy="no-referrer"),e.emulatorConfig&&P(e.emulatorConfig.host)&&(c.credentials="include"),oa.fetch()(await ma(e,e.config.apiHost,n,o),c)}))}async function ha(e,t,n){e._canInitEmulator=!1;const i=Object.assign(Object.assign({},aa),t);try{const t=new ga(e),s=await Promise.race([n(),t.promise]);t.clearNetworkTimeout();const r=await s.json();if("needConfirmation"in r)throw wa(e,"account-exists-with-different-credential",r);if(s.ok&&!("errorMessage"in r))return r;{const t=s.ok?r.errorMessage:r.error.message,[n,o]=t.split(" : ");if("FEDERATED_USER_ID_ALREADY_LINKED"===n)throw wa(e,"credential-already-in-use",r);if("EMAIL_EXISTS"===n)throw wa(e,"email-already-in-use",r);if("USER_DISABLED"===n)throw wa(e,"user-disabled",r);const a=i[n]||n.toLowerCase().replace(/[_\s]+/g,"-");if(o)throw Go(e,a,o);Yo(e,a)}}catch(t){if(t instanceof F)throw t;Yo(e,"network-request-failed",{message:String(t)})}}async function pa(e,t,n,i,s={}){const r=await da(e,t,n,i,s);return"mfaPendingCredential"in r&&Yo(e,"multi-factor-auth-required",{_serverResponse:r}),r}async function ma(e,t,n,i){const s=`${t}${n}?${i}`,r=e,o=r.config.emulator?ra(e.config,s):`${e.config.apiScheme}://${s}`;return ca.includes(n)&&(await r._persistenceManagerAvailable,"COOKIE"===r._getPersistenceType())?r._getPersistence()._getFinalTarget(o).toString():o}function fa(e){switch(e){case"ENFORCE":return"ENFORCE";case"AUDIT":return"AUDIT";case"OFF":return"OFF";default:return"ENFORCEMENT_STATE_UNSPECIFIED"}}class ga{clearNetworkTimeout(){clearTimeout(this.timer)}constructor(e){this.auth=e,this.timer=null,this.promise=new Promise(((e,t)=>{this.timer=setTimeout((()=>t(Ko(this.auth,"network-request-failed"))),la.get())}))}}function wa(e,t,n){const i={appName:e.name};n.email&&(i.email=n.email),n.phoneNumber&&(i.phoneNumber=n.phoneNumber);const s=Ko(e,t,i);return s.customData._tokenResponse=n,s}function _a(e){return void 0!==e&&void 0!==e.enterprise}class va{constructor(e){if(this.siteKey="",this.recaptchaEnforcementState=[],void 0===e.recaptchaKey)throw new Error("recaptchaKey undefined");this.siteKey=e.recaptchaKey.split("/")[3],this.recaptchaEnforcementState=e.recaptchaEnforcementState}getProviderEnforcementState(e){if(!this.recaptchaEnforcementState||0===this.recaptchaEnforcementState.length)return null;for(const t of this.recaptchaEnforcementState)if(t.provider&&t.provider===e)return fa(t.enforcementState);return null}isProviderEnabled(e){return"ENFORCE"===this.getProviderEnforcementState(e)||"AUDIT"===this.getProviderEnforcementState(e)}isAnyProviderEnabled(){return this.isProviderEnabled("EMAIL_PASSWORD_PROVIDER")||this.isProviderEnabled("PHONE_PROVIDER")}}async function ya(e,t){return da(e,"GET","/v2/recaptchaConfig",ua(e,t))}async function ba(e,t){return da(e,"POST","/v1/accounts:lookup",t)}function Ca(e){if(e)try{const t=new Date(Number(e));if(!isNaN(t.getTime()))return t.toUTCString()}catch(e){}}function Aa(e){return 1e3*Number(e)}function ka(e){const[t,n,i]=e.split(".");if(void 0===t||void 0===n||void 0===i)return zo("JWT malformed, contained fewer than 3 sections"),null;try{const e=C(n);return e?JSON.parse(e):(zo("Failed to decode base64 JWT payload"),null)}catch(e){return zo("Caught error parsing JWT payload as JSON",null==e?void 0:e.toString()),null}}function Ea(e){const t=ka(e);return Zo(t,"internal-error"),Zo(void 0!==t.exp,"internal-error"),Zo(void 0!==t.iat,"internal-error"),Number(t.exp)-Number(t.iat)}async function Ia(e,t,n=!1){if(n)return t;try{return await t}catch(t){throw t instanceof F&&function({code:e}){return"auth/user-disabled"===e||"auth/user-token-expired"===e}(t)&&e.auth.currentUser===e&&await e.auth.signOut(),t}}class Ta{constructor(e){this.user=e,this.isRunning=!1,this.timerId=null,this.errorBackoff=3e4}_start(){this.isRunning||(this.isRunning=!0,this.schedule())}_stop(){this.isRunning&&(this.isRunning=!1,null!==this.timerId&&clearTimeout(this.timerId))}getInterval(e){var t;if(e){const e=this.errorBackoff;return this.errorBackoff=Math.min(2*this.errorBackoff,96e4),e}{this.errorBackoff=3e4;const e=(null!==(t=this.user.stsTokenManager.expirationTime)&&void 0!==t?t:0)-Date.now()-3e5;return Math.max(0,e)}}schedule(e=!1){if(!this.isRunning)return;const t=this.getInterval(e);this.timerId=setTimeout((async()=>{await this.iteration()}),t)}async iteration(){try{await this.user.getIdToken(!0)}catch(e){return void("auth/network-request-failed"===(null==e?void 0:e.code)&&this.schedule(!0))}this.schedule()}}class Sa{constructor(e,t){this.createdAt=e,this.lastLoginAt=t,this._initializeTime()}_initializeTime(){this.lastSignInTime=Ca(this.lastLoginAt),this.creationTime=Ca(this.createdAt)}_copy(e){this.createdAt=e.createdAt,this.lastLoginAt=e.lastLoginAt,this._initializeTime()}toJSON(){return{createdAt:this.createdAt,lastLoginAt:this.lastLoginAt}}}async function xa(e){var t;const n=e.auth,i=await e.getIdToken(),s=await Ia(e,ba(n,{idToken:i}));Zo(null==s?void 0:s.users.length,n,"internal-error");const r=s.users[0];e._notifyReloadListener(r);const o=(null===(t=r.providerUserInfo)||void 0===t?void 0:t.length)?Pa(r.providerUserInfo):[],a=(c=e.providerData,l=o,[...c.filter((e=>!l.some((t=>t.providerId===e.providerId)))),...l]);var c,l;const u=e.isAnonymous,d=!(e.email&&r.passwordHash||(null==a?void 0:a.length)),h=!!u&&d,p={uid:r.localId,displayName:r.displayName||null,photoURL:r.photoUrl||null,email:r.email||null,emailVerified:r.emailVerified||!1,phoneNumber:r.phoneNumber||null,tenantId:r.tenantId||null,providerData:a,metadata:new Sa(r.createdAt,r.lastLoginAt),isAnonymous:h};Object.assign(e,p)}function Pa(e){return e.map((e=>{var{providerId:t}=e,n=Vo(e,["providerId"]);return{providerId:t,uid:n.rawId||"",displayName:n.displayName||null,email:n.email||null,phoneNumber:n.phoneNumber||null,photoURL:n.photoUrl||null}}))}class Ra{constructor(){this.refreshToken=null,this.accessToken=null,this.expirationTime=null}get isExpired(){return!this.expirationTime||Date.now()>this.expirationTime-3e4}updateFromServerResponse(e){Zo(e.idToken,"internal-error"),Zo(void 0!==e.idToken,"internal-error"),Zo(void 0!==e.refreshToken,"internal-error");const t="expiresIn"in e&&void 0!==e.expiresIn?Number(e.expiresIn):Ea(e.idToken);this.updateTokensAndExpiration(e.idToken,e.refreshToken,t)}updateFromIdToken(e){Zo(0!==e.length,"internal-error");const t=Ea(e);this.updateTokensAndExpiration(e,null,t)}async getToken(e,t=!1){return t||!this.accessToken||this.isExpired?(Zo(this.refreshToken,e,"user-token-expired"),this.refreshToken?(await this.refresh(e,this.refreshToken),this.accessToken):null):this.accessToken}clearRefreshToken(){this.refreshToken=null}async refresh(e,t){const{accessToken:n,refreshToken:i,expiresIn:s}=await async function(e,t){const n=await ha(e,{},(async()=>{const n=J({grant_type:"refresh_token",refresh_token:t}).slice(1),{tokenApiHost:i,apiKey:s}=e.config,r=await ma(e,i,"/v1/token",`key=${s}`),o=await e._getAdditionalHeaders();return o["Content-Type"]="application/x-www-form-urlencoded",oa.fetch()(r,{method:"POST",headers:o,body:n})}));return{accessToken:n.access_token,expiresIn:n.expires_in,refreshToken:n.refresh_token}}(e,t);this.updateTokensAndExpiration(n,i,Number(s))}updateTokensAndExpiration(e,t,n){this.refreshToken=t||null,this.accessToken=e||null,this.expirationTime=Date.now()+1e3*n}static fromJSON(e,t){const{refreshToken:n,accessToken:i,expirationTime:s}=t,r=new Ra;return n&&(Zo("string"==typeof n,"internal-error",{appName:e}),r.refreshToken=n),i&&(Zo("string"==typeof i,"internal-error",{appName:e}),r.accessToken=i),s&&(Zo("number"==typeof s,"internal-error",{appName:e}),r.expirationTime=s),r}toJSON(){return{refreshToken:this.refreshToken,accessToken:this.accessToken,expirationTime:this.expirationTime}}_assign(e){this.accessToken=e.accessToken,this.refreshToken=e.refreshToken,this.expirationTime=e.expirationTime}_clone(){return Object.assign(new Ra,this.toJSON())}_performRefresh(){return Xo("not implemented")}}function Na(e,t){Zo("string"==typeof e||void 0===e,"internal-error",{appName:t})}class Oa{constructor(e){var{uid:t,auth:n,stsTokenManager:i}=e,s=Vo(e,["uid","auth","stsTokenManager"]);this.providerId="firebase",this.proactiveRefresh=new Ta(this),this.reloadUserInfo=null,this.reloadListener=null,this.uid=t,this.auth=n,this.stsTokenManager=i,this.accessToken=i.accessToken,this.displayName=s.displayName||null,this.email=s.email||null,this.emailVerified=s.emailVerified||!1,this.phoneNumber=s.phoneNumber||null,this.photoURL=s.photoURL||null,this.isAnonymous=s.isAnonymous||!1,this.tenantId=s.tenantId||null,this.providerData=s.providerData?[...s.providerData]:[],this.metadata=new Sa(s.createdAt||void 0,s.lastLoginAt||void 0)}async getIdToken(e){const t=await Ia(this,this.stsTokenManager.getToken(this.auth,e));return Zo(t,this.auth,"internal-error"),this.accessToken!==t&&(this.accessToken=t,await this.auth._persistUserIfCurrent(this),this.auth._notifyListenersIfCurrent(this)),t}getIdTokenResult(e){return async function(e,t=!1){const n=se(e),i=await n.getIdToken(t),s=ka(i);Zo(s&&s.exp&&s.auth_time&&s.iat,n.auth,"internal-error");const r="object"==typeof s.firebase?s.firebase:void 0,o=null==r?void 0:r.sign_in_provider;return{claims:s,token:i,authTime:Ca(Aa(s.auth_time)),issuedAtTime:Ca(Aa(s.iat)),expirationTime:Ca(Aa(s.exp)),signInProvider:o||null,signInSecondFactor:(null==r?void 0:r.sign_in_second_factor)||null}}(this,e)}reload(){return async function(e){const t=se(e);await xa(t),await t.auth._persistUserIfCurrent(t),t.auth._notifyListenersIfCurrent(t)}(this)}_assign(e){this!==e&&(Zo(this.uid===e.uid,this.auth,"internal-error"),this.displayName=e.displayName,this.photoURL=e.photoURL,this.email=e.email,this.emailVerified=e.emailVerified,this.phoneNumber=e.phoneNumber,this.isAnonymous=e.isAnonymous,this.tenantId=e.tenantId,this.providerData=e.providerData.map((e=>Object.assign({},e))),this.metadata._copy(e.metadata),this.stsTokenManager._assign(e.stsTokenManager))}_clone(e){const t=new Oa(Object.assign(Object.assign({},this),{auth:e,stsTokenManager:this.stsTokenManager._clone()}));return t.metadata._copy(this.metadata),t}_onReload(e){Zo(!this.reloadListener,this.auth,"internal-error"),this.reloadListener=e,this.reloadUserInfo&&(this._notifyReloadListener(this.reloadUserInfo),this.reloadUserInfo=null)}_notifyReloadListener(e){this.reloadListener?this.reloadListener(e):this.reloadUserInfo=e}_startProactiveRefresh(){this.proactiveRefresh._start()}_stopProactiveRefresh(){this.proactiveRefresh._stop()}async _updateTokensIfNecessary(e,t=!1){let n=!1;e.idToken&&e.idToken!==this.stsTokenManager.accessToken&&(this.stsTokenManager.updateFromServerResponse(e),n=!0),t&&await xa(this),await this.auth._persistUserIfCurrent(this),n&&this.auth._notifyListenersIfCurrent(this)}async delete(){if(gt(this.auth.app))return Promise.reject(Jo(this.auth));const e=await this.getIdToken();return await Ia(this,async function(e,t){return da(e,"POST","/v1/accounts:delete",t)}(this.auth,{idToken:e})),this.stsTokenManager.clearRefreshToken(),this.auth.signOut()}toJSON(){return Object.assign(Object.assign({uid:this.uid,email:this.email||void 0,emailVerified:this.emailVerified,displayName:this.displayName||void 0,isAnonymous:this.isAnonymous,photoURL:this.photoURL||void 0,phoneNumber:this.phoneNumber||void 0,tenantId:this.tenantId||void 0,providerData:this.providerData.map((e=>Object.assign({},e))),stsTokenManager:this.stsTokenManager.toJSON(),_redirectEventId:this._redirectEventId},this.metadata.toJSON()),{apiKey:this.auth.config.apiKey,appName:this.auth.name})}get refreshToken(){return this.stsTokenManager.refreshToken||""}static _fromJSON(e,t){var n,i,s,r,o,a,c,l;const u=null!==(n=t.displayName)&&void 0!==n?n:void 0,d=null!==(i=t.email)&&void 0!==i?i:void 0,h=null!==(s=t.phoneNumber)&&void 0!==s?s:void 0,p=null!==(r=t.photoURL)&&void 0!==r?r:void 0,m=null!==(o=t.tenantId)&&void 0!==o?o:void 0,f=null!==(a=t._redirectEventId)&&void 0!==a?a:void 0,g=null!==(c=t.createdAt)&&void 0!==c?c:void 0,w=null!==(l=t.lastLoginAt)&&void 0!==l?l:void 0,{uid:_,emailVerified:v,isAnonymous:y,providerData:b,stsTokenManager:C}=t;Zo(_&&C,e,"internal-error");const A=Ra.fromJSON(this.name,C);Zo("string"==typeof _,e,"internal-error"),Na(u,e.name),Na(d,e.name),Zo("boolean"==typeof v,e,"internal-error"),Zo("boolean"==typeof y,e,"internal-error"),Na(h,e.name),Na(p,e.name),Na(m,e.name),Na(f,e.name),Na(g,e.name),Na(w,e.name);const k=new Oa({uid:_,auth:e,email:d,emailVerified:v,displayName:u,isAnonymous:y,photoURL:p,phoneNumber:h,tenantId:m,stsTokenManager:A,createdAt:g,lastLoginAt:w});return b&&Array.isArray(b)&&(k.providerData=b.map((e=>Object.assign({},e)))),f&&(k._redirectEventId=f),k}static async _fromIdTokenResponse(e,t,n=!1){const i=new Ra;i.updateFromServerResponse(t);const s=new Oa({uid:t.localId,auth:e,stsTokenManager:i,isAnonymous:n});return await xa(s),s}static async _fromGetAccountInfoResponse(e,t,n){const i=t.users[0];Zo(void 0!==i.localId,"internal-error");const s=void 0!==i.providerUserInfo?Pa(i.providerUserInfo):[],r=!(i.email&&i.passwordHash||(null==s?void 0:s.length)),o=new Ra;o.updateFromIdToken(n);const a=new Oa({uid:i.localId,auth:e,stsTokenManager:o,isAnonymous:r}),c={uid:i.localId,displayName:i.displayName||null,photoURL:i.photoUrl||null,email:i.email||null,emailVerified:i.emailVerified||!1,phoneNumber:i.phoneNumber||null,tenantId:i.tenantId||null,providerData:s,metadata:new Sa(i.createdAt,i.lastLoginAt),isAnonymous:!(i.email&&i.passwordHash||(null==s?void 0:s.length))};return Object.assign(a,c),a}}const La=new Map;function Da(e){ea(e instanceof Function,"Expected a class definition");let t=La.get(e);return t?(ea(t instanceof e,"Instance stored in cache mismatched with class"),t):(t=new e,La.set(e,t),t)}class Ma{constructor(){this.type="NONE",this.storage={}}async _isAvailable(){return!0}async _set(e,t){this.storage[e]=t}async _get(e){const t=this.storage[e];return void 0===t?null:t}async _remove(e){delete this.storage[e]}_addListener(e,t){}_removeListener(e,t){}}Ma.type="NONE";const Ba=Ma;function Fa(e,t,n){return`firebase:${e}:${t}:${n}`}class Ua{constructor(e,t,n){this.persistence=e,this.auth=t,this.userKey=n;const{config:i,name:s}=this.auth;this.fullUserKey=Fa(this.userKey,i.apiKey,s),this.fullPersistenceKey=Fa("persistence",i.apiKey,s),this.boundEventHandler=t._onStorageEvent.bind(t),this.persistence._addListener(this.fullUserKey,this.boundEventHandler)}setCurrentUser(e){return this.persistence._set(this.fullUserKey,e.toJSON())}async getCurrentUser(){const e=await this.persistence._get(this.fullUserKey);if(!e)return null;if("string"==typeof e){const t=await ba(this.auth,{idToken:e}).catch((()=>{}));return t?Oa._fromGetAccountInfoResponse(this.auth,t,e):null}return Oa._fromJSON(this.auth,e)}removeCurrentUser(){return this.persistence._remove(this.fullUserKey)}savePersistenceForRedirect(){return this.persistence._set(this.fullPersistenceKey,this.persistence.type)}async setPersistence(e){if(this.persistence===e)return;const t=await this.getCurrentUser();return await this.removeCurrentUser(),this.persistence=e,t?this.setCurrentUser(t):void 0}delete(){this.persistence._removeListener(this.fullUserKey,this.boundEventHandler)}static async create(e,t,n="authUser"){if(!t.length)return new Ua(Da(Ba),e,n);const i=(await Promise.all(t.map((async e=>{if(await e._isAvailable())return e})))).filter((e=>e));let s=i[0]||Da(Ba);const r=Fa(n,e.config.apiKey,e.name);let o=null;for(const n of t)try{const t=await n._get(r);if(t){let i;if("string"==typeof t){const n=await ba(e,{idToken:t}).catch((()=>{}));if(!n)break;i=await Oa._fromGetAccountInfoResponse(e,n,t)}else i=Oa._fromJSON(e,t);n!==s&&(o=i),s=n;break}}catch(e){}const a=i.filter((e=>e._shouldAllowMigration));return s._shouldAllowMigration&&a.length?(s=a[0],o&&await s._set(r,o.toJSON()),await Promise.all(t.map((async e=>{if(e!==s)try{await e._remove(r)}catch(e){}}))),new Ua(s,e,n)):new Ua(s,e,n)}}function ja(e){const t=e.toLowerCase();if(t.includes("opera/")||t.includes("opr/")||t.includes("opios/"))return"Opera";if($a(t))return"IEMobile";if(t.includes("msie")||t.includes("trident/"))return"IE";if(t.includes("edge/"))return"Edge";if(qa(t))return"Firefox";if(t.includes("silk/"))return"Silk";if(za(t))return"Blackberry";if(Ya(t))return"Webos";if(Va(t))return"Safari";if((t.includes("chrome/")||Ha(t))&&!t.includes("edge/"))return"Chrome";if(Wa(t))return"Android";{const t=/([a-zA-Z\d\.]+)\/[a-zA-Z\d\.]*$/,n=e.match(t);if(2===(null==n?void 0:n.length))return n[1]}return"Other"}function qa(e=D()){return/firefox\//i.test(e)}function Va(e=D()){const t=e.toLowerCase();return t.includes("safari/")&&!t.includes("chrome/")&&!t.includes("crios/")&&!t.includes("android")}function Ha(e=D()){return/crios\//i.test(e)}function $a(e=D()){return/iemobile/i.test(e)}function Wa(e=D()){return/android/i.test(e)}function za(e=D()){return/blackberry/i.test(e)}function Ya(e=D()){return/webos/i.test(e)}function Ka(e=D()){return/iphone|ipad|ipod/i.test(e)||/macintosh/i.test(e)&&/mobile/i.test(e)}function Ga(e=D()){return Ka(e)||Wa(e)||Ya(e)||za(e)||/windows phone/i.test(e)||$a(e)}function Ja(e,t=[]){let n;switch(e){case"Browser":n=ja(D());break;case"Worker":n=`${ja(D())}-${e}`;break;default:n=e}const i=t.length?t.join(","):"FirebaseCore-web";return`${n}/JsCore/${vt}/${i}`}class Qa{constructor(e){this.auth=e,this.queue=[]}pushCallback(e,t){const n=t=>new Promise(((n,i)=>{try{n(e(t))}catch(e){i(e)}}));n.onAbort=t,this.queue.push(n);const i=this.queue.length-1;return()=>{this.queue[i]=()=>Promise.resolve()}}async runMiddleware(e){if(this.auth.currentUser===e)return;const t=[];try{for(const n of this.queue)await n(e),n.onAbort&&t.push(n.onAbort)}catch(e){t.reverse();for(const e of t)try{e()}catch(e){}throw this.auth._errorFactory.create("login-blocked",{originalMessage:null==e?void 0:e.message})}}}class Za{constructor(e){var t,n,i,s;const r=e.customStrengthOptions;this.customStrengthOptions={},this.customStrengthOptions.minPasswordLength=null!==(t=r.minPasswordLength)&&void 0!==t?t:6,r.maxPasswordLength&&(this.customStrengthOptions.maxPasswordLength=r.maxPasswordLength),void 0!==r.containsLowercaseCharacter&&(this.customStrengthOptions.containsLowercaseLetter=r.containsLowercaseCharacter),void 0!==r.containsUppercaseCharacter&&(this.customStrengthOptions.containsUppercaseLetter=r.containsUppercaseCharacter),void 0!==r.containsNumericCharacter&&(this.customStrengthOptions.containsNumericCharacter=r.containsNumericCharacter),void 0!==r.containsNonAlphanumericCharacter&&(this.customStrengthOptions.containsNonAlphanumericCharacter=r.containsNonAlphanumericCharacter),this.enforcementState=e.enforcementState,"ENFORCEMENT_STATE_UNSPECIFIED"===this.enforcementState&&(this.enforcementState="OFF"),this.allowedNonAlphanumericCharacters=null!==(i=null===(n=e.allowedNonAlphanumericCharacters)||void 0===n?void 0:n.join(""))&&void 0!==i?i:"",this.forceUpgradeOnSignin=null!==(s=e.forceUpgradeOnSignin)&&void 0!==s&&s,this.schemaVersion=e.schemaVersion}validatePassword(e){var t,n,i,s,r,o;const a={isValid:!0,passwordPolicy:this};return this.validatePasswordLengthOptions(e,a),this.validatePasswordCharacterOptions(e,a),a.isValid&&(a.isValid=null===(t=a.meetsMinPasswordLength)||void 0===t||t),a.isValid&&(a.isValid=null===(n=a.meetsMaxPasswordLength)||void 0===n||n),a.isValid&&(a.isValid=null===(i=a.containsLowercaseLetter)||void 0===i||i),a.isValid&&(a.isValid=null===(s=a.containsUppercaseLetter)||void 0===s||s),a.isValid&&(a.isValid=null===(r=a.containsNumericCharacter)||void 0===r||r),a.isValid&&(a.isValid=null===(o=a.containsNonAlphanumericCharacter)||void 0===o||o),a}validatePasswordLengthOptions(e,t){const n=this.customStrengthOptions.minPasswordLength,i=this.customStrengthOptions.maxPasswordLength;n&&(t.meetsMinPasswordLength=e.length>=n),i&&(t.meetsMaxPasswordLength=e.length<=i)}validatePasswordCharacterOptions(e,t){let n;this.updatePasswordCharacterOptionsStatuses(t,!1,!1,!1,!1);for(let i=0;i<e.length;i++)n=e.charAt(i),this.updatePasswordCharacterOptionsStatuses(t,n>="a"&&n<="z",n>="A"&&n<="Z",n>="0"&&n<="9",this.allowedNonAlphanumericCharacters.includes(n))}updatePasswordCharacterOptionsStatuses(e,t,n,i,s){this.customStrengthOptions.containsLowercaseLetter&&(e.containsLowercaseLetter||(e.containsLowercaseLetter=t)),this.customStrengthOptions.containsUppercaseLetter&&(e.containsUppercaseLetter||(e.containsUppercaseLetter=n)),this.customStrengthOptions.containsNumericCharacter&&(e.containsNumericCharacter||(e.containsNumericCharacter=i)),this.customStrengthOptions.containsNonAlphanumericCharacter&&(e.containsNonAlphanumericCharacter||(e.containsNonAlphanumericCharacter=s))}}class Xa{constructor(e,t,n,i){this.app=e,this.heartbeatServiceProvider=t,this.appCheckServiceProvider=n,this.config=i,this.currentUser=null,this.emulatorConfig=null,this.operations=Promise.resolve(),this.authStateSubscription=new tc(this),this.idTokenSubscription=new tc(this),this.beforeStateQueue=new Qa(this),this.redirectUser=null,this.isProactiveRefreshEnabled=!1,this.EXPECTED_PASSWORD_POLICY_SCHEMA_VERSION=1,this._canInitEmulator=!0,this._isInitialized=!1,this._deleted=!1,this._initializationPromise=null,this._popupRedirectResolver=null,this._errorFactory=$o,this._agentRecaptchaConfig=null,this._tenantRecaptchaConfigs={},this._projectPasswordPolicy=null,this._tenantPasswordPolicies={},this._resolvePersistenceManagerAvailable=void 0,this.lastNotifiedUid=void 0,this.languageCode=null,this.tenantId=null,this.settings={appVerificationDisabledForTesting:!1},this.frameworks=[],this.name=e.name,this.clientVersion=i.sdkClientVersion,this._persistenceManagerAvailable=new Promise((e=>this._resolvePersistenceManagerAvailable=e))}_initializeWithPersistence(e,t){return t&&(this._popupRedirectResolver=Da(t)),this._initializationPromise=this.queue((async()=>{var n,i,s;if(!this._deleted&&(this.persistenceManager=await Ua.create(this,e),null===(n=this._resolvePersistenceManagerAvailable)||void 0===n||n.call(this),!this._deleted)){if(null===(i=this._popupRedirectResolver)||void 0===i?void 0:i._shouldInitProactively)try{await this._popupRedirectResolver._initialize(this)}catch(e){}await this.initializeCurrentUser(t),this.lastNotifiedUid=(null===(s=this.currentUser)||void 0===s?void 0:s.uid)||null,this._deleted||(this._isInitialized=!0)}})),this._initializationPromise}async _onStorageEvent(){if(this._deleted)return;const e=await this.assertedPersistence.getCurrentUser();return this.currentUser||e?this.currentUser&&e&&this.currentUser.uid===e.uid?(this._currentUser._assign(e),void await this.currentUser.getIdToken()):void await this._updateCurrentUser(e,!0):void 0}async initializeCurrentUserFromIdToken(e){try{const t=await ba(this,{idToken:e}),n=await Oa._fromGetAccountInfoResponse(this,t,e);await this.directlySetCurrentUser(n)}catch(e){console.warn("FirebaseServerApp could not login user with provided authIdToken: ",e),await this.directlySetCurrentUser(null)}}async initializeCurrentUser(e){var t;if(gt(this.app)){const e=this.app.settings.authIdToken;return e?new Promise((t=>{setTimeout((()=>this.initializeCurrentUserFromIdToken(e).then(t,t)))})):this.directlySetCurrentUser(null)}const n=await this.assertedPersistence.getCurrentUser();let i=n,s=!1;if(e&&this.config.authDomain){await this.getOrInitRedirectPersistenceManager();const n=null===(t=this.redirectUser)||void 0===t?void 0:t._redirectEventId,r=null==i?void 0:i._redirectEventId,o=await this.tryRedirectSignIn(e);n&&n!==r||!(null==o?void 0:o.user)||(i=o.user,s=!0)}if(!i)return this.directlySetCurrentUser(null);if(!i._redirectEventId){if(s)try{await this.beforeStateQueue.runMiddleware(i)}catch(e){i=n,this._popupRedirectResolver._overrideRedirectResult(this,(()=>Promise.reject(e)))}return i?this.reloadAndSetCurrentUserOrClear(i):this.directlySetCurrentUser(null)}return Zo(this._popupRedirectResolver,this,"argument-error"),await this.getOrInitRedirectPersistenceManager(),this.redirectUser&&this.redirectUser._redirectEventId===i._redirectEventId?this.directlySetCurrentUser(i):this.reloadAndSetCurrentUserOrClear(i)}async tryRedirectSignIn(e){let t=null;try{t=await this._popupRedirectResolver._completeRedirectFn(this,e,!0)}catch(e){await this._setRedirectUser(null)}return t}async reloadAndSetCurrentUserOrClear(e){try{await xa(e)}catch(e){if("auth/network-request-failed"!==(null==e?void 0:e.code))return this.directlySetCurrentUser(null)}return this.directlySetCurrentUser(e)}useDeviceLanguage(){this.languageCode=function(){if("undefined"==typeof navigator)return null;const e=navigator;return e.languages&&e.languages[0]||e.language||null}()}async _delete(){this._deleted=!0}async updateCurrentUser(e){if(gt(this.app))return Promise.reject(Jo(this));const t=e?se(e):null;return t&&Zo(t.auth.config.apiKey===this.config.apiKey,this,"invalid-user-token"),this._updateCurrentUser(t&&t._clone(this))}async _updateCurrentUser(e,t=!1){if(!this._deleted)return e&&Zo(this.tenantId===e.tenantId,this,"tenant-id-mismatch"),t||await this.beforeStateQueue.runMiddleware(e),this.queue((async()=>{await this.directlySetCurrentUser(e),this.notifyAuthListeners()}))}async signOut(){return gt(this.app)?Promise.reject(Jo(this)):(await this.beforeStateQueue.runMiddleware(null),(this.redirectPersistenceManager||this._popupRedirectResolver)&&await this._setRedirectUser(null),this._updateCurrentUser(null,!0))}setPersistence(e){return gt(this.app)?Promise.reject(Jo(this)):this.queue((async()=>{await this.assertedPersistence.setPersistence(Da(e))}))}_getRecaptchaConfig(){return null==this.tenantId?this._agentRecaptchaConfig:this._tenantRecaptchaConfigs[this.tenantId]}async validatePassword(e){this._getPasswordPolicyInternal()||await this._updatePasswordPolicy();const t=this._getPasswordPolicyInternal();return t.schemaVersion!==this.EXPECTED_PASSWORD_POLICY_SCHEMA_VERSION?Promise.reject(this._errorFactory.create("unsupported-password-policy-schema-version",{})):t.validatePassword(e)}_getPasswordPolicyInternal(){return null===this.tenantId?this._projectPasswordPolicy:this._tenantPasswordPolicies[this.tenantId]}async _updatePasswordPolicy(){const e=await async function(e,t={}){return da(e,"GET","/v2/passwordPolicy",ua(e,t))}(this),t=new Za(e);null===this.tenantId?this._projectPasswordPolicy=t:this._tenantPasswordPolicies[this.tenantId]=t}_getPersistenceType(){return this.assertedPersistence.persistence.type}_getPersistence(){return this.assertedPersistence.persistence}_updateErrorMap(e){this._errorFactory=new U("auth","Firebase",e())}onAuthStateChanged(e,t,n){return this.registerStateListener(this.authStateSubscription,e,t,n)}beforeAuthStateChanged(e,t){return this.beforeStateQueue.pushCallback(e,t)}onIdTokenChanged(e,t,n){return this.registerStateListener(this.idTokenSubscription,e,t,n)}authStateReady(){return new Promise(((e,t)=>{if(this.currentUser)e();else{const n=this.onAuthStateChanged((()=>{n(),e()}),t)}}))}async revokeAccessToken(e){if(this.currentUser){const t={providerId:"apple.com",tokenType:"ACCESS_TOKEN",token:e,idToken:await this.currentUser.getIdToken()};null!=this.tenantId&&(t.tenantId=this.tenantId),await async function(e,t){return da(e,"POST","/v2/accounts:revokeToken",ua(e,t))}(this,t)}}toJSON(){var e;return{apiKey:this.config.apiKey,authDomain:this.config.authDomain,appName:this.name,currentUser:null===(e=this._currentUser)||void 0===e?void 0:e.toJSON()}}async _setRedirectUser(e,t){const n=await this.getOrInitRedirectPersistenceManager(t);return null===e?n.removeCurrentUser():n.setCurrentUser(e)}async getOrInitRedirectPersistenceManager(e){if(!this.redirectPersistenceManager){const t=e&&Da(e)||this._popupRedirectResolver;Zo(t,this,"argument-error"),this.redirectPersistenceManager=await Ua.create(this,[Da(t._redirectPersistence)],"redirectUser"),this.redirectUser=await this.redirectPersistenceManager.getCurrentUser()}return this.redirectPersistenceManager}async _redirectUserForId(e){var t,n;return this._isInitialized&&await this.queue((async()=>{})),(null===(t=this._currentUser)||void 0===t?void 0:t._redirectEventId)===e?this._currentUser:(null===(n=this.redirectUser)||void 0===n?void 0:n._redirectEventId)===e?this.redirectUser:null}async _persistUserIfCurrent(e){if(e===this.currentUser)return this.queue((async()=>this.directlySetCurrentUser(e)))}_notifyListenersIfCurrent(e){e===this.currentUser&&this.notifyAuthListeners()}_key(){return`${this.config.authDomain}:${this.config.apiKey}:${this.name}`}_startProactiveRefresh(){this.isProactiveRefreshEnabled=!0,this.currentUser&&this._currentUser._startProactiveRefresh()}_stopProactiveRefresh(){this.isProactiveRefreshEnabled=!1,this.currentUser&&this._currentUser._stopProactiveRefresh()}get _currentUser(){return this.currentUser}notifyAuthListeners(){var e,t;if(!this._isInitialized)return;this.idTokenSubscription.next(this.currentUser);const n=null!==(t=null===(e=this.currentUser)||void 0===e?void 0:e.uid)&&void 0!==t?t:null;this.lastNotifiedUid!==n&&(this.lastNotifiedUid=n,this.authStateSubscription.next(this.currentUser))}registerStateListener(e,t,n,i){if(this._deleted)return()=>{};const s="function"==typeof t?t:t.next.bind(t);let r=!1;const o=this._isInitialized?Promise.resolve():this._initializationPromise;if(Zo(o,this,"internal-error"),o.then((()=>{r||s(this.currentUser)})),"function"==typeof t){const s=e.addObserver(t,n,i);return()=>{r=!0,s()}}{const n=e.addObserver(t);return()=>{r=!0,n()}}}async directlySetCurrentUser(e){this.currentUser&&this.currentUser!==e&&this._currentUser._stopProactiveRefresh(),e&&this.isProactiveRefreshEnabled&&e._startProactiveRefresh(),this.currentUser=e,e?await this.assertedPersistence.setCurrentUser(e):await this.assertedPersistence.removeCurrentUser()}queue(e){return this.operations=this.operations.then(e,e),this.operations}get assertedPersistence(){return Zo(this.persistenceManager,this,"internal-error"),this.persistenceManager}_logFramework(e){e&&!this.frameworks.includes(e)&&(this.frameworks.push(e),this.frameworks.sort(),this.clientVersion=Ja(this.config.clientPlatform,this._getFrameworks()))}_getFrameworks(){return this.frameworks}async _getAdditionalHeaders(){var e;const t={"X-Client-Version":this.clientVersion};this.app.options.appId&&(t["X-Firebase-gmpid"]=this.app.options.appId);const n=await(null===(e=this.heartbeatServiceProvider.getImmediate({optional:!0}))||void 0===e?void 0:e.getHeartbeatsHeader());n&&(t["X-Firebase-Client"]=n);const i=await this._getAppCheckToken();return i&&(t["X-Firebase-AppCheck"]=i),t}async _getAppCheckToken(){var e;if(gt(this.app)&&this.app.settings.appCheckToken)return this.app.settings.appCheckToken;const t=await(null===(e=this.appCheckServiceProvider.getImmediate({optional:!0}))||void 0===e?void 0:e.getToken());return(null==t?void 0:t.error)&&function(e,...t){Wo.logLevel<=ue.WARN&&Wo.warn(`Auth (${vt}): ${e}`,...t)}(`Error while retrieving App Check token: ${t.error}`),null==t?void 0:t.token}}function ec(e){return se(e)}class tc{constructor(e){this.auth=e,this.observer=null,this.addObserver=function(e){const t=new ee(e,void 0);return t.subscribe.bind(t)}((e=>this.observer=e))}get next(){return Zo(this.observer,this.auth,"internal-error"),this.observer.next.bind(this.observer)}}let nc={async loadJS(){throw new Error("Unable to load external scripts")},recaptchaV2Script:"",recaptchaEnterpriseScript:"",gapiScript:""};function ic(e){return nc.loadJS(e)}function sc(e){return`__${e}${Math.floor(1e6*Math.random())}`}class rc{constructor(){this.enterprise=new oc}ready(e){e()}execute(e,t){return Promise.resolve("token")}render(e,t){return""}}class oc{ready(e){e()}execute(e,t){return Promise.resolve("token")}render(e,t){return""}}const ac="NO_RECAPTCHA";class cc{constructor(e){this.type="recaptcha-enterprise",this.auth=ec(e)}async verify(e="verify",t=!1){function n(t,n,i){const s=window.grecaptcha;_a(s)?s.enterprise.ready((()=>{s.enterprise.execute(t,{action:e}).then((e=>{n(e)})).catch((()=>{n(ac)}))})):i(Error("No reCAPTCHA enterprise script loaded."))}return this.auth.settings.appVerificationDisabledForTesting?(new rc).execute("siteKey",{action:"verify"}):new Promise(((e,i)=>{(async function(e){if(!t){if(null==e.tenantId&&null!=e._agentRecaptchaConfig)return e._agentRecaptchaConfig.siteKey;if(null!=e.tenantId&&void 0!==e._tenantRecaptchaConfigs[e.tenantId])return e._tenantRecaptchaConfigs[e.tenantId].siteKey}return new Promise((async(t,n)=>{ya(e,{clientType:"CLIENT_TYPE_WEB",version:"RECAPTCHA_ENTERPRISE"}).then((i=>{if(void 0!==i.recaptchaKey){const n=new va(i);return null==e.tenantId?e._agentRecaptchaConfig=n:e._tenantRecaptchaConfigs[e.tenantId]=n,t(n.siteKey)}n(new Error("recaptcha Enterprise site key undefined"))})).catch((e=>{n(e)}))}))})(this.auth).then((s=>{if(!t&&_a(window.grecaptcha))n(s,e,i);else{if("undefined"==typeof window)return void i(new Error("RecaptchaVerifier is only supported in browser"));let t=nc.recaptchaEnterpriseScript;0!==t.length&&(t+=s),ic(t).then((()=>{n(s,e,i)})).catch((e=>{i(e)}))}})).catch((e=>{i(e)}))}))}}async function lc(e,t,n,i=!1,s=!1){const r=new cc(e);let o;if(s)o=ac;else try{o=await r.verify(n)}catch(e){o=await r.verify(n,!0)}const a=Object.assign({},t);if("mfaSmsEnrollment"===n||"mfaSmsSignIn"===n){if("phoneEnrollmentInfo"in a){const e=a.phoneEnrollmentInfo.phoneNumber,t=a.phoneEnrollmentInfo.recaptchaToken;Object.assign(a,{phoneEnrollmentInfo:{phoneNumber:e,recaptchaToken:t,captchaResponse:o,clientType:"CLIENT_TYPE_WEB",recaptchaVersion:"RECAPTCHA_ENTERPRISE"}})}else if("phoneSignInInfo"in a){const e=a.phoneSignInInfo.recaptchaToken;Object.assign(a,{phoneSignInInfo:{recaptchaToken:e,captchaResponse:o,clientType:"CLIENT_TYPE_WEB",recaptchaVersion:"RECAPTCHA_ENTERPRISE"}})}return a}return i?Object.assign(a,{captchaResp:o}):Object.assign(a,{captchaResponse:o}),Object.assign(a,{clientType:"CLIENT_TYPE_WEB"}),Object.assign(a,{recaptchaVersion:"RECAPTCHA_ENTERPRISE"}),a}async function uc(e,t,n,i,s){var r,o;if("EMAIL_PASSWORD_PROVIDER"===s){if(null===(r=e._getRecaptchaConfig())||void 0===r?void 0:r.isProviderEnabled("EMAIL_PASSWORD_PROVIDER")){const s=await lc(e,t,n,"getOobCode"===n);return i(e,s)}return i(e,t).catch((async s=>{if("auth/missing-recaptcha-token"===s.code){console.log(`${n} is protected by reCAPTCHA Enterprise for this project. Automatically triggering the reCAPTCHA flow and restarting the flow.`);const s=await lc(e,t,n,"getOobCode"===n);return i(e,s)}return Promise.reject(s)}))}if("PHONE_PROVIDER"===s){if(null===(o=e._getRecaptchaConfig())||void 0===o?void 0:o.isProviderEnabled("PHONE_PROVIDER")){const s=await lc(e,t,n);return i(e,s).catch((async s=>{var r;if("AUDIT"===(null===(r=e._getRecaptchaConfig())||void 0===r?void 0:r.getProviderEnforcementState("PHONE_PROVIDER"))&&("auth/missing-recaptcha-token"===s.code||"auth/invalid-app-credential"===s.code)){console.log(`Failed to verify with reCAPTCHA Enterprise. Automatically triggering the reCAPTCHA v2 flow to complete the ${n} flow.`);const s=await lc(e,t,n,!1,!0);return i(e,s)}return Promise.reject(s)}))}{const s=await lc(e,t,n,!1,!0);return i(e,s)}}return Promise.reject(s+" provider is not supported.")}function dc(e){const t=e.indexOf(":");return t<0?"":e.substr(0,t+1)}function hc(e){if(!e)return null;const t=Number(e);return isNaN(t)?null:t}class pc{constructor(e,t){this.providerId=e,this.signInMethod=t}toJSON(){return Xo("not implemented")}_getIdTokenResponse(e){return Xo("not implemented")}_linkToIdToken(e,t){return Xo("not implemented")}_getReauthenticationResolver(e){return Xo("not implemented")}}async function mc(e,t){return da(e,"POST","/v1/accounts:signUp",t)}async function fc(e,t){return pa(e,"POST","/v1/accounts:signInWithPassword",ua(e,t))}class gc extends pc{constructor(e,t,n,i=null){super("password",n),this._email=e,this._password=t,this._tenantId=i}static _fromEmailAndPassword(e,t){return new gc(e,t,"password")}static _fromEmailAndCode(e,t,n=null){return new gc(e,t,"emailLink",n)}toJSON(){return{email:this._email,password:this._password,signInMethod:this.signInMethod,tenantId:this._tenantId}}static fromJSON(e){const t="string"==typeof e?JSON.parse(e):e;if((null==t?void 0:t.email)&&(null==t?void 0:t.password)){if("password"===t.signInMethod)return this._fromEmailAndPassword(t.email,t.password);if("emailLink"===t.signInMethod)return this._fromEmailAndCode(t.email,t.password,t.tenantId)}return null}async _getIdTokenResponse(e){switch(this.signInMethod){case"password":return uc(e,{returnSecureToken:!0,email:this._email,password:this._password,clientType:"CLIENT_TYPE_WEB"},"signInWithPassword",fc,"EMAIL_PASSWORD_PROVIDER");case"emailLink":return async function(e,t){return pa(e,"POST","/v1/accounts:signInWithEmailLink",ua(e,t))}(e,{email:this._email,oobCode:this._password});default:Yo(e,"internal-error")}}async _linkToIdToken(e,t){switch(this.signInMethod){case"password":return uc(e,{idToken:t,returnSecureToken:!0,email:this._email,password:this._password,clientType:"CLIENT_TYPE_WEB"},"signUpPassword",mc,"EMAIL_PASSWORD_PROVIDER");case"emailLink":return async function(e,t){return pa(e,"POST","/v1/accounts:signInWithEmailLink",ua(e,t))}(e,{idToken:t,email:this._email,oobCode:this._password});default:Yo(e,"internal-error")}}_getReauthenticationResolver(e){return this._getIdTokenResponse(e)}}async function wc(e,t){return pa(e,"POST","/v1/accounts:signInWithIdp",ua(e,t))}class _c extends pc{constructor(){super(...arguments),this.pendingToken=null}static _fromParams(e){const t=new _c(e.providerId,e.signInMethod);return e.idToken||e.accessToken?(e.idToken&&(t.idToken=e.idToken),e.accessToken&&(t.accessToken=e.accessToken),e.nonce&&!e.pendingToken&&(t.nonce=e.nonce),e.pendingToken&&(t.pendingToken=e.pendingToken)):e.oauthToken&&e.oauthTokenSecret?(t.accessToken=e.oauthToken,t.secret=e.oauthTokenSecret):Yo("argument-error"),t}toJSON(){return{idToken:this.idToken,accessToken:this.accessToken,secret:this.secret,nonce:this.nonce,pendingToken:this.pendingToken,providerId:this.providerId,signInMethod:this.signInMethod}}static fromJSON(e){const t="string"==typeof e?JSON.parse(e):e,{providerId:n,signInMethod:i}=t,s=Vo(t,["providerId","signInMethod"]);if(!n||!i)return null;const r=new _c(n,i);return r.idToken=s.idToken||void 0,r.accessToken=s.accessToken||void 0,r.secret=s.secret,r.nonce=s.nonce,r.pendingToken=s.pendingToken||null,r}_getIdTokenResponse(e){return wc(e,this.buildRequest())}_linkToIdToken(e,t){const n=this.buildRequest();return n.idToken=t,wc(e,n)}_getReauthenticationResolver(e){const t=this.buildRequest();return t.autoCreate=!1,wc(e,t)}buildRequest(){const e={requestUri:"http://localhost",returnSecureToken:!0};if(this.pendingToken)e.pendingToken=this.pendingToken;else{const t={};this.idToken&&(t.id_token=this.idToken),this.accessToken&&(t.access_token=this.accessToken),this.secret&&(t.oauth_token_secret=this.secret),t.providerId=this.providerId,this.nonce&&!this.pendingToken&&(t.nonce=this.nonce),e.postBody=J(t)}return e}}async function vc(e,t){return da(e,"POST","/v1/accounts:sendVerificationCode",ua(e,t))}const yc={USER_NOT_FOUND:"user-not-found"};class bc extends pc{constructor(e){super("phone","phone"),this.params=e}static _fromVerification(e,t){return new bc({verificationId:e,verificationCode:t})}static _fromTokenResponse(e,t){return new bc({phoneNumber:e,temporaryProof:t})}_getIdTokenResponse(e){return async function(e,t){return pa(e,"POST","/v1/accounts:signInWithPhoneNumber",ua(e,t))}(e,this._makeVerificationRequest())}_linkToIdToken(e,t){return async function(e,t){const n=await pa(e,"POST","/v1/accounts:signInWithPhoneNumber",ua(e,t));if(n.temporaryProof)throw wa(e,"account-exists-with-different-credential",n);return n}(e,Object.assign({idToken:t},this._makeVerificationRequest()))}_getReauthenticationResolver(e){return async function(e,t){return pa(e,"POST","/v1/accounts:signInWithPhoneNumber",ua(e,Object.assign(Object.assign({},t),{operation:"REAUTH"})),yc)}(e,this._makeVerificationRequest())}_makeVerificationRequest(){const{temporaryProof:e,phoneNumber:t,verificationId:n,verificationCode:i}=this.params;return e&&t?{temporaryProof:e,phoneNumber:t}:{sessionInfo:n,code:i}}toJSON(){const e={providerId:this.providerId};return this.params.phoneNumber&&(e.phoneNumber=this.params.phoneNumber),this.params.temporaryProof&&(e.temporaryProof=this.params.temporaryProof),this.params.verificationCode&&(e.verificationCode=this.params.verificationCode),this.params.verificationId&&(e.verificationId=this.params.verificationId),e}static fromJSON(e){"string"==typeof e&&(e=JSON.parse(e));const{verificationId:t,verificationCode:n,phoneNumber:i,temporaryProof:s}=e;return n||t||i||s?new bc({verificationId:t,verificationCode:n,phoneNumber:i,temporaryProof:s}):null}}class Cc{constructor(e){var t,n,i,s,r,o;const a=Q(Z(e)),c=null!==(t=a.apiKey)&&void 0!==t?t:null,l=null!==(n=a.oobCode)&&void 0!==n?n:null,u=function(e){switch(e){case"recoverEmail":return"RECOVER_EMAIL";case"resetPassword":return"PASSWORD_RESET";case"signIn":return"EMAIL_SIGNIN";case"verifyEmail":return"VERIFY_EMAIL";case"verifyAndChangeEmail":return"VERIFY_AND_CHANGE_EMAIL";case"revertSecondFactorAddition":return"REVERT_SECOND_FACTOR_ADDITION";default:return null}}(null!==(i=a.mode)&&void 0!==i?i:null);Zo(c&&l&&u,"argument-error"),this.apiKey=c,this.operation=u,this.code=l,this.continueUrl=null!==(s=a.continueUrl)&&void 0!==s?s:null,this.languageCode=null!==(r=a.lang)&&void 0!==r?r:null,this.tenantId=null!==(o=a.tenantId)&&void 0!==o?o:null}static parseLink(e){const t=function(e){const t=Q(Z(e)).link,n=t?Q(Z(t)).deep_link_id:null,i=Q(Z(e)).deep_link_id;return(i?Q(Z(i)).link:null)||i||n||t||e}(e);try{return new Cc(t)}catch(e){return null}}}class Ac{constructor(){this.providerId=Ac.PROVIDER_ID}static credential(e,t){return gc._fromEmailAndPassword(e,t)}static credentialWithLink(e,t){const n=Cc.parseLink(t);return Zo(n,"argument-error"),gc._fromEmailAndCode(e,n.code,n.tenantId)}}Ac.PROVIDER_ID="password",Ac.EMAIL_PASSWORD_SIGN_IN_METHOD="password",Ac.EMAIL_LINK_SIGN_IN_METHOD="emailLink";class kc{constructor(e){this.providerId=e,this.defaultLanguageCode=null,this.customParameters={}}setDefaultLanguage(e){this.defaultLanguageCode=e}setCustomParameters(e){return this.customParameters=e,this}getCustomParameters(){return this.customParameters}}class Ec extends kc{constructor(){super(...arguments),this.scopes=[]}addScope(e){return this.scopes.includes(e)||this.scopes.push(e),this}getScopes(){return[...this.scopes]}}class Ic extends Ec{constructor(){super("facebook.com")}static credential(e){return _c._fromParams({providerId:Ic.PROVIDER_ID,signInMethod:Ic.FACEBOOK_SIGN_IN_METHOD,accessToken:e})}static credentialFromResult(e){return Ic.credentialFromTaggedObject(e)}static credentialFromError(e){return Ic.credentialFromTaggedObject(e.customData||{})}static credentialFromTaggedObject({_tokenResponse:e}){if(!e||!("oauthAccessToken"in e))return null;if(!e.oauthAccessToken)return null;try{return Ic.credential(e.oauthAccessToken)}catch(e){return null}}}Ic.FACEBOOK_SIGN_IN_METHOD="facebook.com",Ic.PROVIDER_ID="facebook.com";class Tc extends Ec{constructor(){super("google.com"),this.addScope("profile")}static credential(e,t){return _c._fromParams({providerId:Tc.PROVIDER_ID,signInMethod:Tc.GOOGLE_SIGN_IN_METHOD,idToken:e,accessToken:t})}static credentialFromResult(e){return Tc.credentialFromTaggedObject(e)}static credentialFromError(e){return Tc.credentialFromTaggedObject(e.customData||{})}static credentialFromTaggedObject({_tokenResponse:e}){if(!e)return null;const{oauthIdToken:t,oauthAccessToken:n}=e;if(!t&&!n)return null;try{return Tc.credential(t,n)}catch(e){return null}}}Tc.GOOGLE_SIGN_IN_METHOD="google.com",Tc.PROVIDER_ID="google.com";class Sc extends Ec{constructor(){super("github.com")}static credential(e){return _c._fromParams({providerId:Sc.PROVIDER_ID,signInMethod:Sc.GITHUB_SIGN_IN_METHOD,accessToken:e})}static credentialFromResult(e){return Sc.credentialFromTaggedObject(e)}static credentialFromError(e){return Sc.credentialFromTaggedObject(e.customData||{})}static credentialFromTaggedObject({_tokenResponse:e}){if(!e||!("oauthAccessToken"in e))return null;if(!e.oauthAccessToken)return null;try{return Sc.credential(e.oauthAccessToken)}catch(e){return null}}}Sc.GITHUB_SIGN_IN_METHOD="github.com",Sc.PROVIDER_ID="github.com";class xc extends Ec{constructor(){super("twitter.com")}static credential(e,t){return _c._fromParams({providerId:xc.PROVIDER_ID,signInMethod:xc.TWITTER_SIGN_IN_METHOD,oauthToken:e,oauthTokenSecret:t})}static credentialFromResult(e){return xc.credentialFromTaggedObject(e)}static credentialFromError(e){return xc.credentialFromTaggedObject(e.customData||{})}static credentialFromTaggedObject({_tokenResponse:e}){if(!e)return null;const{oauthAccessToken:t,oauthTokenSecret:n}=e;if(!t||!n)return null;try{return xc.credential(t,n)}catch(e){return null}}}async function Pc(e,t){return pa(e,"POST","/v1/accounts:signUp",ua(e,t))}xc.TWITTER_SIGN_IN_METHOD="twitter.com",xc.PROVIDER_ID="twitter.com";class Rc{constructor(e){this.user=e.user,this.providerId=e.providerId,this._tokenResponse=e._tokenResponse,this.operationType=e.operationType}static async _fromIdTokenResponse(e,t,n,i=!1){const s=await Oa._fromIdTokenResponse(e,n,i),r=Nc(n);return new Rc({user:s,providerId:r,_tokenResponse:n,operationType:t})}static async _forOperation(e,t,n){await e._updateTokensIfNecessary(n,!0);const i=Nc(n);return new Rc({user:e,providerId:i,_tokenResponse:n,operationType:t})}}function Nc(e){return e.providerId?e.providerId:"phoneNumber"in e?"phone":null}class Oc extends F{constructor(e,t,n,i){var s;super(t.code,t.message),this.operationType=n,this.user=i,Object.setPrototypeOf(this,Oc.prototype),this.customData={appName:e.name,tenantId:null!==(s=e.tenantId)&&void 0!==s?s:void 0,_serverResponse:t.customData._serverResponse,operationType:n}}static _fromErrorAndOperation(e,t,n,i){return new Oc(e,t,n,i)}}function Lc(e,t,n,i){return("reauthenticate"===t?n._getReauthenticationResolver(e):n._getIdTokenResponse(e)).catch((n=>{if("auth/multi-factor-auth-required"===n.code)throw Oc._fromErrorAndOperation(e,n,t,i);throw n}))}async function Dc(e,t,n=!1){if(gt(e.app))return Promise.reject(Jo(e));const i="signIn",s=await Lc(e,i,t),r=await Rc._fromIdTokenResponse(e,i,s);return n||await e._updateCurrentUser(r.user),r}async function Mc(e){const t=ec(e);t._getPasswordPolicyInternal()&&await t._updatePasswordPolicy()}function Bc(e,t,n,i){return se(e).onAuthStateChanged(t,n,i)}function Fc(e,t){return da(e,"POST","/v2/accounts/mfaEnrollment:start",ua(e,t))}new WeakMap;const Uc="__sak";class jc{constructor(e,t){this.storageRetriever=e,this.type=t}_isAvailable(){try{return this.storage?(this.storage.setItem(Uc,"1"),this.storage.removeItem(Uc),Promise.resolve(!0)):Promise.resolve(!1)}catch(e){return Promise.resolve(!1)}}_set(e,t){return this.storage.setItem(e,JSON.stringify(t)),Promise.resolve()}_get(e){const t=this.storage.getItem(e);return Promise.resolve(t?JSON.parse(t):null)}_remove(e){return this.storage.removeItem(e),Promise.resolve()}get storage(){return this.storageRetriever()}}class qc extends jc{constructor(){super((()=>window.localStorage),"LOCAL"),this.boundEventHandler=(e,t)=>this.onStorageEvent(e,t),this.listeners={},this.localCache={},this.pollTimer=null,this.fallbackToPolling=Ga(),this._shouldAllowMigration=!0}forAllChangedKeys(e){for(const t of Object.keys(this.listeners)){const n=this.storage.getItem(t),i=this.localCache[t];n!==i&&e(t,i,n)}}onStorageEvent(e,t=!1){if(!e.key)return void this.forAllChangedKeys(((e,t,n)=>{this.notifyListeners(e,n)}));const n=e.key;t?this.detachListener():this.stopPolling();const i=()=>{const e=this.storage.getItem(n);(t||this.localCache[n]!==e)&&this.notifyListeners(n,e)},s=this.storage.getItem(n);!function(){const e=D();return e.indexOf("MSIE ")>=0||e.indexOf("Trident/")>=0}()||10!==document.documentMode||s===e.newValue||e.newValue===e.oldValue?i():setTimeout(i,10)}notifyListeners(e,t){this.localCache[e]=t;const n=this.listeners[e];if(n)for(const e of Array.from(n))e(t?JSON.parse(t):t)}startPolling(){this.stopPolling(),this.pollTimer=setInterval((()=>{this.forAllChangedKeys(((e,t,n)=>{this.onStorageEvent(new StorageEvent("storage",{key:e,oldValue:t,newValue:n}),!0)}))}),1e3)}stopPolling(){this.pollTimer&&(clearInterval(this.pollTimer),this.pollTimer=null)}attachListener(){window.addEventListener("storage",this.boundEventHandler)}detachListener(){window.removeEventListener("storage",this.boundEventHandler)}_addListener(e,t){0===Object.keys(this.listeners).length&&(this.fallbackToPolling?this.startPolling():this.attachListener()),this.listeners[e]||(this.listeners[e]=new Set,this.localCache[e]=this.storage.getItem(e)),this.listeners[e].add(t)}_removeListener(e,t){this.listeners[e]&&(this.listeners[e].delete(t),0===this.listeners[e].size&&delete this.listeners[e]),0===Object.keys(this.listeners).length&&(this.detachListener(),this.stopPolling())}async _set(e,t){await super._set(e,t),this.localCache[e]=JSON.stringify(t)}async _get(e){const t=await super._get(e);return this.localCache[e]=JSON.stringify(t),t}async _remove(e){await super._remove(e),delete this.localCache[e]}}qc.type="LOCAL";const Vc=qc;class Hc extends jc{constructor(){super((()=>window.sessionStorage),"SESSION")}_addListener(e,t){}_removeListener(e,t){}}Hc.type="SESSION";const $c=Hc;class Wc{constructor(e){this.eventTarget=e,this.handlersMap={},this.boundEventHandler=this.handleEvent.bind(this)}static _getInstance(e){const t=this.receivers.find((t=>t.isListeningto(e)));if(t)return t;const n=new Wc(e);return this.receivers.push(n),n}isListeningto(e){return this.eventTarget===e}async handleEvent(e){const t=e,{eventId:n,eventType:i,data:s}=t.data,r=this.handlersMap[i];if(!(null==r?void 0:r.size))return;t.ports[0].postMessage({status:"ack",eventId:n,eventType:i});const o=Array.from(r).map((async e=>e(t.origin,s))),a=await function(e){return Promise.all(e.map((async e=>{try{return{fulfilled:!0,value:await e}}catch(e){return{fulfilled:!1,reason:e}}})))}(o);t.ports[0].postMessage({status:"done",eventId:n,eventType:i,response:a})}_subscribe(e,t){0===Object.keys(this.handlersMap).length&&this.eventTarget.addEventListener("message",this.boundEventHandler),this.handlersMap[e]||(this.handlersMap[e]=new Set),this.handlersMap[e].add(t)}_unsubscribe(e,t){this.handlersMap[e]&&t&&this.handlersMap[e].delete(t),t&&0!==this.handlersMap[e].size||delete this.handlersMap[e],0===Object.keys(this.handlersMap).length&&this.eventTarget.removeEventListener("message",this.boundEventHandler)}}function zc(e="",t=10){let n="";for(let e=0;e<t;e++)n+=Math.floor(10*Math.random());return e+n}Wc.receivers=[];class Yc{constructor(e){this.target=e,this.handlers=new Set}removeMessageHandler(e){e.messageChannel&&(e.messageChannel.port1.removeEventListener("message",e.onMessage),e.messageChannel.port1.close()),this.handlers.delete(e)}async _send(e,t,n=50){const i="undefined"!=typeof MessageChannel?new MessageChannel:null;if(!i)throw new Error("connection_unavailable");let s,r;return new Promise(((o,a)=>{const c=zc("",20);i.port1.start();const l=setTimeout((()=>{a(new Error("unsupported_event"))}),n);r={messageChannel:i,onMessage(e){const t=e;if(t.data.eventId===c)switch(t.data.status){case"ack":clearTimeout(l),s=setTimeout((()=>{a(new Error("timeout"))}),3e3);break;case"done":clearTimeout(s),o(t.data.response);break;default:clearTimeout(l),clearTimeout(s),a(new Error("invalid_response"))}}},this.handlers.add(r),i.port1.addEventListener("message",r.onMessage),this.target.postMessage({eventType:e,eventId:c,data:t},[i.port2])})).finally((()=>{r&&this.removeMessageHandler(r)}))}}function Kc(){return window}function Gc(){return void 0!==Kc().WorkerGlobalScope&&"function"==typeof Kc().importScripts}const Jc="firebaseLocalStorageDb",Qc="firebaseLocalStorage",Zc="fbase_key";class Xc{constructor(e){this.request=e}toPromise(){return new Promise(((e,t)=>{this.request.addEventListener("success",(()=>{e(this.request.result)})),this.request.addEventListener("error",(()=>{t(this.request.error)}))}))}}function el(e,t){return e.transaction([Qc],t?"readwrite":"readonly").objectStore(Qc)}function tl(){const e=indexedDB.open(Jc,1);return new Promise(((t,n)=>{e.addEventListener("error",(()=>{n(e.error)})),e.addEventListener("upgradeneeded",(()=>{const t=e.result;try{t.createObjectStore(Qc,{keyPath:Zc})}catch(e){n(e)}})),e.addEventListener("success",(async()=>{const n=e.result;n.objectStoreNames.contains(Qc)?t(n):(n.close(),await function(){const e=indexedDB.deleteDatabase(Jc);return new Xc(e).toPromise()}(),t(await tl()))}))}))}async function nl(e,t,n){const i=el(e,!0).put({[Zc]:t,value:n});return new Xc(i).toPromise()}function il(e,t){const n=el(e,!0).delete(t);return new Xc(n).toPromise()}class sl{constructor(){this.type="LOCAL",this._shouldAllowMigration=!0,this.listeners={},this.localCache={},this.pollTimer=null,this.pendingWrites=0,this.receiver=null,this.sender=null,this.serviceWorkerReceiverAvailable=!1,this.activeServiceWorker=null,this._workerInitializationPromise=this.initializeServiceWorkerMessaging().then((()=>{}),(()=>{}))}async _openDb(){return this.db||(this.db=await tl()),this.db}async _withRetries(e){let t=0;for(;;)try{const t=await this._openDb();return await e(t)}catch(e){if(t++>3)throw e;this.db&&(this.db.close(),this.db=void 0)}}async initializeServiceWorkerMessaging(){return Gc()?this.initializeReceiver():this.initializeSender()}async initializeReceiver(){this.receiver=Wc._getInstance(Gc()?self:null),this.receiver._subscribe("keyChanged",(async(e,t)=>({keyProcessed:(await this._poll()).includes(t.key)}))),this.receiver._subscribe("ping",(async(e,t)=>["keyChanged"]))}async initializeSender(){var e,t;if(this.activeServiceWorker=await async function(){if(!(null===navigator||void 0===navigator?void 0:navigator.serviceWorker))return null;try{return(await navigator.serviceWorker.ready).active}catch(e){return null}}(),!this.activeServiceWorker)return;this.sender=new Yc(this.activeServiceWorker);const n=await this.sender._send("ping",{},800);n&&(null===(e=n[0])||void 0===e?void 0:e.fulfilled)&&(null===(t=n[0])||void 0===t?void 0:t.value.includes("keyChanged"))&&(this.serviceWorkerReceiverAvailable=!0)}async notifyServiceWorker(e){var t;if(this.sender&&this.activeServiceWorker&&((null===(t=null===navigator||void 0===navigator?void 0:navigator.serviceWorker)||void 0===t?void 0:t.controller)||null)===this.activeServiceWorker)try{await this.sender._send("keyChanged",{key:e},this.serviceWorkerReceiverAvailable?800:50)}catch(t){}}async _isAvailable(){try{if(!indexedDB)return!1;const e=await tl();return await nl(e,Uc,"1"),await il(e,Uc),!0}catch(e){}return!1}async _withPendingWrite(e){this.pendingWrites++;try{await e()}finally{this.pendingWrites--}}async _set(e,t){return this._withPendingWrite((async()=>(await this._withRetries((n=>nl(n,e,t))),this.localCache[e]=t,this.notifyServiceWorker(e))))}async _get(e){const t=await this._withRetries((t=>async function(e,t){const n=el(e,!1).get(t),i=await new Xc(n).toPromise();return void 0===i?null:i.value}(t,e)));return this.localCache[e]=t,t}async _remove(e){return this._withPendingWrite((async()=>(await this._withRetries((t=>il(t,e))),delete this.localCache[e],this.notifyServiceWorker(e))))}async _poll(){const e=await this._withRetries((e=>{const t=el(e,!1).getAll();return new Xc(t).toPromise()}));if(!e)return[];if(0!==this.pendingWrites)return[];const t=[],n=new Set;if(0!==e.length)for(const{fbase_key:i,value:s}of e)n.add(i),JSON.stringify(this.localCache[i])!==JSON.stringify(s)&&(this.notifyListeners(i,s),t.push(i));for(const e of Object.keys(this.localCache))this.localCache[e]&&!n.has(e)&&(this.notifyListeners(e,null),t.push(e));return t}notifyListeners(e,t){this.localCache[e]=t;const n=this.listeners[e];if(n)for(const e of Array.from(n))e(t)}startPolling(){this.stopPolling(),this.pollTimer=setInterval((async()=>this._poll()),800)}stopPolling(){this.pollTimer&&(clearInterval(this.pollTimer),this.pollTimer=null)}_addListener(e,t){0===Object.keys(this.listeners).length&&this.startPolling(),this.listeners[e]||(this.listeners[e]=new Set,this._get(e)),this.listeners[e].add(t)}_removeListener(e,t){this.listeners[e]&&(this.listeners[e].delete(t),0===this.listeners[e].size&&delete this.listeners[e]),0===Object.keys(this.listeners).length&&this.stopPolling()}}sl.type="LOCAL";const rl=sl;function ol(e,t){return da(e,"POST","/v2/accounts/mfaSignIn:start",ua(e,t))}sc("rcb"),new sa(3e4,6e4);const al="recaptcha";async function cl(e,t,n){var i;if(!e._getRecaptchaConfig())try{await async function(e){const t=ec(e),n=await ya(t,{clientType:"CLIENT_TYPE_WEB",version:"RECAPTCHA_ENTERPRISE"}),i=new va(n);null==t.tenantId?t._agentRecaptchaConfig=i:t._tenantRecaptchaConfigs[t.tenantId]=i,i.isAnyProviderEnabled()&&new cc(t).verify()}(e)}catch(e){console.log("Failed to initialize reCAPTCHA Enterprise config. Triggering the reCAPTCHA v2 verification.")}try{let s;if(s="string"==typeof t?{phoneNumber:t}:t,"session"in s){const t=s.session;if("phoneNumber"in s){Zo("enroll"===t.type,e,"internal-error");const i=uc(e,{idToken:t.credential,phoneEnrollmentInfo:{phoneNumber:s.phoneNumber,clientType:"CLIENT_TYPE_WEB"}},"mfaSmsEnrollment",(async(e,t)=>t.phoneEnrollmentInfo.captchaResponse===ac?(Zo((null==n?void 0:n.type)===al,e,"argument-error"),Fc(e,await ll(e,t,n))):Fc(e,t)),"PHONE_PROVIDER"),r=await i.catch((e=>Promise.reject(e)));return r.phoneSessionInfo.sessionInfo}{Zo("signin"===t.type,e,"internal-error");const r=(null===(i=s.multiFactorHint)||void 0===i?void 0:i.uid)||s.multiFactorUid;Zo(r,e,"missing-multi-factor-info");const o=uc(e,{mfaPendingCredential:t.credential,mfaEnrollmentId:r,phoneSignInInfo:{clientType:"CLIENT_TYPE_WEB"}},"mfaSmsSignIn",(async(e,t)=>t.phoneSignInInfo.captchaResponse===ac?(Zo((null==n?void 0:n.type)===al,e,"argument-error"),ol(e,await ll(e,t,n))):ol(e,t)),"PHONE_PROVIDER"),a=await o.catch((e=>Promise.reject(e)));return a.phoneResponseInfo.sessionInfo}}{const t=uc(e,{phoneNumber:s.phoneNumber,clientType:"CLIENT_TYPE_WEB"},"sendVerificationCode",(async(e,t)=>t.captchaResponse===ac?(Zo((null==n?void 0:n.type)===al,e,"argument-error"),vc(e,await ll(e,t,n))):vc(e,t)),"PHONE_PROVIDER"),i=await t.catch((e=>Promise.reject(e)));return i.sessionInfo}}finally{null==n||n._reset()}}async function ll(e,t,n){Zo(n.type===al,e,"argument-error");const i=await n.verify();Zo("string"==typeof i,e,"argument-error");const s=Object.assign({},t);if("phoneEnrollmentInfo"in s){const e=s.phoneEnrollmentInfo.phoneNumber,t=s.phoneEnrollmentInfo.captchaResponse,n=s.phoneEnrollmentInfo.clientType,r=s.phoneEnrollmentInfo.recaptchaVersion;return Object.assign(s,{phoneEnrollmentInfo:{phoneNumber:e,recaptchaToken:i,captchaResponse:t,clientType:n,recaptchaVersion:r}}),s}if("phoneSignInInfo"in s){const e=s.phoneSignInInfo.captchaResponse,t=s.phoneSignInInfo.clientType,n=s.phoneSignInInfo.recaptchaVersion;return Object.assign(s,{phoneSignInInfo:{recaptchaToken:i,captchaResponse:e,clientType:t,recaptchaVersion:n}}),s}return Object.assign(s,{recaptchaToken:i}),s}class ul{constructor(e){this.providerId=ul.PROVIDER_ID,this.auth=ec(e)}verifyPhoneNumber(e,t){return cl(this.auth,e,se(t))}static credential(e,t){return bc._fromVerification(e,t)}static credentialFromResult(e){const t=e;return ul.credentialFromTaggedObject(t)}static credentialFromError(e){return ul.credentialFromTaggedObject(e.customData||{})}static credentialFromTaggedObject({_tokenResponse:e}){if(!e)return null;const{phoneNumber:t,temporaryProof:n}=e;return t&&n?bc._fromTokenResponse(t,n):null}}ul.PROVIDER_ID="phone",ul.PHONE_SIGN_IN_METHOD="phone";class dl extends pc{constructor(e){super("custom","custom"),this.params=e}_getIdTokenResponse(e){return wc(e,this._buildIdpRequest())}_linkToIdToken(e,t){return wc(e,this._buildIdpRequest(t))}_getReauthenticationResolver(e){return wc(e,this._buildIdpRequest())}_buildIdpRequest(e){const t={requestUri:this.params.requestUri,sessionId:this.params.sessionId,postBody:this.params.postBody,tenantId:this.params.tenantId,pendingToken:this.params.pendingToken,returnSecureToken:!0,returnIdpCredential:!0};return e&&(t.idToken=e),t}}function hl(e){return Dc(e.auth,new dl(e),e.bypassAuthState)}function pl(e){const{auth:t,user:n}=e;return Zo(n,t,"internal-error"),async function(e,t,n=!1){const{auth:i}=e;if(gt(i.app))return Promise.reject(Jo(i));const s="reauthenticate";try{const r=await Ia(e,Lc(i,s,t,e),n);Zo(r.idToken,i,"internal-error");const o=ka(r.idToken);Zo(o,i,"internal-error");const{sub:a}=o;return Zo(e.uid===a,i,"user-mismatch"),Rc._forOperation(e,s,r)}catch(e){throw"auth/user-not-found"===(null==e?void 0:e.code)&&Yo(i,"user-mismatch"),e}}(n,new dl(e),e.bypassAuthState)}async function ml(e){const{auth:t,user:n}=e;return Zo(n,t,"internal-error"),async function(e,t,n=!1){const i=await Ia(e,t._linkToIdToken(e.auth,await e.getIdToken()),n);return Rc._forOperation(e,"link",i)}(n,new dl(e),e.bypassAuthState)}class fl{constructor(e,t,n,i,s=!1){this.auth=e,this.resolver=n,this.user=i,this.bypassAuthState=s,this.pendingPromise=null,this.eventManager=null,this.filter=Array.isArray(t)?t:[t]}execute(){return new Promise((async(e,t)=>{this.pendingPromise={resolve:e,reject:t};try{this.eventManager=await this.resolver._initialize(this.auth),await this.onExecution(),this.eventManager.registerConsumer(this)}catch(e){this.reject(e)}}))}async onAuthEvent(e){const{urlResponse:t,sessionId:n,postBody:i,tenantId:s,error:r,type:o}=e;if(r)return void this.reject(r);const a={auth:this.auth,requestUri:t,sessionId:n,tenantId:s||void 0,postBody:i||void 0,user:this.user,bypassAuthState:this.bypassAuthState};try{this.resolve(await this.getIdpTask(o)(a))}catch(e){this.reject(e)}}onError(e){this.reject(e)}getIdpTask(e){switch(e){case"signInViaPopup":case"signInViaRedirect":return hl;case"linkViaPopup":case"linkViaRedirect":return ml;case"reauthViaPopup":case"reauthViaRedirect":return pl;default:Yo(this.auth,"internal-error")}}resolve(e){ea(this.pendingPromise,"Pending promise was never set"),this.pendingPromise.resolve(e),this.unregisterAndCleanUp()}reject(e){ea(this.pendingPromise,"Pending promise was never set"),this.pendingPromise.reject(e),this.unregisterAndCleanUp()}unregisterAndCleanUp(){this.eventManager&&this.eventManager.unregisterConsumer(this),this.pendingPromise=null,this.cleanUp()}}const gl=new sa(2e3,1e4);class wl extends fl{constructor(e,t,n,i,s){super(e,t,i,s),this.provider=n,this.authWindow=null,this.pollId=null,wl.currentPopupAction&&wl.currentPopupAction.cancel(),wl.currentPopupAction=this}async executeNotNull(){const e=await this.execute();return Zo(e,this.auth,"internal-error"),e}async onExecution(){ea(1===this.filter.length,"Popup operations only handle one event");const e=zc();this.authWindow=await this.resolver._openPopup(this.auth,this.provider,this.filter[0],e),this.authWindow.associatedEvent=e,this.resolver._originValidation(this.auth).catch((e=>{this.reject(e)})),this.resolver._isIframeWebStorageSupported(this.auth,(e=>{e||this.reject(Ko(this.auth,"web-storage-unsupported"))})),this.pollUserCancellation()}get eventId(){var e;return(null===(e=this.authWindow)||void 0===e?void 0:e.associatedEvent)||null}cancel(){this.reject(Ko(this.auth,"cancelled-popup-request"))}cleanUp(){this.authWindow&&this.authWindow.close(),this.pollId&&window.clearTimeout(this.pollId),this.authWindow=null,this.pollId=null,wl.currentPopupAction=null}pollUserCancellation(){const e=()=>{var t,n;(null===(n=null===(t=this.authWindow)||void 0===t?void 0:t.window)||void 0===n?void 0:n.closed)?this.pollId=window.setTimeout((()=>{this.pollId=null,this.reject(Ko(this.auth,"popup-closed-by-user"))}),8e3):this.pollId=window.setTimeout(e,gl.get())};e()}}wl.currentPopupAction=null;const _l=new Map;class vl extends fl{constructor(e,t,n=!1){super(e,["signInViaRedirect","linkViaRedirect","reauthViaRedirect","unknown"],t,void 0,n),this.eventId=null}async execute(){let e=_l.get(this.auth._key());if(!e){try{const t=await async function(e,t){const n=function(e){return Fa("pendingRedirect",e.config.apiKey,e.name)}(t),i=function(e){return Da(e._redirectPersistence)}(e);if(!await i._isAvailable())return!1;const s="true"===await i._get(n);return await i._remove(n),s}(this.resolver,this.auth),n=t?await super.execute():null;e=()=>Promise.resolve(n)}catch(t){e=()=>Promise.reject(t)}_l.set(this.auth._key(),e)}return this.bypassAuthState||_l.set(this.auth._key(),(()=>Promise.resolve(null))),e()}async onAuthEvent(e){if("signInViaRedirect"===e.type)return super.onAuthEvent(e);if("unknown"!==e.type){if(e.eventId){const t=await this.auth._redirectUserForId(e.eventId);if(t)return this.user=t,super.onAuthEvent(e);this.resolve(null)}}else this.resolve(null)}async onExecution(){}cleanUp(){}}function yl(e,t){_l.set(e._key(),t)}async function bl(e,t,n=!1){if(gt(e.app))return Promise.reject(Jo(e));const i=ec(e),s=function(e,t){return t?Da(t):(Zo(e._popupRedirectResolver,e,"argument-error"),e._popupRedirectResolver)}(i,t),r=new vl(i,s,n),o=await r.execute();return o&&!n&&(delete o.user._redirectEventId,await i._persistUserIfCurrent(o.user),await i._setRedirectUser(null,t)),o}class Cl{constructor(e){this.auth=e,this.cachedEventUids=new Set,this.consumers=new Set,this.queuedRedirectEvent=null,this.hasHandledPotentialRedirect=!1,this.lastProcessedEventTime=Date.now()}registerConsumer(e){this.consumers.add(e),this.queuedRedirectEvent&&this.isEventForConsumer(this.queuedRedirectEvent,e)&&(this.sendToConsumer(this.queuedRedirectEvent,e),this.saveEventToCache(this.queuedRedirectEvent),this.queuedRedirectEvent=null)}unregisterConsumer(e){this.consumers.delete(e)}onEvent(e){if(this.hasEventBeenHandled(e))return!1;let t=!1;return this.consumers.forEach((n=>{this.isEventForConsumer(e,n)&&(t=!0,this.sendToConsumer(e,n),this.saveEventToCache(e))})),this.hasHandledPotentialRedirect||!function(e){switch(e.type){case"signInViaRedirect":case"linkViaRedirect":case"reauthViaRedirect":return!0;case"unknown":return kl(e);default:return!1}}(e)||(this.hasHandledPotentialRedirect=!0,t||(this.queuedRedirectEvent=e,t=!0)),t}sendToConsumer(e,t){var n;if(e.error&&!kl(e)){const i=(null===(n=e.error.code)||void 0===n?void 0:n.split("auth/")[1])||"internal-error";t.onError(Ko(this.auth,i))}else t.onAuthEvent(e)}isEventForConsumer(e,t){const n=null===t.eventId||!!e.eventId&&e.eventId===t.eventId;return t.filter.includes(e.type)&&n}hasEventBeenHandled(e){return Date.now()-this.lastProcessedEventTime>=6e5&&this.cachedEventUids.clear(),this.cachedEventUids.has(Al(e))}saveEventToCache(e){this.cachedEventUids.add(Al(e)),this.lastProcessedEventTime=Date.now()}}function Al(e){return[e.type,e.eventId,e.sessionId,e.tenantId].filter((e=>e)).join("-")}function kl({type:e,error:t}){return"unknown"===e&&"auth/no-auth-event"===(null==t?void 0:t.code)}const El=/^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/,Il=/^https?/;function Tl(e){const t=ta(),{protocol:n,hostname:i}=new URL(t);if(e.startsWith("chrome-extension://")){const s=new URL(e);return""===s.hostname&&""===i?"chrome-extension:"===n&&e.replace("chrome-extension://","")===t.replace("chrome-extension://",""):"chrome-extension:"===n&&s.hostname===i}if(!Il.test(n))return!1;if(El.test(e))return i===e;const s=e.replace(/\./g,"\\.");return new RegExp("^(.+\\."+s+"|"+s+")$","i").test(i)}const Sl=new sa(3e4,6e4);function xl(){const e=Kc().___jsl;if(null==e?void 0:e.H)for(const t of Object.keys(e.H))if(e.H[t].r=e.H[t].r||[],e.H[t].L=e.H[t].L||[],e.H[t].r=[...e.H[t].L],e.CP)for(let t=0;t<e.CP.length;t++)e.CP[t]=null}function Pl(e){return new Promise(((t,n)=>{var i,s,r;function o(){xl(),gapi.load("gapi.iframes",{callback:()=>{t(gapi.iframes.getContext())},ontimeout:()=>{xl(),n(Ko(e,"network-request-failed"))},timeout:Sl.get()})}if(null===(s=null===(i=Kc().gapi)||void 0===i?void 0:i.iframes)||void 0===s?void 0:s.Iframe)t(gapi.iframes.getContext());else{if(!(null===(r=Kc().gapi)||void 0===r?void 0:r.load)){const t=sc("iframefcb");return Kc()[t]=()=>{gapi.load?o():n(Ko(e,"network-request-failed"))},ic(`${nc.gapiScript}?onload=${t}`).catch((e=>n(e)))}o()}})).catch((e=>{throw Rl=null,e}))}let Rl=null;const Nl=new sa(5e3,15e3),Ol={style:{position:"absolute",top:"-100px",width:"1px",height:"1px"},"aria-hidden":"true",tabindex:"-1"},Ll=new Map([["identitytoolkit.googleapis.com","p"],["staging-identitytoolkit.sandbox.googleapis.com","s"],["test-identitytoolkit.sandbox.googleapis.com","t"]]);function Dl(e){const t=e.config;Zo(t.authDomain,e,"auth-domain-config-required");const n=t.emulator?ra(t,"emulator/auth/iframe"):`https://${e.config.authDomain}/__/auth/iframe`,i={apiKey:t.apiKey,appName:e.name,v:vt},s=Ll.get(e.config.apiHost);s&&(i.eid=s);const r=e._getFrameworks();return r.length&&(i.fw=r.join(",")),`${n}?${J(i).slice(1)}`}const Ml={location:"yes",resizable:"yes",statusbar:"yes",toolbar:"no"};class Bl{constructor(e){this.window=e,this.associatedEvent=null}close(){if(this.window)try{this.window.close()}catch(e){}}}const Fl=encodeURIComponent("fac");async function Ul(e,t,n,i,s,r){Zo(e.config.authDomain,e,"auth-domain-config-required"),Zo(e.config.apiKey,e,"invalid-api-key");const o={apiKey:e.config.apiKey,appName:e.name,authType:n,redirectUrl:i,v:vt,eventId:s};if(t instanceof kc){t.setDefaultLanguage(e.languageCode),o.providerId=t.providerId||"",z(t.getCustomParameters())||(o.customParameters=JSON.stringify(t.getCustomParameters()));for(const[e,t]of Object.entries(r||{}))o[e]=t}if(t instanceof Ec){const e=t.getScopes().filter((e=>""!==e));e.length>0&&(o.scopes=e.join(","))}e.tenantId&&(o.tid=e.tenantId);const a=o;for(const e of Object.keys(a))void 0===a[e]&&delete a[e];const c=await e._getAppCheckToken(),l=c?`#${Fl}=${encodeURIComponent(c)}`:"";return`${function({config:e}){return e.emulator?ra(e,"emulator/auth/handler"):`https://${e.authDomain}/__/auth/handler`}(e)}?${J(a).slice(1)}${l}`}const jl="webStorageSupport",ql=class{constructor(){this.eventManagers={},this.iframes={},this.originValidationPromises={},this._redirectPersistence=$c,this._completeRedirectFn=bl,this._overrideRedirectResult=yl}async _openPopup(e,t,n,i){var s;return ea(null===(s=this.eventManagers[e._key()])||void 0===s?void 0:s.manager,"_initialize() not called before _openPopup()"),function(e,t,n,i=500,s=600){const r=Math.max((window.screen.availHeight-s)/2,0).toString(),o=Math.max((window.screen.availWidth-i)/2,0).toString();let a="";const c=Object.assign(Object.assign({},Ml),{width:i.toString(),height:s.toString(),top:r,left:o}),l=D().toLowerCase();n&&(a=Ha(l)?"_blank":n),qa(l)&&(t=t||"http://localhost",c.scrollbars="yes");const u=Object.entries(c).reduce(((e,[t,n])=>`${e}${t}=${n},`),"");if(function(e=D()){var t;return Ka(e)&&!!(null===(t=window.navigator)||void 0===t?void 0:t.standalone)}(l)&&"_self"!==a)return function(e,t){const n=document.createElement("a");n.href=e,n.target=t;const i=document.createEvent("MouseEvent");i.initMouseEvent("click",!0,!0,window,1,0,0,0,0,!1,!1,!1,!1,1,null),n.dispatchEvent(i)}(t||"",a),new Bl(null);const d=window.open(t||"",a,u);Zo(d,e,"popup-blocked");try{d.focus()}catch(e){}return new Bl(d)}(e,await Ul(e,t,n,ta(),i),zc())}async _openRedirect(e,t,n,i){return await this._originValidation(e),s=await Ul(e,t,n,ta(),i),Kc().location.href=s,new Promise((()=>{}));var s}_initialize(e){const t=e._key();if(this.eventManagers[t]){const{manager:e,promise:n}=this.eventManagers[t];return e?Promise.resolve(e):(ea(n,"If manager is not set, promise should be"),n)}const n=this.initAndGetManager(e);return this.eventManagers[t]={promise:n},n.catch((()=>{delete this.eventManagers[t]})),n}async initAndGetManager(e){const t=await async function(e){const t=await function(e){return Rl=Rl||Pl(e),Rl}(e),n=Kc().gapi;return Zo(n,e,"internal-error"),t.open({where:document.body,url:Dl(e),messageHandlersFilter:n.iframes.CROSS_ORIGIN_IFRAMES_FILTER,attributes:Ol,dontclear:!0},(t=>new Promise((async(n,i)=>{await t.restyle({setHideOnLeave:!1});const s=Ko(e,"network-request-failed"),r=Kc().setTimeout((()=>{i(s)}),Nl.get());function o(){Kc().clearTimeout(r),n(t)}t.ping(o).then(o,(()=>{i(s)}))}))))}(e),n=new Cl(e);return t.register("authEvent",(t=>(Zo(null==t?void 0:t.authEvent,e,"invalid-auth-event"),{status:n.onEvent(t.authEvent)?"ACK":"ERROR"})),gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER),this.eventManagers[e._key()]={manager:n},this.iframes[e._key()]=t,n}_isIframeWebStorageSupported(e,t){this.iframes[e._key()].send(jl,{type:jl},(n=>{var i;const s=null===(i=null==n?void 0:n[0])||void 0===i?void 0:i[jl];void 0!==s&&t(!!s),Yo(e,"internal-error")}),gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER)}_originValidation(e){const t=e._key();return this.originValidationPromises[t]||(this.originValidationPromises[t]=async function(e){if(e.config.emulator)return;const{authorizedDomains:t}=await async function(e,t={}){return da(e,"GET","/v1/projects",t)}(e);for(const e of t)try{if(Tl(e))return}catch(e){}Yo(e,"unauthorized-domain")}(e)),this.originValidationPromises[t]}get _shouldInitProactively(){return Ga()||Va()||Ka()}};var Vl="@firebase/auth",Hl="1.10.6";class $l{constructor(e){this.auth=e,this.internalListeners=new Map}getUid(){var e;return this.assertAuthConfigured(),(null===(e=this.auth.currentUser)||void 0===e?void 0:e.uid)||null}async getToken(e){return this.assertAuthConfigured(),await this.auth._initializationPromise,this.auth.currentUser?{accessToken:await this.auth.currentUser.getIdToken(e)}:null}addAuthTokenListener(e){if(this.assertAuthConfigured(),this.internalListeners.has(e))return;const t=this.auth.onIdTokenChanged((t=>{e((null==t?void 0:t.stsTokenManager.accessToken)||null)}));this.internalListeners.set(e,t),this.updateProactiveRefresh()}removeAuthTokenListener(e){this.assertAuthConfigured();const t=this.internalListeners.get(e);t&&(this.internalListeners.delete(e),t(),this.updateProactiveRefresh())}assertAuthConfigured(){Zo(this.auth._initializationPromise,"dependent-sdk-initialized-before-auth")}updateProactiveRefresh(){this.internalListeners.size>0?this.auth._startProactiveRefresh():this.auth._stopProactiveRefresh()}}const Wl=S("authIdTokenMaxAge")||300;let zl=null;var Yl,Kl;Yl={loadJS:e=>new Promise(((t,n)=>{const i=document.createElement("script");var s,r;i.setAttribute("src",e),i.onload=t,i.onerror=e=>{const t=Ko("internal-error");t.customData=e,n(t)},i.type="text/javascript",i.charset="UTF-8",(null!==(r=null===(s=document.getElementsByTagName("head"))||void 0===s?void 0:s[0])&&void 0!==r?r:document).appendChild(i)})),gapiScript:"https://apis.google.com/js/api.js",recaptchaV2Script:"https://www.google.com/recaptcha/api.js",recaptchaEnterpriseScript:"https://www.google.com/recaptcha/enterprise.js?render="},nc=Yl,Kl="Browser",mt(new re("auth",((e,{options:t})=>{const n=e.getProvider("app").getImmediate(),i=e.getProvider("heartbeat"),s=e.getProvider("app-check-internal"),{apiKey:r,authDomain:o}=n.options;Zo(r&&!r.includes(":"),"invalid-api-key",{appName:n.name});const a={apiKey:r,authDomain:o,clientPlatform:Kl,apiHost:"identitytoolkit.googleapis.com",tokenApiHost:"securetoken.googleapis.com",apiScheme:"https",sdkClientVersion:Ja(Kl)},c=new Xa(n,i,s,a);return function(e,t){const n=(null==t?void 0:t.persistence)||[],i=(Array.isArray(n)?n:[n]).map(Da);(null==t?void 0:t.errorMap)&&e._updateErrorMap(t.errorMap),e._initializeWithPersistence(i,null==t?void 0:t.popupRedirectResolver)}(c,t),c}),"PUBLIC").setInstantiationMode("EXPLICIT").setInstanceCreatedCallback(((e,t,n)=>{e.getProvider("auth-internal").initialize()}))),mt(new re("auth-internal",(e=>(e=>new $l(e))(ec(e.getProvider("auth").getImmediate()))),"PRIVATE").setInstantiationMode("EXPLICIT")),Ct(Vl,Hl,function(e){switch(e){case"Node":return"node";case"ReactNative":return"rn";case"Worker":return"webworker";case"Cordova":return"cordova";case"WebExtension":return"web-extension";default:return}}(Kl)),Ct(Vl,Hl,"esm2017"),zt(!0,void 0);const Gl=yt({apiKey:"AIzaSyCDKknjtoLV9Icib7Gwf-3fc2936de7f-o",authDomain:"budgetwise-2f8ab.firebaseapp.com",projectId:"budgetwise-2f8ab",storageBucket:"budgetwise-2f8ab.firebasestorage.app",messagingSenderId:"213006654132",appId:"1:213006654132:web:cb45d5c13b8cacc74415e1",databaseURL:"https://budgetwise-2f8ab-default-rtdb.europe-west1.firebasedatabase.app/"}),Jl=function(e=bt(),t){const n=ft(e,"database").getImmediate({identifier:t});if(!n._instanceStarted){const e=(()=>{const e=I("database");if(!e)return;const t=e.lastIndexOf(":");if(t<=0||t+1===e.length)throw new Error(`Invalid host ${e} with no separate hostname and port!`);const n=parseInt(e.substring(t+1),10);return"["===e[0]?[e.substring(1,t-1),n]:[e.substring(0,t),n]})();e&&function(e,t,n,i={}){(e=se(e))._checkNotDeleted("useEmulator");const s=`${t}:${n}`,r=e._repoInternal;if(e._instanceStarted){if(s===e._repoInternal.repoInfo_.host&&K(i,r.repoInfo_.emulatorOptions))return;Jt("connectDatabaseEmulator() cannot initialize or alter the emulator configuration after the database instance has started.")}let o;if(r.repoInfo_.nodeAdmin)i.mockUserToken&&Jt('mockUserToken is not supported by the Admin SDK. For client access with mock users, please use the "firebase" package instead of "firebase-admin".'),o=new fn(fn.OWNER);else if(i.mockUserToken){const t="string"==typeof i.mockUserToken?i.mockUserToken:function(e,t){if(e.uid)throw new Error('The "uid" field is no longer supported by mockUserToken. Please use "sub" instead for Firebase Auth User ID.');const n=t||"demo-project",i=e.iat||0,s=e.sub||e.user_id;if(!s)throw new Error("mockUserToken must contain 'sub' or 'user_id' field!");const r=Object.assign({iss:`https://securetoken.google.com/${n}`,aud:n,iat:i,exp:i+3600,auth_time:i,sub:s,user_id:s,firebase:{sign_in_provider:"custom",identities:{}}},e);return[b(JSON.stringify({alg:"none",type:"JWT"})),b(JSON.stringify(r)),""].join(".")}(i.mockUserToken,e.app.options.projectId);o=new fn(t)}P(t)&&(R(t),L("Database",!0)),function(e,t,n,i){const s=t.lastIndexOf(":"),r=P(t.substring(0,s));e.repoInfo_=new bn(t,r,e.repoInfo_.namespace,e.repoInfo_.webSocketOnly,e.repoInfo_.nodeAdmin,e.repoInfo_.persistenceKey,e.repoInfo_.includeNamespaceInQueryParams,!0,n),i&&(e.authTokenProvider_=i)}(r,s,i,o)}(n,...e)}return n}(Gl),Ql=function(e=bt()){const t=ft(e,"auth");if(t.isInitialized())return t.getImmediate();const n=function(e,t){const n=ft(e,"auth");if(n.isInitialized()){const e=n.getImmediate();if(K(n.getOptions(),null!=t?t:{}))return e;Yo(e,"already-initialized")}return n.initialize({options:t})}(e,{popupRedirectResolver:ql,persistence:[rl,Vc,$c]}),i=S("authTokenSyncURL");if(i&&"boolean"==typeof isSecureContext&&isSecureContext){const e=new URL(i,location.origin);if(location.origin===e.origin){const t=(s=e.toString(),async e=>{const t=e&&await e.getIdTokenResult(),n=t&&((new Date).getTime()-Date.parse(t.issuedAtTime))/1e3;if(n&&n>Wl)return;const i=null==t?void 0:t.token;zl!==i&&(zl=i,await fetch(s,{method:i?"POST":"DELETE",headers:i?{Authorization:`Bearer ${i}`}:{}}))});!function(e,t,n){se(e).beforeAuthStateChanged(t,n)}(n,t,(()=>t(n.currentUser))),function(e){se(e).onIdTokenChanged((e=>t(e)),void 0,void 0)}(n)}}var s;const r=I("auth");return r&&function(e,t,n){const i=ec(e);Zo(/^https?:\/\//.test(t),i,"invalid-emulator-scheme");const s=!!(null==n?void 0:n.disableWarnings),r=dc(t),{host:o,port:a}=function(e){const t=dc(e),n=/(\/\/)?([^?#/]+)/.exec(e.substr(t.length));if(!n)return{host:"",port:null};const i=n[2].split("@").pop()||"",s=/^(\[[^\]]+\])(:|$)/.exec(i);if(s){const e=s[1];return{host:e,port:hc(i.substr(e.length+1))}}{const[e,t]=i.split(":");return{host:e,port:hc(t)}}}(t),c=null===a?"":`:${a}`,l={url:`${r}//${o}${c}/`},u=Object.freeze({host:o,port:a,protocol:r.replace(":",""),options:Object.freeze({disableWarnings:s})});if(!i._canInitEmulator)return Zo(i.config.emulator&&i.emulatorConfig,i,"emulator-config-failed"),void Zo(K(l,i.config.emulator)&&K(u,i.emulatorConfig),i,"emulator-config-failed");i.config.emulator=l,i.emulatorConfig=u,i.settings.appVerificationDisabledForTesting=!0,P(o)?(R(`${r}//${o}${c}`),L("Auth",!0)):s||function(){function e(){const e=document.createElement("p"),t=e.style;e.innerText="Running in emulator mode. Do not use with production credentials.",t.position="fixed",t.width="100%",t.backgroundColor="#ffffff",t.border=".1em solid #000000",t.color="#b50000",t.bottom="0px",t.left="0px",t.margin="0px",t.zIndex="10000",t.textAlign="center",e.classList.add("firebase-emulator-warning"),document.body.appendChild(e)}"undefined"!=typeof console&&"function"==typeof console.info&&console.info("WARNING: You are using the Auth Emulator, which is intended for local testing only.  Do not use with production credentials."),"undefined"!=typeof window&&"undefined"!=typeof document&&("loading"===document.readyState?window.addEventListener("DOMContentLoaded",e):e())}()}(n,`http://${r}`),n}(Gl);var Zl=n(465),Xl=n.n(Zl),eu=n(736),tu=n.n(eu),nu=n(455),iu={};function su(e){tu()({text:e,duration:3e3,gravity:"top",position:"right",style:{background:"linear-gradient(to right, #00b09b, #96c93d)"}}).showToast()}function ru(e){tu()({text:e,duration:3e3,gravity:"top",position:"right",style:{background:"linear-gradient(to right, #e53935, #e35d5b)"}}).showToast()}iu.styleTagTransform=h(),iu.setAttributes=c(),iu.insert=o().bind(null,"head"),iu.domAPI=s(),iu.insertStyleElement=u(),t()(nu.A,iu),nu.A&&nu.A.locals&&nu.A.locals,document.addEventListener("DOMContentLoaded",(()=>{const e=document.getElementById("transaction-form"),t=document.getElementById("description"),n=document.getElementById("amount"),i=document.getElementById("type"),s=document.getElementById("transaction-list");e&&t&&n&&i&&s?Bc(Ql,(r=>{if(!r)return void console.warn("User not logged in.");const o=r.uid,a=Oo(Jl,`users/${o}/transactions`);e.addEventListener("submit",(s=>{s.preventDefault();const r={description:t.value.trim(),amount:parseFloat(n.value),type:i.value,timestamp:Date.now()};r.description&&!isNaN(r.amount)&&["income","expense"].includes(r.type)?function(e,t){e=se(e),Gr("push",e._path),zr("push",t,e._path,!0);const n=so(e._repo),i=Io(n),s=Lo(e,i),r=Lo(e,i);let o;return o=null!=t?Do(r,t).then((()=>r)):Promise.resolve(r),s.then=o.then.bind(o),s.catch=o.then.bind(o,void 0),s}(a,r).then((()=>{su("Transaction saved!"),e.reset()})).catch((e=>{console.error("Error saving transaction:",e),ru("Error saving transaction")})):ru("Invalid transaction input.")})),Fo(a,(e=>{const t=e.val();s.innerHTML="";let n=0,i=0;t?(Object.entries(t).forEach((([e,t])=>{if("number"!=typeof t.amount||!["income","expense"].includes(t.type))return;"income"===t.type&&(n+=t.amount),"expense"===t.type&&(i+=t.amount);const r=document.createElement("tr");r.innerHTML=`\n            <td class="transactions__td">${t.description}</td>\n            <td class="transactions__td">${t.amount.toFixed(2)}</td>\n            <td class="transactions__td">${t.type}</td>\n            <td class="transactions__td">${new Date(t.timestamp).toLocaleDateString()}</td>\n            <td class="transactions__td">\n              <button class="transactions__delete-button" data-id="${e}">🗑️ Delete</button>\n            </td>\n          `,s.appendChild(r)})),document.getElementById("total-income").textContent=n.toFixed(2),document.getElementById("total-expenses").textContent=i.toFixed(2),document.getElementById("balance").textContent=(n-i).toFixed(2),document.querySelectorAll(".transactions__delete-button").forEach((e=>{e.addEventListener("click",(()=>{const t=e.getAttribute("data-id");(function({title:e,text:t,confirmButtonText:n="Yes"}){return Xl().fire({title:e,text:t,icon:"warning",showCancelButton:!0,confirmButtonColor:"#d33",cancelButtonColor:"#3085d6",confirmButtonText:n})})({title:"Are you sure?",text:"This transaction will be permanently deleted!",confirmButtonText:"Yes, delete it!"}).then((e=>{e.isConfirmed&&function(e){return Gr("remove",e._path),Do(e,null)}(Oo(Jl,`users/${o}/transactions/${t}`)).then((()=>su("Transaction deleted successfully!"))).catch((e=>{console.error("Delete failed:",e),ru("Delete failed!")}))}))}))}))):(s.innerHTML='<tr><td colspan="5" class="transactions__td">No transactions found.</td></tr>',document.getElementById("total-income").textContent="0.00",document.getElementById("total-expenses").textContent="0.00",document.getElementById("balance").textContent="0.00")}))})):console.error("Missing form elements")})),document.addEventListener("DOMContentLoaded",(()=>{const e=document.getElementById("login-section"),t=document.getElementById("signup-section"),n=document.getElementById("app"),i=document.getElementById("logout-button"),s=document.getElementById("show-signup"),r=document.getElementById("show-login"),o=document.getElementById("login-form"),a=document.getElementById("signup-form");e&&t&&n&&i&&s&&r&&o&&a?(Bc(Ql,(s=>{s?(e.style.display="none",t.style.display="none",n.style.display="block",i.style.display="inline-block"):(e.style.display="block",t.style.display="none",n.style.display="none",i.style.display="none")})),s.addEventListener("click",(n=>{n.preventDefault(),e.style.display="none",t.style.display="block"})),r.addEventListener("click",(n=>{n.preventDefault(),t.style.display="none",e.style.display="block"})),a.addEventListener("submit",(e=>{e.preventDefault();const t=document.getElementById("signup-email").value,n=document.getElementById("signup-password").value;(async function(e,t,n){if(gt(e.app))return Promise.reject(Jo(e));const i=ec(e),s=uc(i,{returnSecureToken:!0,email:t,password:n,clientType:"CLIENT_TYPE_WEB"},"signUpPassword",Pc,"EMAIL_PASSWORD_PROVIDER"),r=await s.catch((t=>{throw"auth/password-does-not-meet-requirements"===t.code&&Mc(e),t})),o=await Rc._fromIdTokenResponse(i,"signIn",r);return await i._updateCurrentUser(o.user),o})(Ql,t,n).then((()=>{tu()({text:"Signup successful!",duration:3e3,gravity:"top",position:"center",style:{background:"linear-gradient(to right, #00b09b, #96c93d)"}}).showToast()})).catch((e=>{tu()({text:`Signup failed: ${e.message}`,duration:3e3,gravity:"top",position:"center",style:{background:"linear-gradient(to right, #FF5F6D, #FFC371)"}}).showToast()}))})),o.addEventListener("submit",(e=>{e.preventDefault();const t=document.getElementById("login-email").value,n=document.getElementById("login-password").value;(function(e,t,n){return gt(e.app)?Promise.reject(Jo(e)):async function(e,t){return Dc(ec(e),t)}(se(e),Ac.credential(t,n)).catch((async t=>{throw"auth/password-does-not-meet-requirements"===t.code&&Mc(e),t}))})(Ql,t,n).then((()=>{tu()({text:"Login successful!",duration:3e3,gravity:"top",position:"center",style:{background:"linear-gradient(to right, #00b09b, #96c93d)"}}).showToast()})).catch((e=>{tu()({text:`Login failed: ${e.message}`,duration:3e3,gravity:"top",position:"center",style:{background:"linear-gradient(to right, #FF5F6D, #FFC371)"}}).showToast()}))})),i.addEventListener("click",(()=>{(function(e){return se(e).signOut()})(Ql).then((()=>{tu()({text:"Successfully logged out.",duration:3e3,gravity:"top",position:"center",style:{background:"linear-gradient(to right, #FF416C, #FF4B2B)"}}).showToast()})).catch((e=>{tu()({text:`Logout error: ${e.message}`,duration:3e3,gravity:"top",position:"center",style:{background:"linear-gradient(to right, #FF5F6D, #FFC371)"}}).showToast()}))}))):console.error("Missing one or more auth DOM elements.")}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,